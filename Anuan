Time = {}
berlian = {}
pohon = {}
worlds = {}
WorldBreak = {}
WorldPlant = {}
WorldTake = {}
t = os.time()	
totalloop = 0
totalgems = 0
gemsawal = 0
gemssave = 0
gemsakhir = 0
strWaktu = ""
WorldGen = ""
rumah = ""
WorldData = ""
BpCek = false
emoji = ""
checknya = false
WorldTutor = ""
widreal = ""
widpack = ""
widseed = ""
widgrinder = ""
bakar = false
metotone = false
modefloat = false
IndexBreak = 0
IndexJammer = 0
IndexLock = 0
SeedAwal = 0
SeedAkhir = 0
TotalAkhir = 0
TotalGrinder = 0
rulah = getBot().index

if Code == "" or Code == nil then
    if getBot().index == 1 then
        print("[Jopy Rotation Script]: Please Write Your Code!")
    end
    return
end

delayexe = DelayExecute * 1000
sleep( delayexe * ( getBot().index - ( 1 - 1 )))
httpClient = HttpClient.new()
httpClient:setMethod(Method.get)
httpClient.url = "https://rentry.co/benerilang/raw"
local httpResult = httpClient:request()
local response = httpResult.body

for Afgan in response:gmatch("[^\n]+") do
    frontText = string.match(Afgan, "%S+")
    if frontText == Code then
        checknya = true
        break
    end
end

if checknya then    
    if rulah == 1 then
        print("[Jopy Rotation Script]: Script Has Running Successfully!")
    end
else
    if rulah == 1 then
        print("[Jopy Rotation Script]: Error When Run Script, Please Write Code Correctly")
    end
    return
end

local start4, stop4 = StartFromIndex:match("(%d+)-(%d+)")
local startlist = tonumber(start4)
local stoplist = tonumber(stop4)

function findPath(x,y)
    path = getBot():getPath(x, y)
    if #path == 0 then
        return false
    end
    for i = 1, #path do
        if i % 9 == 0 then
            getBot():moveTile(path[i].x, path[i].y)  
            reconnect(x,y)
        end
    end
    getBot():moveTile(path[#path].x, path[#path].y)
    reconnect(x,y)
    while math.floor(getBot().x) ~= x and getBot().status == 1 and getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 6 or math.floor(getBot().y) ~= y and getBot().status == 1 and getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 6 do        
        reconnect(x,y)
        getBot():findPath(x,y)
        sleep(20)
        reconnect(x,y)
        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 6 then
            backpos(x, y)
        end
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 6 do
        backpos(x, y)
    end
    if getBot().status ~= 1 then
        reconnect(x,y)
    end
    if not HarvestTreeUntilReachLevel then
        while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x),math.floor(getBot().y + 1))
            sleep(delaypunch)
            reconnect(x,y)
        end
        while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y - 1)).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x),math.floor(getBot().y - 1))
            sleep(delaypunch)
            reconnect(x,y)
        end  
        while getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y )).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x - 1),math.floor(getBot().y ))
            sleep(delaypunch)
            reconnect(x,y)
        end
        while getBot():getWorld():getTile(math.floor(getBot().x + 1), math.floor(getBot().y )).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x + 1),math.floor(getBot().y ))
            sleep(delaypunch)
            reconnect(x,y)
        end
    elseif HarvestTreeUntilReachLevel and getBot().level >= HarvestUntilLevel then
        while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x),math.floor(getBot().y + 1))
            sleep(delaypunch)
            reconnect(x,y)
        end
        while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y - 1)).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x),math.floor(getBot().y - 1))
            sleep(delaypunch)
            reconnect(x,y)
        end  
        while getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y )).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x - 1),math.floor(getBot().y ))
            sleep(delaypunch)
            reconnect(x,y)
        end
        while getBot():getWorld():getTile(math.floor(getBot().x + 1), math.floor(getBot().y )).fg == seedid-1 do
            reconnect(x,y)
            getBot():hit(math.floor(getBot().x + 1),math.floor(getBot().y ))
            sleep(delaypunch)
            reconnect(x,y)
        end
    end
end


function generateRandomText(length, letters, botId)
    local text = ""
    for i = 1, length do
        local randomValue = math.random()
        local randomIndex = math.floor(randomValue * #letters) + 1
        local adjustedIndex = (randomIndex + botId - 1) % #letters + 1
        local randomChar = letters[adjustedIndex]
        text = text .. randomChar
    end 
    return text
end

function getRandom(table)
    if #table == 0 then
        return
    end
    letters = table
    countNumber = 1
    botId = getBot().index
    math.randomseed(os.time())
    hasil = generateRandomText(countNumber, letters, botId)
    return hasil
end

function TagBan(text)
    if not UseWebhookTagBan then
        return
    end
    te = os.time() - t
    local currentTime = os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60)
    webhook = Webhook.new(WhTagBan)
    
    webhook.embed1.use = true
    webhook.embed1.title = "<:bot:1153155005889642556> **: "..getBot().name:upper().." ( "..getBot().level.." )**\n" .. text .. ""
    webhook.embed1.color = " " .. math.random(0, 16777215) .. " "
    webhook.content = "@everyone"
    webhook.embed1.footer.text = "Jopy Rotation Nuron\n"..math.floor(te/86400).." Days "..math.floor(te%86400/3600).." Hours "..math.floor(te%86400%3600/60).." Minutes "..math.floor(te%86400%3600%60).." Seconds"
    
    webhook:send()
end

function meki(v, netid)
    if v:get(0):getString() == "OnDialogRequest" then
        if v:get(1):getString():find("myWorldsUiTab") then
            if WorldTutor ~= "" and WorldTutor ~= nil then
                if WorldTutor ~= v:get(1):getString():match("add_button|(%w+)|") then
                    if nukedtutor then
                        nukedtutor = false
                    end
                end
            end
            WorldTutor = v:get(1):getString():match("add_button|(%w+)|")
        end
    end
end

addEvent(Event.variantlist, meki)

function removeTextWorldBreak(filepath, textToRemove)
    local content = read(filepath)


    local pattern1 = textToRemove .. " %[ " .. getBot().name:upper() .. " %]%s*\n*"
    local pattern2 = textToRemove .. "%s*\n*"

    local newContent1 = content:gsub(pattern1, "")
    local newContent2 = content:gsub(pattern2, "")

    local finalContent = ""
    if newContent1 ~= content or newContent2 ~= content then
        if newContent1 ~= content then
            finalContent = newContent1
        else
            finalContent = newContent2
        end
    else
        return
    end

    write(filepath,finalContent)
end

function isURL1(str)
    return string.match(str, "^https?://")
end
function isURL2(str)
    return string.match(str, "^http?://")
end

function trim(s)
    return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function detectText(text, pattern)
    return string.match(text, pattern) ~= nil
end

function fileExists(filename)
    local file = io.open(filename, "r")
    if file then
        file:close()
        return true
    else
        return false
    end
end

function updateWorldList(filename)
    local file = io.open(filename, "r")
    local content = file:read("*all")
    file:close()

    local worlds = {}
    for baris in content:gmatch("[^\r\n]+") do
        table.insert(worlds, baris)
    end

    if #worlds > 0 then
        WorldData = worlds[1]

        local firstWorld = table.remove(worlds, 1)
        table.insert(worlds, firstWorld)

        local updatedContent = table.concat(worlds, "\n")
        write(filename, updatedContent)
    else
        print("No worlds found in the file.")
        getBot():stopScript()
    end
end

if PlantProfitSeed then
    file_pathplant = WorldPlantList
    anjayplant = read(file_pathplant)
    count = 0
    for line in string.gmatch(anjayplant, "[^\r\n]+") do
        count = count + 1
        if count > urutanbot2 - MaxWorldPlantPerBot and count <= urutanbot2 then
            table.insert(WorldPlant, trim(line))
        end
    end
end

detectcuy = false

if BreakInOtherWorld then
    file_pathbreak = WorldBreakList
    anjaybreak = read(file_pathbreak)
    pattern = "%-%-%s*%[%s*" .. getBot().name:upper() .. "%s*%]"
    for line in string.gmatch(anjaybreak, "[^\r\n]+") do
        world = trim(line)
        if detectText(world,pattern) then
            detectcuy = true
        end
        table.insert(WorldBreak, world)
    end
end


function getIndex(tbl, value)
    for i, v in ipairs(tbl) do
        if v == value then
            return i
        end
    end
    return nil
end

if BreakInOtherWorld and detectcuy then
    MaxBotPerWorld = 0
    local pattern = "%-%-%s*%[%s*" .. getBot().name:upper() .. "%s*%]"

    for i = #WorldBreak, 1, -1 do
        if not detectText(WorldBreak[i], pattern) then
            table.remove(WorldBreak, i)
        else
            local result = string.match(WorldBreak[i], "(%w+)%s*%-+")
            if result then
                WorldBreak[i] = result
            else
                table.remove(WorldBreak, i)
            end
        end
    end
end

if MaxBotPerWorld ~= 0 then
    IndexBreak = 0
    kelipatan = math.ceil(rulah / MaxBotPerWorld)
    for i =1,kelipatan do
        IndexBreak = IndexBreak + 1
    end
end

if #WorldBreak == 0 and BreakInOtherWorld then
    BreakInOtherWorld = false
end

nomorbot = {}
for i= startlist,stoplist do
    table.insert(nomorbot, i)
end

if not SmartSeparateWorld then
    file_path = FarmList
    anjay = read(file_path)
    urutanbot = nomorbot[getBot().index] * MaxWorldPerBot
    count = 0
    
    for line in string.gmatch(anjay, "[^\r\n]+") do
        count = count + 1
        if count > urutanbot - MaxWorldPerBot and count <= urutanbot then
            table.insert(worlds, trim(line))
        end
    end
end

if UseJammer then
    kelipatan = math.ceil(getBot().index / MaxBotPerWorldTakeJammer)
    for i =1,kelipatan do
        IndexJammer = IndexJammer + 1
    end
end

if WorldTakeJammer[IndexJammer] == nil then
    UseJammer = false
end

if TakeLock then
    kelipatan = math.ceil(getBot().index / MaxBotPerWorldTakeLock)
    for i =1,kelipatan do
        IndexLock = IndexLock + 1
    end
end

if WorldTakeLock[IndexLock] == nil then
    TakeLock = false
end

if PnbBlockUntilReachLevel then
    urutanbot2 = getBot().index * MaxWorldTakePerBot
    for i = 1, MaxWorldTakePerBot do
        table.insert(WorldTake, WorldTakeBlock[urutanbot2])
        urutanbot2 = urutanbot2 - 1
    end
end


if WEBHOOK[nomorbot[getBot().index]] and MESSAGEID[nomorbot[getBot().index]] then
    WhStatus = WEBHOOK[nomorbot[getBot().index]]
    MessageID = MESSAGEID[nomorbot[getBot().index]]
else
    WhStatus = ""
    MessageID = ""
end

world = getBot():getWorld()
inventory = getBot():getInventory()

seedid = 0
seedidfloat = 0

function detect2(itemid)
    local count = 0
    for _, tile in ipairs(getTiles()) do
        if tile.fg == itemid then
            count = count + 1
        end
    end
    return count
end

rootaman = {
    8624, 8630, 8636, 8642, 8648, 8654, 8660, 8666, 8672, 8678,
    8684, 8690, 8696, 8702, 8708, 8714, 
}

rootlist = {
    8624, 8626, 8628, 8630, 8632, 8634, 8636, 8638, 8640, 8642, 
    8644, 8646, 8648, 8650, 8652, 8654, 8656, 8658, 8660, 8662, 
    8664, 8666, 8668, 8670, 8672, 8674, 8676, 8678, 8680, 8682, 
    8684, 8686, 8688, 8690, 8692, 8694, 8696, 8698, 8700, 8702, 
    8704, 8706, 8708, 8710, 8712, 8714, 8716, 2 , 8772
}

rootlist2 = {
    8626, 8632, 8638, 8644, 8650, 8656, 8662, 8668, 8674, 8680,
    8686, 8692, 8698, 8704, 8710, 8716, 
}

cutting = {
    8740, 8742, 8744, 8746, 8748, 8750, 8752, 8754, 8756, 8758, 
    8760, 8762, 8764, 8766, 8768, 8770
}

function cekseed2()
    for i, root in pairs(rootlist2) do
        if seedid == root then
            seedid = seedid - 3
        end
    end
end

function cekseed3()
    for i, root in pairs(rootlist) do
        if seedid == root then
            seedid = detectsoil()
        end
    end
end

function cekseed()
    for i, root in pairs(rootaman) do
        if seedid == root then
            seedid = seedid - 1
        end
    end
end

function cekseed4()
    for i, root in pairs(rootlist) do
        if seedid == root then
            seedid = 0
        end
    end
end

function isIgnoredTile(tileValue)
    local ignoredTiles = {2, 4, 10, 8}
    for _, value in ipairs(ignoredTiles) do
        if tileValue == value then
            return true
        end
    end
    return false
end

function detect()
    for y = 53, 1, -1 do
        for x = 98, 2, -1 do
            local tile = getBot():getWorld():getTile(x, y)
            if tile.fg ~= 0 and not isIgnoredTile(tile.fg) and detect2(tile.fg) > 60 then
                return tile.fg
            end
        end
    end

    return 0
end


function detectsoil()
    for y = 0, 99, 2 do  -- Menggunakan langkah 2 untuk y (baris ganjil)
        for x = 1, 53, 2 do  -- Menggunakan langkah 2 untuk x (kolom tetap 1)
            local tile = getBot():getWorld():getTile(x, y)
            if tile.fg ~= 0 and not isIgnoredTile(tile.fg) and detect2(tile.fg) > 60 then
                return tile.fg
            end
        end
    end

    return 0
end

function cekterbang(id)
    local count = 0
    for _, obj in pairs(getBot():getWorld():getObjects()) do
        if obj.id == id then
            count = count + obj.count
        end
    end
    return count
end

idtable = {}

function float1()
    for _, obj in pairs(getBot():getWorld():getObjects()) do 
        if obj.id ~= 112 and cekterbang(obj.id) > 200 then
            table.insert(idtable, obj.id)
        end
    end
end

local idCount = {}
function float2()
    for _, id in pairs(idtable) do
        if idCount[id] then
            idCount[id] = idCount[id] + 1
        else
            idCount[id] = 1
        end
    end
end

function detectfloat()
    local mostFrequentID
    local maxCount = 0
    for id, count in pairs(idCount) do
        if count > maxCount then
            mostFrequentID = id
            maxCount = count
        end
    end
    if mostFrequentID then
        return mostFrequentID
    else
        return 0
    end
end


function cekfloat()
    for i, float in pairs(cutting) do
        if seedid == float then
            seedid = 0
        end
    end
end

blockid = seedid-1
start = 1

function DataWorld()
    strWaktu = ""
    for _, worldawal in pairs(worlds) do
        if string.find(worldawal, ":") then
            world,doorid = string.match(worldawal, "([^|]+):([^|]+)")
        else
            world = worldawal
            doorid = ""
        end
        strWaktu = strWaktu .. "\n**" .. world:upper() .. " [ " .. (Time[world] or "?") .. " | " .. ":palm_tree: : " .. (pohon[world] or "0") .. " | " .. ":gem: : " .. (berlian[world] or "0") .. " ]**"  
    end
    return strWaktu
end

function Fossil()
    local fossil = 0
    for _,tile in ipairs(getBot():getWorld():getTiles()) do
        if tile.fg == 3918 then
            fossil = fossil + 1
        end
    end
    return fossil 
end

item_list = {250,1716,82,78,94,662,754,146,356,72,46,124,1720,92,1122,212,84,1722,1844,2718,70,4966,288,232,788,148,96,3932,448,134,50,74,1504,494,266,852,132,2954,3934,3060,3056,1800,88,2960,1022,2578,3964,86,302,1332,304,1116,6788,10542,492,1690,316,1850,1718,1838,1032,1860,1026,3048,352,724,1590,798,488,1342,794,268,1502,8884,1858,594,3466,1314,1688,1312,3590,446,1856,1854,1516,1316,2700,4968,4964,6796,1862,310,290,296,6674,1864,4954,1476,896,1848,496,136,158,2958,2576,1954,152,1126,796,1524,2928,80,2934,150,1120,1142,1478,154,9356,452,258,2882,156,1140,3530,312,1124,890,1330,3052,294,1650,1652,348,1736,576,5016,1708,292,1146,1028,1762,600,11204}

function metot1()
    for _, item_id in ipairs(item_list) do
        local item_count = getBot():getInventory():getItemCount(item_id)  -- Menggunakan fungsi yang sesuai
        if item_count > 0 then
            getBot():wear(item_id)
            sleep(1000)
        end
    end
end

function rmetot1()
    if not metotone and UseMethod then
        if getBot().gem_count > 500 then
            getBot():sendPacket(2,"action|buy\nitem|rare_clothes")
            sleep(4000)
            metot1()
            metotone = true
        end
    end
end

function tre()
    local readytree = 0
    for i,til in ipairs(getBot():getWorld():getTiles()) do
        if til.fg == seedid and til:canHarvest() then
            readytree = readytree + 1
        end
    end
    return readytree
end


function totaltree()
    local readytree = 0
    for i,til in pairs(getBot():getWorld():getTiles()) do
        if til.fg == seedid then
            readytree = readytree + 1
        end
    end
    return readytree
end


function un()
    unreadytree = 0
    for i, t in pairs(getBot():getWorld():getTiles()) do
        if t.fg == seedid and not t:canHarvest() then
            unreadytree = unreadytree + 1
        end
    end
    return unreadytree
end

function cekemoji()
    if seedid == 4585 then
        return "<:pepper_tree:1081373865650954261>"
    elseif seedid == 5667 then
        return "<:lgrid_seed:1091612884758437959>"
    elseif seedid == 3005 then
        return "<:fish_tank_seed:1012563310308233327>"
    elseif seedid == 8641 then
        return "<:Fence_seed:1121360619887661056>"
    else
        return  "<:pepper_tree:1081373865650954261>"
    end
end

function status()
    if getBot().status == BotStatus.offline then
        return string.upper("Offline")
    elseif getBot().status == BotStatus.online then
        return string.upper("Online")
    elseif getBot().status == BotStatus.wrong_password then
        return string.upper("Wrong Password")
    elseif getBot().status == BotStatus.account_banned then
        return string.upper("Suspended / Banned")
    elseif getBot().status == BotStatus.location_banned then
        return string.upper("Location Banned") 
    elseif getBot().status == BotStatus.version_update then
        return string.upper("Version Update")   
    elseif getBot().status == BotStatus.advanced_account_protection then
        return string.upper("AAP")  
    elseif getBot().status == BotStatus.server_overload then
        return string.upper("Server Overload") 
    elseif getBot().status == BotStatus.too_many_login then
        return string.upper("Too Many Login") 
    elseif getBot().status == BotStatus.maintenance then
        return string.upper("Maintenance")
    elseif getBot().status == BotStatus.server_busy then
        return string.upper("Server Busy")
    elseif getBot().status == BotStatus.guest_limit then
        return string.upper("Guest Limit")
    elseif getBot().status == BotStatus.http_block then
        return string.upper("Ip Blocked")
    elseif getBot().status == BotStatus.bad_name_length then
        return string.upper("Bad Name Length")
    elseif getBot().status == BotStatus.invalid_account then
        return string.upper("Invalid Account")
    elseif getBot().status == BotStatus.error_connecting then
        return string.upper("Error Connecting")  
    elseif getBot().status == BotStatus.logon_fail then
        return string.upper("Login Fail")
    elseif getBot().status == BotStatus.captcha_requested then
        return string.upper("Captcha Requested")
    elseif getBot().status == BotStatus.mod_entered then
        return string.upper("Mod Entered")
    elseif getBot().status == BotStatus.high_load then
        return string.upper("High Load")
    else
        return string.upper("Unknown Status")        
    end
end


totalpack = 0
hasilpack = 0
hasilseed = 0
seeddrop = 0

function cekhasilseed()
    if hasilseed > 0 then
        return "( + "..hasilseed.." ) "
    else
        return  ""
    end
end

function cekhasilpack()
    if hasilpack > 0 then
        return "( + "..hasilpack.." ) "
    else
        return  ""
    end
end


function nungguverify()
    if not checknya then
        return " Waiting To Verify!"
    else
        return " Verified!"
    end
end

function cekemoji2()
    if seedid == 4585 then
        return "<:peppertree:999318156696887378>"
    elseif seedid == 5667 then
        return "<:lgrid:999318066070552716>"
    else
        return  "<:lgrid:999318066070552716>"
    end
end

function ceknya()
    httpClient = HttpClient.new()
    httpClient:setMethod(Method.get)
    httpClient.url = "https://rentry.org/Mihajnxy2/raw"
    httpClient.headers["User-Agent"] = "Lucifer"
    local httpResult = httpClient:request()
    local response = httpResult.body

    local lineCount = 0
    for _ in response:gmatch("[^\r\n]+") do
        lineCount = lineCount + 1
    end

    return lineCount
end

function cekbp()
    if not BpCek then
        if getBot():getInventory().slotcount < 46 then
            if getBot().gem_count >= 800 then
                repeat
                getBot():sendPacket(2,"action|buy\nitem|upgrade_backpack")
                sleep(3000)
                until getBot():getInventory().slotcount == 46
                BpCek = true
            end
            if getBot().gem_count >= 300 and getBot():getInventory().slotcount < 36 then
                repeat
                getBot():sendPacket(2,"action|buy\nitem|upgrade_backpack")
                sleep(3000)
                until getBot():getInventory().slotcount == 36        
            end
            if getBot().gem_count >= 100 and getBot():getInventory().slotcount < 26 then
                repeat
                getBot():sendPacket(2,"action|buy\nitem|upgrade_backpack")
                sleep(3000)
                until getBot():getInventory().slotcount == 26     
            end
        end
    end
end

function cekemojistatus()
    if getBot().status ~= 1 then
        return "<a:offline:1087347156316344420>"
    else
        return "<a:ONLINE1:1055588427619381299>"
    end
end




function botshow(Info)
if WhStatus == "" then
    return
end

te = os.time() - t
local verify = "<a:cham:849841924734976000> **Status Verify: "..nungguverify().."**"
local activity = "**<:Pickaxe:1109395511661830176> Activity: "..Info.."**"
local namebot = "**<:bot:1049606018008612874> Name: "..getBot().name:upper().." ( "..getBot().level.." )**"
local world = "**<:world:1006699847308546109> World:** ||**"..getBot():getWorld().name:upper().."**||"
local statusbot = "**"..cekemojistatus().." Status: "..status().."**"
local ping = "**<:Ping:1136942362103402566> Ping: "..getBot():getPing().." Ms**"
local gems = "**<:gems:1083907540242407547> Gems: "..getBot().gem_count.."**"
local fossilinfo = "**<:fossilrock:1064165167992156240> Fossil: "..Fossil().."**"
local uptime = "**<:pro_timeout:1100160755287982150>  Up Time**\n**"..math.floor(te/86400).." Days "..math.floor(te%86400/3600).." Hours "..math.floor(te%86400%3600/60).." Minutes "..math.floor(te%86400%3600%60).." Seconds**"
local totalberlian = "**<:gems:1083907540242407547> TotalGemsReceived: "..totalgems.."**"

local deskripsi = verify .. "\n\n" .. activity .. "\n" .. namebot .. "\n" .. world .. "\n" .. statusbot .. "\n" .. ping .. "\n" .. gems .. "\n" .. fossilinfo .. "\n\n".. totalberlian .. "\n" ..DataWorld().. "\n\n" ..uptime
local thumbnailUrl = "https://cdn.discordapp.com/icons/1083626271038263357/6837ed8346b01b52ace71700c9c561c2.png?size=4096"
local currentDateTime = os.date("%m/%d/%Y %I:%M %p") 
local ICON_URL = "https://share.creavite.co/9ugoY1REemeb0nVZ.gif"

local httpClient = HttpClient.new()
httpClient:setMethod(Method.patch) 

httpClient.url = WhStatus .."/messages/" .. MessageID
httpClient.headers["User-Agent"] = "Lucifer"
httpClient.headers["Content-Type"] = "application/json"  -- Menetapkan tipe konten JSON

local webhookData = '{"embeds": [{"title": "INFORMATION BOT '..getBot().index..'", "description": "'..deskripsi:gsub("\n", "\\n")..'", "color": 16711680, "thumbnail": {"url": "'..thumbnailUrl..'"}, "footer": {"text": "'..currentDateTime..'\\nJopy Rotasi Nuron ( Total Buyer: '..ceknya()..' )"}}]}'
httpClient.content = webhookData

httpClient:request()
end


function botpack(Info)
if not UseWebhookPackAndSeed or WhPackAndSeed == "" then
return
else
te = os.time() - t
 local packname = "<:shop_sign:1012590603172847648> **Pack Name: "..pack.."**"
local activity = "**<:Pickaxe:1109395511661830176> Activity: "..Info.."**"
local namebot = "**<:bot:1049606018008612874> Name: "..getBot().name:upper().." ( "..getBot().level.." )**"
local world = "**<:world:1006699847308546109> World: **||**"..getBot():getWorld().name:upper().."**||"
local statusbot = "**"..cekemojistatus().." Status: "..status().."**"
local ping = "**<:Ping:1136942362103402566> Ping: "..getBot():getPing().." Ms**"
local gems = "**<:gems:1083907540242407547> Gems: "..getBot().gem_count.."**"
local uptime = "**<:pro_timeout:1100160755287982150>  Up Time**\n**"..math.floor(te/86400).." Days "..math.floor(te%86400/3600).." Hours "..math.floor(te%86400%3600/60).." Minutes "..math.floor(te%86400%3600%60).." Seconds**"
local totalseed = "**"..emoji.." Total Seed: "..seeddrop.."  "..cekhasilseed().." **"
local totalpacknya = "**<:SeedProfit:1156653454899556434> Total Pack: "..totalpack.."  "..cekhasilpack().." **"

local deskripsi =  packname .. "\n" .. activity .. "\n" .. namebot .. "\n" .. world .. "\n" .. statusbot .. "\n" .. ping .. "\n" .. gems .. "\n" .. totalseed .. "\n " .. totalpacknya .. "\n\n" ..uptime
local thumbnailUrl = "https://cdn.discordapp.com/icons/1083626271038263357/6837ed8346b01b52ace71700c9c561c2.png?size=4096"
local currentDateTime = os.date("%m/%d/%Y %I:%M %p") 
local ICON_URL = "https://share.creavite.co/9ugoY1REemeb0nVZ.gif"

local httpClient = HttpClient.new()
httpClient:setMethod(Method.patch)  -- Menggunakan HTTP method POST

httpClient.url = WhPackAndSeed .."/messages/" .. MessageIDPack
httpClient.headers["User-Agent"] = "Lucifer"
httpClient.headers["Content-Type"] = "application/json"  -- Menetapkan tipe konten JSON

local webhookData = '{"embeds": [{"title": "Jopy Rotation Nuron ( Total Buyer: '..ceknya()..' )", "description": "'..deskripsi:gsub("\n", "\\n")..'", "color": 16711680, "thumbnail": {"url": "'..thumbnailUrl..'"}, "timestamp": "'..currentDateTime..'"}]}'
httpClient.content = webhookData

local success, httpResult = pcall(function()
    return httpClient:request()
end)

if not success then
    print("Error sending Webhook Pack:", httpResult)
end
end
end

function isPlantable(x,y)
    local tile = getTile(x,y + 1)
    if not tile.fg then return false end
    local collision = getInfo(tile.fg).collision_type
    if collision == 1 or collision == 2 then
        return true
    else
        return false
    end
end

function soilmodeskiplvlmax()
    if SoilFarmMode then
        getBot().auto_collect = true
        if IgnoreGems then
            getBot().ignore_gems = true
        else
            getBot().ignore_gems = false
        end
        kirana = false
        for y = 0, 53 do  
            if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                if kirana then
                    kirana = false
                elseif not kirana then
                    kirana = true
                end
            end
            if not kirana then
                for x = 0, 99 do
                    tile = getBot():getWorld():getTile(x,y)
                    if tile.fg == seedid and tile:canHarvest() and getBot():getWorld():getTile(x,y+1).fg ~= (seedid + 3) and getBot():getInventory():getItemCount(seedid-1) < 165 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if getBot():getInventory():getItemCount(seedid) == 0 and not SeparatePlant then
                                takenyaseed()
                                if SeparatePlant then
                                    return soilmodeskiplvlmax()
                                end
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                sleep(20)
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                            if not SeparatePlant then
                                while getBot():getWorld():getTile(x,y).fg == 0 and getBot():getWorld():getTile(x,y).flags ~= 0 and isPlantable(x,y) do
                                    reconnect(x,y)
                                    checkstuck(x,y)
                                    getBot():place(x,y,seedid)
                                    sleep(delayplant)
                                    reconnect(x,y)
                                end
                            end
                        end
                    end           
                end
            else
                for x = 99, 0, -1 do
                    tile = getBot():getWorld():getTile(x,y)
                    if tile.fg == seedid and tile:canHarvest() and getBot():getWorld():getTile(x,y+1).fg ~= (seedid + 3) and getBot():getInventory():getItemCount(seedid-1) < 165 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if getBot():getInventory():getItemCount(seedid) == 0 and not SeparatePlant then
                                takenyaseed()
                                if SeparatePlant then
                                    return soilmodeskiplvlmax()
                                end
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                sleep(20)
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                            if not SeparatePlant then
                                while getBot():getWorld():getTile(x,y).fg == 0 and getBot():getWorld():getTile(x,y).flags ~= 0 and isPlantable(x,y) do
                                    reconnect(x,y)
                                    checkstuck(x,y)
                                    getBot():place(x,y,seedid)
                                    sleep(delayplant)
                                    reconnect(x,y)
                                end
                            end
                        end
                    end                 
                end
            end
        end
    end
end

function soilmode()
    if SkipRootLevelMax then
        return soilmodeskiplvlmax()
    end
    if SoilFarmMode then
        getBot().auto_collect = true
        if IgnoreGems then
            getBot().ignore_gems = true
        else
            getBot().ignore_gems = false
        end
        kirana = false
        for y = 0, 53 do  
            if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                if kirana then
                    kirana = false
                elseif not kirana then
                    kirana = true
                end
            end
            if not kirana then
                for x = 0, 99 do
                    tile = getBot():getWorld():getTile(x,y)
                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 165 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if getBot():getInventory():getItemCount(seedid) == 0 and not SeparatePlant then
                                takenyaseed()
                                if SeparatePlant then
                                    return soilmode()
                                end
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                sleep(20)
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                            if not SeparatePlant then
                                while getBot():getWorld():getTile(x,y).fg == 0 and getBot():getWorld():getTile(x,y).flags ~= 0 and isPlantable(x,y) do
                                    reconnect(x,y)
                                    checkstuck(x,y)
                                    getBot():place(x,y,seedid)
                                    sleep(delayplant)
                                    reconnect(x,y)
                                end
                            end
                            while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y+1)
                                sleep(delayharvest)
                                reconnect(x,y)
                                checkstuck(x,y)
                            end
                        end
                    end           
                end
            else
                for x = 99, 0, -1 do
                    tile = getBot():getWorld():getTile(x,y)
                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 165 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if getBot():getInventory():getItemCount(seedid) == 0 and not SeparatePlant then
                                takenyaseed()
                                if SeparatePlant then
                                    return soilmode()
                                end
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                sleep(20)
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                            if not SeparatePlant then
                                while getBot():getWorld():getTile(x,y).fg == 0 and getBot():getWorld():getTile(x,y).flags ~= 0 and isPlantable(x,y) do
                                    reconnect(x,y)
                                    checkstuck(x,y)
                                    getBot():place(x,y,seedid)
                                    sleep(delayplant)
                                    reconnect(x,y)
                                end
                            end
                            while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y+1)
                                sleep(delayharvest)
                                reconnect(x,y)
                                checkstuck(x,y)
                            end
                        end
                    end                 
                end
            end
        end
    end
end

function wrench(x,y)
    getBot():wrench(getBot().x + x,getBot().y + y)
end

function punch(x,y)
    getBot():hit(getBot().x + x,getBot().y + y)
end

function place(id,x,y)
   getBot():place(getBot().x + x,getBot().y + y,id)
end


 function coptrashs()
        for a, trash in ipairs(trashList) do
            trash_count = getBot():getInventory():getItemCount(trash)
            if getBot():getInventory():getItemCount(trash) > MaxItemToTrash then
                getBot():sendPacket(2,"action|trash\n|itemID|"..trash) 
                sleep(1500)
                getBot():sendPacket(2,"action|dialog_return\ndialog_name|trash_item\nitemID|"..trash.."|\ncount|"..trash_count)
                sleep(4000)
            end
        end
    end

sampah_list = {2,3,10,11,4,5,370}

function trashsampah()
        for a, trash in pairs(sampah_list) do
            trash_count = getBot():getInventory():getItemCount(trash)
            if getBot():getInventory():getItemCount(trash) > 0 then
                getBot():sendPacket(2,"action|trash\n|itemID|"..trash) 
                sleep(1500)
                getBot():sendPacket(2,"action|dialog_return\ndialog_name|trash_item\nitemID|"..trash.."|\ncount|"..trash_count)
                sleep(4000)
            end
        end
    end

function trashclothes()
        for a, trash in pairs(item_list) do
            trash_count = getBot():getInventory():getItemCount(trash)
            if getBot():getInventory():getItemCount(trash) > 0 then
                getBot():sendPacket(2,"action|trash\n|itemID|"..trash) 
                sleep(1500)
                getBot():sendPacket(2,"action|dialog_return\ndialog_name|trash_item\nitemID|"..trash.."|\ncount|"..trash_count)
                sleep(4000)
            end
        end
    end



local processedTimes = {} -- Tabel untuk menyimpan waktu yang telah diproses

function botRest(x,y)
    if RestBot then
        for i = 1, #TimeRest do
            local curah = TimeRest[i]
            local  jam, menit = string.match(curah, "([^|]+):([^|]+)")
            local current_hour = tonumber(os.date("%H"))
            local current_minute = tonumber(os.date("%M"))
            local diffMinutes =  current_minute - tonumber(menit)

            if not isTimeProcessed(curah) and diffMinutes <= 10 and diffMinutes >= 0 and current_hour == tonumber(jam) then
                getBot().auto_reconnect = false
                getBot():disconnect()
                botshow("Bot Rest.. For " .. SleepRest .. " Minutes")
                TagBan("**Bot Rest For " .. SleepRest.." Minutes**")
                sleep(SleepRest * 60 * 1000)
                botshow("Bot Done Rest, Starting Back...")
                TagBan("**Bot Done Rest, Starting Back..**")
                getBot().auto_reconnect = true
                while getBot().status ~= 1 do
                    sleep(8000)
                end
                if getBot().status == 1 then
                    table.insert(processedTimes, curah) 
                    botshow("Bot Start")
                    warp(rumah,widreal)
                    backpos(x,y)
                    return
                end
            end
        end
    end
end

function isTimeProcessed(time)
    for i = 1, #processedTimes do
        if processedTimes[i] == time then
            return true -- Mengembalikan true jika waktu sudah diproses sebelumnya
        end
    end
    return false -- Mengembalikan false jika waktu belum diproses sebelumnya
end


function scanToxic()
    local toxic = 0
    for _,til in ipairs(getBot():getWorld():getTiles()) do
        if til.fg == 778 then
            toxic = toxic + 1
        end
    end
    return toxic
end

function antiToxic()
    if scanToxic() == 0 then
        return
    end
    botshow("Clearing Toxic Waste..")
    TagBan("**Toxic Waste Was Found On "..rumah.." Bot Is Clearing The Toxic Waste..**")
    while true do
        for i, tile in pairs(getTiles()) do
            if tile.fg == 778 then
                if getBot():findPath(tile.x -1,tile.y) then
                    sleep(500)
                    getBot():hit(math.floor(getBot().x +1),math.floor(getBot().y))
                    sleep(160)
                    reconnect(tile.x -1, tile.y)
                elseif getBot():findPath(tile.x + 1,tile.y) then
                    sleep(500)
                    getBot():hit(math.floor(getBot().x -1),math.floor(getBot().y))
                    sleep(160)
                    reconnect(tile.x + 1, tile.y)
                elseif getBot():findPath(tile.x,tile.y + 1) then
                    sleep(500)
                    getBot():hit(math.floor(getBot().x ),math.floor(getBot().y - 1))
                    sleep(160)
                    reconnect(tile.x, tile.y + 1)
                elseif getBot():findPath(tile.x,tile.y - 1) then
                    sleep(500)
                    getBot():hit(math.floor(getBot().x ),math.floor(getBot().y + 1))
                    sleep(160)
                    reconnect(tile.x, tile.y - 1)
                end
            end
        end
        if scanToxic() == 0 then
            TagBan("**Toxic Waste Was Gone, Bot Will Start Rotation Again**")
            break
        end
    end
end

function backpos(x,y)
    sleep(7000)
            if getBot():getWorld().name:upper() == rumah:upper() then
                if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
                    repeat
                    getBot():sendPacket(3,"action|join_request\nname|".. rumah .. "|" .. widreal.."\ninvitedWorld|0")
                    sleep(DelayWarp * 1000)
                    if getBot().status ~= 1 then
                        return reconnect(x,y)
                    end
                    until getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6
                end
            end
            if math.floor(getBot().x) ~= x or math.floor(getBot().y) ~= y and getBot().status == 1 and getInfo(getTile(x,y).fg).collision_type == 0 then
                repeat
                    if getBot():getWorld().name:upper() == rumah:upper() and getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
                        while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 do
                            getBot():sendPacket(3,"action|join_request\nname|".. rumah .. "|" .. widreal.."\ninvitedWorld|0")
                            sleep(DelayWarp * 1000)
                            if getBot().status ~= 1 then
                                return reconnect(x,y)
                            end
                        end
                    end
                    if getBot():findPath(x,y) then
                        sleep(500)
                    else
                        return
                    end
                    if getBot().status ~= 1 then
                        return reconnect(x,y)
                    end
                until math.floor(getBot().x) == x or math.floor(getBot().y) == y
            end
            if getBot().status == 1 then
                    return
                end
        end


function banned()
    if not raka then
        botshow("Bot Was "..status().."")
        TagBan("**Bot Was "..status().." Good Luck Next Time :3**")
        raka = true
    end
    WriteSus(getBot().name:upper())
    if AutoRemoveBot then
        removeBot(getBot().name)
    end
end

function checkstuck(x,y)
    if math.floor(getBot().x) ~= x or math.floor(getBot().y) ~= y and getBot().status == 1 then
        sleep(100)
        getBot():disconnect()
        sleep(1000)
        reconnect(x,y)
    end
    if getBot().status ~= 1 then
        reconnect(x,y)
    end
end

function cekdaisy()
    for _, tile in pairs(getBot():getWorld():getTiles()) do
        if tile.fg == 22 then
            return true
        end
    end
    return false
end

function breakdaisy()
    for _, tile in pairs(getBot():getWorld():getTiles()) do
        if tile.fg == 22 then
            getBot():findPath(tile.x,tile.y)
            sleep(300)
            while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 22 do
                punch(0,0)
                sleep(200)
            end
        end
    end
end


function pfirstwl()
    local packet = GameUpdatePacket.new()
    packet.type = 3
    packet.int_data = 9640
    packet.flags = 16
    packet.int_x = getBot().x + 0
    packet.int_y = getBot().y + -1
    packet.pos_x = getBot().x * 32
    packet.pos_y = getBot().y * 32
    getBot():sendRaw(packet)
end

function faceSide()
    local pkt = GameUpdatePacket.new()
    pkt.type = 0
    pkt.flags = 32
    pkt.pos_x = getBot().x * 32
    pkt.pos_y = getBot().y * 32
    getBot():sendRaw(pkt)
end

function generateText()
    local botName = getBot().name:upper()

    if #botName < 2 then
        return "Nama bot terlalu pendek."
    end

    -- Mengambil dua huruf secara acak dari nama bot
    local randomIndex1 = math.random(1, #botName)
    local randomIndex2 = math.random(1, #botName)

    -- Menghindari indeks yang sama
    while randomIndex2 == randomIndex1 do
        randomIndex2 = math.random(1, #botName)
    end

    -- Menggabungkan dua huruf yang diambil dan menambahkan 5 huruf acak lainnya
    local randomText = string.sub(botName, randomIndex1, randomIndex1) ..
                       string.sub(botName, randomIndex2, randomIndex2) ..
                       string.char(math.random(65, 90)) .. -- Huruf acak ke-3
                       string.char(math.random(65, 90)) .. -- Huruf acak ke-4
                       string.char(math.random(65, 90)) .. -- Huruf acak ke-5
                       string.char(math.random(65, 90)) .. -- Huruf acak ke-6
                       string.char(math.random(65, 90))     -- Huruf acak ke-7

    return randomText
end

function cektutor()
local hasilRandomText = generateText()
if getBot():getInventory():getItemCount(9640) > 0 then
    warp(hasilRandomText,"")
    pfirstwl()
end
WorldTutor = ""
if not BreakInWorldTutor and getBot().level > 4 then
    return
end
if getBot():getWorld().name:upper() == "EXIT" then
    warp(rumah,widreal)
end
while WorldTutor == "" do
    cay = 0
    if cay == 1 then
        if WorldTutor == nil then
            break
        end
    else
        cay = cay + 1
    end
    runThread(function()
        getBot():sendPacket(2, "action|wrench\n|netid|"..getLocal().netid)
        sleep(1000)
        getBot():sendPacket(2, "action|dialog_return\ndialog_name|popup\nnetID|"..getLocal().netid.."|\nbuttonClicked|my_worlds")
        sleep(1000)
    end)    
    listenEvents(5)
    sleep(5000)
end


if WorldTutor == nil then
    TagBan("**World Tutor Not Found** ")
    return
end

if getBot().level < 5 then
    warptutor(WorldTutor,"")
    if nukedtutor then
        TagBan("**World Tutor Has Been Nuked, Cant Skip Tutor** ")
        return
    end
    if cekdaisy() then
        breakdaisy()
        skiptutor()
        trashsampah()
    else
        for _, tile in pairs(getTiles()) do
            if tile.fg > 0 and tile.fg ~= 8 and getInfo(tile.fg).level < getBot().level and getBot().level < 5 then
                if getBot():findPath(tile.x,tile.y-1) then
                    sleep(200)
                    while getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg ~= 0 do
                        getBot():hit(math.floor(getBot().x), math.floor(getBot().y + 1))
                        sleep(180)
                        reconnecttutor(tile.x,tile.y)
                    end
                end
            end
        end
        warp(rumah,widreal)
        if not BreakInWorldTutor then
            WorldTutor = ""
        end
        return
    end
end

if not BreakInWorldTutor then
    WorldTutor = ""
end
end

raka = false
function reconnect(x,y)
atas = getBot():getWorld().name

if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
TagBan("**Bot In EXIT, Now Back To Farm In "..rumah.."  **")
sleep(5000)
cektutor()
backpos(x,y)
return
end
if getBot().status == 3 then 
banned()
end
if getBot().status ~= 1 then
TagBan("**Bot Is "..status().." Reconnecting...  **")
getBot().auto_reconnect = true
repeat
if getBot().status == 9 then
    getBot().reconnect_interval = 300
end
sleep(8000)
until getBot().status == 1 or getBot().status == 3 
if getBot().status == 3 then 
banned()
end
if getBot().status == 1 then
TagBan("**Bot Is "..status().." Now Back To Farm..  **")
sleep(5000)
getBot().reconnect_interval = DelayReconnect
raka = false
cektutor()
backpos(x,y)
return
end

while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 6 do
    backpos(x, y)
end
end
end


function reconnectbreak2(x,y)
    if not UseGen and BreakInOtherWorld then
        if MaxBotPerWorld ~= 0 and not RandomWorldBreak then
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld ~= 0 and RandomWorldBreak then
            IndexBreak = IndexBreak + 1
            if IndexBreak > #WorldBreak then
                IndexBreak = 1 
            end
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld == 0 then
            WorldBreakReal = getRandom(WorldBreak)
        else
            WorldBreakReal = ""
        end
    else
        WorldBreakReal = WorldGen
    end
    if WorldBreakReal == nil and BreakInOtherWorld then
        BreakInOtherWorld = false
    end
    atas = getBot():getWorld().name
    
    if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
    TagBan("**Bot In EXIT, Now Back To Breaking Block  **")
    sleep(5000)
    cektutor()
    if HarvestTreeUntilReachLevel and getBot().level < HarvestUntilLevel then
if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
    warptutor(WorldTutor,"")
    if nukedtutor then
        TagBan("**World Tutor Has Been Nuked** ")
        if BreakInOtherWorld then
            if string.find(WorldBreakReal, ":") then
                worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
            else
                worldb = WorldBreakReal
                dooridb = ""
            end
            warpotherworld(worldb,dooridb)            
            if nukedotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                nukedotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            elseif stuckotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                stuckotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false                        
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            end
        else
            if AutoCreateWorldBreak then
                generateWorld()
                if done then
                    done = false
                    return reconnectbreak2(x,y)
                end
            end
            TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
            removeBot(getBot().name)
        end
    end
else
    if BreakInOtherWorld then
        if string.find(WorldBreakReal, ":") then
            worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
        else
            worldb = WorldBreakReal
            dooridb = ""
        end
        warpotherworld(worldb,dooridb)        
        if nukedotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            nukedotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false 
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        elseif stuckotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            stuckotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false                        
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        end
    else
        if AutoCreateWorldBreak then
            generateWorld()
            if done then
                done = false
                return reconnectbreak2(x,y)
            end
        end
        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
        removeBot(getBot().name)
    end
end
    elseif PnbBlockUntilReachLevel and getBot().level < PnbUntilLevel then
if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
    warptutor(WorldTutor,"")
    if nukedtutor then
        TagBan("**World Tutor Has Been Nuked** ")
        if BreakInOtherWorld then
            if string.find(WorldBreakReal, ":") then
                worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
            else
                worldb = WorldBreakReal
                dooridb = ""
            end
            warpotherworld(worldb,dooridb)            
            if nukedotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                nukedotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            elseif stuckotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                stuckotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false                        
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            end
        else
            if AutoCreateWorldBreak then
                generateWorld()
                if done then
                    done = false
                    return reconnectbreak2(x,y)
                end
            end
            TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
            removeBot(getBot().name)
        end
    end
else
    if BreakInOtherWorld then
        if string.find(WorldBreakReal, ":") then
            worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
        else
            worldb = WorldBreakReal
            dooridb = ""
        end
        warpotherworld(worldb,dooridb)        
        if nukedotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            nukedotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        elseif stuckotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            stuckotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false                        
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        end
    else
        if AutoCreateWorldBreak then
            generateWorld()
            if done then
                done = false
                return reconnectbreak2(x,y)
            end
        end
        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
        removeBot(getBot().name)
    end
end
    elseif BreakInWorldTutor then
        warptutor(WorldTutor,"")
        if nukedtutor then
            TagBan("**World Tutor Has Been Nuked** ")
            if BreakInOtherWorld then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)                
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return reconnectbreak2(x,y)
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return reconnectbreak2(x,y)
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return reconnectbreak2(x,y)
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return reconnectbreak2(x,y)
                    end
                end
            else
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            end
        end    
    elseif BreakInOtherWorld then
        if string.find(WorldBreakReal, ":") then
            worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
        else
            worldb = WorldBreakReal
            dooridb = ""
        end
        warpotherworld(worldb,dooridb)            
        if nukedotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            nukedotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        elseif stuckotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            stuckotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false                        
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        end
    else
        if AutoCreateWorldBreak then
            generateWorld()
            if done then
                done = false
                return reconnectbreak2(x,y)
            end
        end
        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
        removeBot(getBot().name)
    end
    backpos(x,y)
    return
    end
    if getBot().status == 3 then 
    banned()
    end
    if getBot().status ~= 1 then
    TagBan("**Bot Is "..status().." Reconnecting...  **")
    getBot().auto_reconnect = true
    repeat
    if getBot().status == 9 then
        getBot().reconnect_interval = 300
    end
    sleep(8000)
    until getBot().status == 1 or getBot().status == 3 
    if getBot().status == 3 then 
    banned()
    end
    if getBot().status == 1 then
    TagBan("**Bot Is "..status().." Now Back To Farm..  **")
    sleep(5000)
    getBot().reconnect_interval = DelayReconnect
    raka = false
    cektutor()
    if HarvestTreeUntilReachLevel and getBot().level < HarvestUntilLevel then
if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
    warptutor(WorldTutor,"")
    if nukedtutor then
        TagBan("**World Tutor Has Been Nuked** ")
        if BreakInOtherWorld then
            if string.find(WorldBreakReal, ":") then
                worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
            else
                worldb = WorldBreakReal
                dooridb = ""
            end
            warpotherworld(worldb,dooridb)            
            if nukedotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                nukedotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            elseif stuckotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                stuckotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false                        
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            end
        else
            if AutoCreateWorldBreak then
                generateWorld()
                if done then
                    done = false
                    return reconnectbreak2(x,y)
                end
            end
            TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
            removeBot(getBot().name)
        end
    end
else
    if BreakInOtherWorld then
        if string.find(WorldBreakReal, ":") then
            worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
        else
            worldb = WorldBreakReal
            dooridb = ""
        end
        warpotherworld(worldb,dooridb)        
        if nukedotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            nukedotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        elseif stuckotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            stuckotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false                        
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        end
    else
        if AutoCreateWorldBreak then
            generateWorld()
            if done then
                done = false
                return reconnectbreak2(x,y)
            end
        end
        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
        removeBot(getBot().name)
    end
end    
    elseif PnbBlockUntilReachLevel and getBot().level < PnbUntilLevel then
if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
    warptutor(WorldTutor,"")
    if nukedtutor then
        TagBan("**World Tutor Has Been Nuked** ")
        if BreakInOtherWorld then
            if string.find(WorldBreakReal, ":") then
                worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
            else
                worldb = WorldBreakReal
                dooridb = ""
            end
            warpotherworld(worldb,dooridb)            
            if nukedotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                nukedotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            elseif stuckotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                stuckotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false                        
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            end
        else
            if AutoCreateWorldBreak then
                generateWorld()
                if done then
                    done = false
                    return reconnectbreak2(x,y)
                end
            end
            TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
            removeBot(getBot().name)
        end
    end
else
    if BreakInOtherWorld then
        if string.find(WorldBreakReal, ":") then
            worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
        else
            worldb = WorldBreakReal
            dooridb = ""
        end
        warpotherworld(worldb,dooridb)        
        if nukedotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            nukedotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        elseif stuckotherworld then
            TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
            removeTextWorldBreak(WorldBreakList, WorldBreakReal)
            stuckotherworld = false
            table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
            if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                BreakInOtherWorld = false                        
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            else
                return reconnectbreak2(x,y)
            end
        end
    else
        if AutoCreateWorldBreak then
            generateWorld()
            if done then
                done = false
                return reconnectbreak2(x,y)
            end
        end
        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
        removeBot(getBot().name)
    end
end
    elseif BreakInWorldTutor then
        warptutor(WorldTutor,"")
        if nukedtutor then
            TagBan("**World Tutor Has Been Nuked** ")
            if BreakInOtherWorld then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)                
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return reconnectbreak2(x,y)
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return reconnectbreak2(x,y)
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return reconnectbreak2(x,y)
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return reconnectbreak2(x,y)
                    end
                end
            else
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return reconnectbreak2(x,y)
                    end
                end
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            end
        end    
    elseif BreakInOtherWorld then
        if string.find(WorldBreakReal, ":") then
            worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
        else
            worldb = WorldBreakReal
            dooridb = ""
        end
        warpotherworld(worldb,dooridb)            
        if nukedotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                nukedotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            elseif stuckotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                stuckotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return reconnectbreak2(x,y)
                        end
                    end
                    BreakInOtherWorld = false                        
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return reconnectbreak2(x,y)
                end
            end
        else
            if AutoCreateWorldBreak then
                generateWorld()
                if done then
                    done = false
                    return reconnectbreak2(x,y)
                end
            end
            TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
            removeBot(getBot().name)
    end
    backpos(x,y)
    return
    end
    
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 6 do
        backpos(x, y)
    end
    
    end
    end

abiscoy = false
IndexTake = 1
detectblank = false

function Take()
    botshow("Taking Seed For Planting Blank Seed")
    Kizuma = WorldSaveSeed[IndexTake]
    warpseed(Kizuma)
    if nukedseed then
        TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was NUKED, Going To Join Other World Save..** ")
        nukedseed = false
        table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
        if #WorldSaveSeed == 0 then
            TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return Take()
    elseif stuckseed  then
        TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
        stuckseed = false
        table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
        if #WorldSaveSeed == 0 then
            TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return Take()
    end
    if not detectblank then
        detectblank = true
        float1()
        float2()
        seedid  = detectfloat() 
        cekfloat()
        seedid = seedid
    end
    if SeedsScanner(seedid) == 0 then
        IndexTake = IndexTake + 1
        if IndexTake > #WorldSaveSeed then
            TagBan("**No More Seeds For Auto Fill On This World "..Kizuma:upper().." [ World Save Seed ] Bot Will Not Plant Blank Tile**")
            abiscoy = true
            detectblank = false
            IndexTake = 1
            return 
        else
            TagBan("**No More Seeds For Auto Fill On This World "..Kizuma:upper().." [ World Save Seed ] Bot Will Check Next World**")
            return Take()
        end
    end
        getBot().auto_collect = true
        getBot().collect_range = 4
        for _, object in pairs(getBot():getWorld():getObjects()) do
            if object.id == seedid then
            getBot():findPath(math.floor(object.x /32), math.floor(object.y /32))
            sleep(2000)
                if getBot():getInventory():getItemCount(seedid) == 200 then
                    getBot().auto_collect = false
                    break
                end
            end
        end
    warp(rumah,widreal)
end

function tambal()
    if DontPlant then
        return
    end
    botshow("Planting Blank Seed...")
    if getBot():getInventory():getItemCount(seedid) == 0 then		
        Take()
        if abiscoy then
            abiscoy = false
            return
        end
    end
    kirana = false
    for y = 0, 53 do  
        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
            if kirana then
                kirana = false
            elseif not kirana then
                kirana = true
            end
        end
        if not kirana then
            for x = 0, 99 do
                if getBot():getInventory():getItemCount(seedid) == 0 then
                    return tambal()
                end
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getInventory():getItemCount(seedid) == 0 then
                            return tambal()
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end            
            end
        else
            for x = 99, 0, -1 do
                if getBot():getInventory():getItemCount(seedid) == 0 then
                    return tambal()
                end
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getInventory():getItemCount(seedid) == 0 then
                            return tambal()
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end               
            end
        end
    end
end

function PlantProfitSeeds()
    botshow("Planting Profit Seed...")
    kirana = false
    for y = 0, 53 do  
        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
            if kirana then
                kirana = false
            elseif not kirana then
                kirana = true
            end
        end
        if not kirana then
            for x = 0, 99 do
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end            
            end
        else
            for x = 99, 0, -1 do
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end               
            end
        end
    end
end

udahplant = false

function LanjutPlant()
    if getBot():getInventory():getItemCount(seedid) == 0 then
        return
    end
    for _, worldawal in pairs(WorldPlant) do
        if string.find(worldawal, ":") then
            worldnya,doorid = string.match(worldawal, "([^|]+):([^|]+)")
        else
            worldnya = worldawal
            doorid = ""
        end
        warpplant(worldnya,doorid)
        if not nuked then
            if scanFire() then
                if CounterFire then
                    clearfire()
                else
                    bakar = true
                end
            end
        end
        if not nuked and not stuck and not bakar then
            PlantProfitSeeds()
            if getBot():getInventory():getItemCount(seedid) == 0 then
                return
            end
            if worldnya:upper() == WorldPlant[#WorldPlant]:upper() and getBot():getInventory():getItemCount(seedid) > 0 then
                udahplant = true
            end
        elseif nuked then
            botshow("World Plant Is Nuked, Going To Next World..")
            TagBan("**"..world:upper().." [ World Plant ] WAS NUKED** ")
            nuked = false
            sleep(5000)
        elseif stuck then
            botshow("World Plant Is Wrong Door ID, Going To Next World..")
            TagBan("**"..world:upper().." [ World Plant ] WAS WRONG DOOR ID** ")
            stuck = false
            sleep(5000)
        elseif bakar then
            botshow("World Plant Has Fire, Going To Next World..")
            TagBan("**"..world:upper().." [ World Plant ] WAS FIRE** ")
            bakar = false
            sleep(5000)
        end
    end
end


function CheckIfExists(file, text)
    local fileHandle, errorMsg = io.open(file, "r")
    
    if not fileHandle then
        return false
    end

    for line in fileHandle:lines() do
        if line == text then
            fileHandle:close()
            return true
        end
    end

    fileHandle:close()
    return false
end

function WriteSus(text)
    if not CheckIfExists("Jopy_Sus_And_Ban.txt",text) then
        local file = io.open("Jopy_Sus_And_Ban.txt","a")
        file:write(text.."\n")
        file:close()
    end
end

function WriteNuked(text)
    if not CheckIfExists("Jopy_Nuked.txt",text) then
    local file = io.open("Jopy_Nuked.txt","a")
    file:write(text.."\n")
    file:close()
    end
end


function WriteFire(text)
    if not CheckIfExists("Jopy_Fire.txt",text) then
    local file = io.open("Jopy_Fire.txt","a")
    file:write(text.."\n")
    file:close()
    end
end

function WriteStuck(text)
    if not CheckIfExists("Jopy_Stuck.txt",text) then
    local file = io.open("Jopy_Stuck.txt","a")
    file:write(text.."\n")
    file:close()
    end
end

function backpostutor(x,y)
    sleep(7000)
    if getBot().status ~= 1 then
        return reconnecttutor(x,y)
    end
    if math.floor(getBot().x) ~= x or math.floor(getBot().y) ~= y and getBot().status == 1 and getInfo(getTile(x,y).fg).collison_type == 0 then
        repeat
            if getBot():findPath(x,y) then
                sleep(500)
            else
                return
            end
            if getBot().status ~= 1 then
                return reconnecttutor(x,y)
            end
        until math.floor(getBot().x) == x or math.floor(getBot().y) == y
    end
    if getBot().status == 1 then
        if x and y then
            if getBot().status == 1 and math.floor(getBot().x) == x and math.floor(getBot().y) == y then
                return
            end
        elseif getBot().status == 1 then
            return
        end
    end
end

function reconnecttutor(x,y)
    if getBot().status ~= 1 then
        TagBan("**Bot Is "..status().." Reconnecting...  **")
        getBot().auto_reconnect = true
        repeat 
            if getBot().status == 9 then
                getBot().reconnect_interval = 300
            end
            sleep(8000)
        until getBot().status == 1
        if getBot().status == 1 then
            getBot().reconnect_interval = DelayReconnect
            backpostutor(x,y)
        end
    end
end

function skiptutor()
    local counter = 0

    getBot().auto_collect = true
    
    function punch(x,y)
        getBot():hit(getBot().x + x,getBot().y + y)
    end
    
    function place(id,x,y)
        getBot():place(getBot().x + x,getBot().y + y,id)
    end


    for _, tile in ipairs(getBot():getWorld():getTiles()) do
        if tile.fg == 2 and getBot():getWorld():getTile(tile.x, tile.y - 1).fg == 0 then
            getBot():findPath(tile.x, tile.y - 1)
            sleep(200)
            
            while getBot():getWorld():getTile(tile.x, tile.y).fg == 2 and counter < 20 do
                punch(0,1)
                sleep(185)
                reconnecttutor(tile.x, tile.y - 1)
            end
            
            counter = counter + 1
            if counter >= 20 then
                break
            end
        end
    end
    
    
    for _, tile in ipairs(getBot():getWorld():getTiles()) do
        if tile.fg == 2 and getBot():getWorld():getTile(tile.x, tile.y - 1).fg == 0 then
            getBot():findPath(tile.x, tile.y - 1)
            sleep(200)
            
            while getBot():getWorld():getTile(tile.x, tile.y).fg == 2 and getBot():getInventory():getItemCount(3) < 10 do
                punch(0,1)
                sleep(185)
                reconnecttutor(tile.x, tile.y - 1)
            end
            
            if getBot():getInventory():getItemCount(3) >= 10 then
                break
            end
        end
    end

    for _, tile in ipairs(getBot():getWorld():getTiles()) do
        if tile.fg == 3 then
            getBot():findPath(tile.x,tile.y)
            sleep(500)
            while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 3 do
            punch(0,0)
            sleep(185)
            reconnecttutor(tile.x,tile.y)
            end
            sleep(1500)
        end
    end

    jurah = false
    getBot():findPath(39,20)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg ~= 2 and getBot():getInventory():getItemCount(2) > 0 do
    reconnecttutor(39,20)
    place(2,0,1)
    sleep(100)
    if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg == 2 then
        jurah = true
    end
    end
    
    if jurah then
    getBot():findPath(39,20)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(39,20)
    place(3,0,0)
    sleep(100)
    end
    end
    getBot():findPath(40,20)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(40,20)
    place(3,0,0)
    sleep(100)
    end
    getBot():findPath(41,19)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(41,19)
    place(3,0,0)
    sleep(100)
    end
    getBot():findPath(42,18)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(42,18)
    place(3,0,0)
    sleep(100)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(43,18)
    place(3,0,0)
    sleep(100)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(44,18)
    place(3,0,0)
    sleep(100)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(45,18)
    place(3,0,0)
    sleep(100)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(46,18)
    place(3,0,0)
    sleep(100)
    end
    getBot():findPath(47,19)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(47,19)
    place(3,0,0)
    sleep(100)
    end
    getBot():findPath(48,20)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
        punch(0,0)
        sleep(185)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 3 and getBot():getInventory():getItemCount(3) > 0 do
    reconnecttutor(48,20)
    place(3,0,0)
    sleep(100)
    end
    reconnecttutor(48,20)
    
    sleep(33 * 1000)
    getBot():findPath(39,20)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(39,20)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(40,20)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(40,20)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(41,19)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(41,19)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(42,18)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(42,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(43,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(44,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(45,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(46,18)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(47,19)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(47,19)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(48,20)
    sleep(100)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(48,20)
    punch(0,0)
    sleep(185)
    end
    reconnecttutor(48,20)

    
    
    
    for _, tile in ipairs(getBot():getWorld():getTiles()) do
        if tile.fg == 11 then
            getBot():findPath(tile.x,tile.y)
            sleep(500)
            while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 11 do
            punch(0,0)
            sleep(185)
            reconnecttutor(tile.x,tile.y)
            end
            sleep(1000)
        end
    end
    
    getBot():findPath(44,18)
    sleep(100)
    reconnecttutor(44,18)
    totalrock = 0
if getBot():getInventory():getItemCount(11) > 0 then
    repeat
    totalrock = totalrock + getBot():getInventory():getItemCount(11)
    getBot().auto_collect = false
    sleep(200)
    getBot():drop(11,getBot():getInventory():getItemCount(11))
    sleep(4000)
    getBot().auto_collect = true
    sleep(2000)
    reconnecttutor(44,18)
    until totalrock >= 10
end
    
    
    
    for _, tile in ipairs(getBot():getWorld():getTiles()) do
        if tile.fg == 5 then
            getBot():findPath(tile.x,tile.y)
            sleep(500)
            while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 5 do
            punch(0,0)
            sleep(185)
            reconnecttutor(tile.x,tile.y)
            end
            sleep(1000)
        end
    end
    
    getBot():findPath(44,18)
    sleep(100)
    reconnecttutor(44,18)
    while getBot():getInventory():getItemCount(4) > 0 and getBot():getInventory():getItemCount(5) < 10 do
        xbot = math.floor(getBot().x)
        ybot = math.floor(getBot().y)
        place(4,0,-1)
        sleep(110)
        while getBot():getWorld():getTile(xbot,ybot-1).fg ~= 0 do
        punch(0,-1)
        sleep(185)
        reconnecttutor(xbot,ybot)
        end
    end
    
    
    while getBot():getInventory():getItemCount(2) > 0 and getBot():getInventory():getItemCount(3) < 10 do
        xbot = math.floor(getBot().x)
        ybot = math.floor(getBot().y)
        place(2,0,-1)
        sleep(110)
        while getBot():getWorld():getTile(xbot,ybot-1).fg ~= 0 do
        punch(0,-1)
        sleep(185)
        reconnecttutor(xbot,ybot)
        end
    end
    
    cektile = getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y))
    if jurah then
    getBot():findPath(39,20)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(39,20)
        place(3,0,0)
        sleep(500)
        place(5,0,0)
        sleep(500)
    end
    end
    getBot():findPath(40,20)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(40,20)
        place(3,0,0)
        sleep(500)
        reconnecttutor(40,20)
        place(5,0,0)
        sleep(500)
    end
    getBot():findPath(41,19)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(41,19)
        place(3,0,0)
        sleep(500)
        reconnecttutor(41,19)
        place(5,0,0)
        sleep(500)
    end
    getBot():findPath(42,18)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(42,18)
        place(3,0,0)
        sleep(500)
        reconnecttutor(42,18)
        place(5,0,0)
        sleep(500)
    end
    getBot():moveRight()
    sleep(300)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(43,18)
        place(3,0,0)
        sleep(500)
        reconnecttutor(43,18)
        place(5,0,0)
        sleep(500)
    end
    getBot():moveRight()
    sleep(300)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(44,18)
        place(3,0,0)
        sleep(500)
        reconnecttutor(44,18)
        place(5,0,0)
        sleep(500)
    end
    getBot():moveRight()
    sleep(300)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(45,18)
        place(3,0,0)
        sleep(500)
        reconnecttutor(45,18)
        place(5,0,0)
        sleep(500)
    end
    getBot():moveRight()
    sleep(300)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(46,18)
        place(3,0,0)
        sleep(500)
        reconnecttutor(46,18)
        place(5,0,0)
        sleep(500)
    end
    getBot():findPath(47,19)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(47,19)
        place(3,0,0)
        sleep(500)
        reconnecttutor(47,19)
        place(5,0,0)
        sleep(500)
    end
    getBot():findPath(48,20)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 and getBot():getInventory():getItemCount(3) > 0 and getBot():getInventory():getItemCount(5) > 0 and not cektile:canHarvest() do
        reconnecttutor(48,20)
        place(3,0,0)
        sleep(500)
        reconnecttutor(48,20)
        place(5,0,0)
        sleep(500)
    end
    reconnecttutor(48,20)
    
    sleep(1 * 60 * 1000)
    sleep(10000)
    getBot():findPath(39,20)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(39,20)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(40,20)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(40,20)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(41,19)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(41,19)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(42,18)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(42,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(43,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(44,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(45,18)
    punch(0,0)
    sleep(185)
    end
    getBot():moveRight()
    sleep(150)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(46,18)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(47,19)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(47,19)
    punch(0,0)
    sleep(185)
    end
    getBot():findPath(48,20)
    sleep(200)
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(48,20)
    punch(0,0)
    sleep(185)
    end
    
    
    getBot():findPath(44,18)
    sleep(50)
    reconnecttutor(44,18)
    
    local jahat = 0
    for _, tile in ipairs(getBot():getWorld():getTiles()) do
    if tile.fg == 0 then
    getBot():findPath(tile.x,tile.y+1)
    sleep(200)
    while getBot():getWorld():getTile(tile.x,tile.y).fg ~= 100 do
    place(100,0,-1)
    sleep(100)
    reconnecttutor(tile.x,tile.y+1)
    end
    jahat = jahat + 1
    if jahat == 20 or getBot():getInventory():getItemCount(100) == 0 then
    break
    end
    end
    end
    
    getBot():findPath(44,18)
    sleep(50)
    reconnecttutor(44,18)
    
    while getBot():getInventory():getItemCount(100) > 0 do
        xbot = math.floor(getBot().x)
        ybot = math.floor(getBot().y)
        place(100,0,-1)
        sleep(100)
        while getBot():getWorld():getTile(xbot,ybot-1).fg ~= 0 do
        punch(0,-1)
        sleep(185)
        reconnecttutor(xbot,ybot)
        end
    end
    
    
    totalwood = 0
if getBot():getInventory():getItemCount(101) > 0 then
    repeat
    totalwood = totalwood + getBot():getInventory():getItemCount(101)
    getBot().auto_collect = false
    sleep(200)
    getBot():drop(101,getBot():getInventory():getItemCount(101))
    sleep(4000)
    getBot().auto_collect = true
    sleep(2000)
    reconnecttutor(44,18)
    until totalwood >= 10
end
    
    
    while getBot():getInventory():getItemCount(2) > 0 and getBot():getInventory():getItemCount(3) < 1 do
        xbot = math.floor(getBot().x)
        ybot = math.floor(getBot().y)
        place(2,0,-1)
        sleep(110)
        while getBot():getWorld():getTile(xbot,ybot-1).fg ~= 0 do
        punch(0,-1)
        sleep(185)
        reconnecttutor(xbot,ybot)
        end
    end
    
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 101 and getBot():getInventory():getItemCount(101) > 0 do
        reconnecttutor(44,18)
        place(101,0,0)
        sleep(200)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 371 and getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 101 and getBot():getInventory():getItemCount(3) > 0 do
        reconnecttutor(44,18)
        place(3,0,0)
        sleep(200)
    end
    if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 371 then
    sleep( 2 * 60 * 1000)
    end
    while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg ~= 0 do
    reconnecttutor(44,18)
    punch(0,0)
    sleep(200)
    end
    getBot():wear(370)
    sleep(2000)
    warp(rumah,widreal)
end    


function takenyaseed()
    getBot().auto_collect = false
    Kizuma = getRandom(WorldSaveSeed)
    warpseed(Kizuma)
    if nukedseed then
        TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was NUKED, Going To Join Other World Save..** ")
        nukedseed = false
        table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
        if #WorldSaveSeed == 0 then
            TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return takenyaseed()
    elseif stuckseed  then
        TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
        stuckseed = false
        table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
        if #WorldSaveSeed == 0 then
            TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return takenyaseed()
    end
    getBot().auto_collect = true
    sleep(3000)
    if cekterbang(seedid) < 120 then
        TagBan("The Seeds In This World "..kizuma:upper().." [ World Save Seed ] Is Under 120, Going To Switch On Separate Plant  **")
        SeparatePlant = true
        return
    end
    for _,obj in pairs(getBot():getWorld():getObjects()) do
        if obj.id == seedid then
            getBot():findPath(math.floor(obj.x  / 32 ),math.floor(obj.y / 32))
            sleep(1000)
            if getBot():getInventory():getItemCount(seedid) >= 120 then
                getBot().auto_collect = false
                break
            end
        end
    end
    getBot().auto_collect = false
    if getBot():getInventory():getItemCount(seedid) > 120 then
        while getBot():getInventory():getItemCount(seedid) > 120 do
            getBot():sendPacket(2,"action|drop\n|itemID|"..seedid)
            sleep(1000)
            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..seedid.."|\ncount|"..(getBot():getInventory():getItemCount(seedid) - 120))
            sleep(1250)
        end
        warp(rumah,widreal)
    else
        warp(rumah,widreal)
    end
end

function totalfloat(id)
    local count = 0
    for _, obj in pairs(getBot():getWorld():getObjects()) do
        if obj.id == id then
            count = obj.count
        end
    end
    return count
end

function collectfloat()
    getBot().collect_range = 4
    getBot().auto_collect = true
    if IgnoreGems then
        getBot().ignore_gems = true
    end
	for _, object in pairs(getBot():getWorld():getObjects()) do
	    if object.id == seedidfloat then
		    getBot():findPath(math.floor(object.x /32),math.floor(object.y /32))
		    sleep(2000)            
            if getBot():getInventory():getItemCount(seedidfloat) == 200 then
                getBot().collect_range = 4
                getBot().auto_collect = true
                break
            end
        end
	end
end


function collectitem(id)
    getBot().collect_range = 4
    getBot().auto_collect = true
    for _, object in pairs(getBot():getWorld():getObjects()) do
        if object.id == id then
            getBot():findPath(math.floor(object.x /32), math.floor(object.y/32))
            sleep(2000)
            if getBot():getInventory():getItemCount(id) == 200 then
                getBot().collect_range = 4
                getBot().auto_collect = true
                break
            end
        end
    end
end

function harvestpnb()
    if UseMethod then
        getBot().ignore_gems = true
    else
        getBot().ignore_gems = false
    end
    getBot().collect_range = 4
    getBot().auto_collect = true
    kirana = false
    for y = 0, 53 do  
        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
            if kirana then
                kirana = false
            elseif not kirana then
                kirana = true
            end
        end
        if not kirana then
            for x = 0, 99 do
                tile = getBot():getWorld():getTile(x,y)
                if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 150 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():hit(x,y)
                            sleep(delayharvest)
                            reconnect(x,y)
                        end
                    end
                end                
            end
        else
            for x = 99, 0, -1 do
                tile = getBot():getWorld():getTile(x,y)
                if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 150 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():hit(x,y)
                            sleep(delayharvest)
                            reconnect(x,y)
                        end
                    end
                end                  
            end
        end
    end
end

function plantpnb()
    kirana = false
    for y = 0, 53 do  
        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
            if kirana then
                kirana = false
            elseif not kirana then
                kirana = true
            end
        end
        if not kirana then
            for x = 0, 99 do
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end        
            end
        else
            for x = 99, 0, -1 do
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end             
            end
        end
    end
end

luput = false
function pnbblock()
    if not UseGen and BreakInOtherWorld then
        if MaxBotPerWorld ~= 0 and not RandomWorldBreak then
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld ~= 0 and RandomWorldBreak then
            IndexBreak = IndexBreak + 1
            if IndexBreak > #WorldBreak then
                IndexBreak = 1 
            end
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld == 0 then
            WorldBreakReal = getRandom(WorldBreak)
        else
            WorldBreakReal = ""
        end
    elseif UseGen and BreakInOtherWorld then
        WorldBreakReal = WorldGen
        if AutoChangeWorldBreak then
            if CekMenit() then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)            
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbblock()
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbblock()
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbblock()
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbblock()
                    end
                end
                changeworld()
                ganti = true
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                generateWorld()
                ganti = false
                if done then
                    done = false
                    return pnbblock()
                end
            end
        end
    end
    if WorldBreakReal == nil and BreakInOtherWorld then
        BreakInOtherWorld = false
    end
    while true do
        takepick()
        botngomong()
        cekbp()
        coptrashs()
        if AutoDetectTileDropPack then
            sampahkedua()
        else
            sampah()
        end
        if totalfloat(seedid-1) == 0 and getBot():getWorld().name:upper() == rumah:upper() then
            break    
        end
        if getBot().level >= PnbUntilLevel then
            break
        end
        if luput then
            plantpnb()
        end
        rotisan()
        warp(rumah,widreal)
        collectitem(seedid-1)
        botRest(math.floor(getBot().x), math.floor(getBot().y))
        if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
            warptutor(WorldTutor,"")
            if nukedtutor then
                TagBan("**World Tutor Has Been Nuked**")
                return pnbblock()
            end
        else
            if BreakInOtherWorld then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)                
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbblock()
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbblock()
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbblock()
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbblock()
                    end
                end
            else
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return pnbblock()
                    end
                end
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            end
        end    
        getBot().collect_range = 3
        getBot().auto_collect = true
        getBot().ignore_gems = false
        if BreakInWorldTutor and not nukedtutor then
            if AutoBan then
                autoban()
            end
            if AutoLeave then
                autoleave()
            end
        elseif BreakInOtherWorld and not UseGen then
            if AutoLeave then
                autoleave()
            end        
        elseif BreakInOtherWorld and UseGen then
            if AutoBan then
                autoban()
            end
            if AutoLeave then
                autoleave()
            end
        end
        baris()
        posX = math.floor(getBot().x + 1)
        posY = math.floor(getBot().y + 1)
        while getBot():getInventory():getItemCount(seedid-1) > 0 and getBot():getInventory():getItemCount(seedid) ~= 200 and getBot().level < PnbUntilLevel do
            reconnectbreak2(PosXBreak,PosYBreak)
            if BreakTiles == 1 then
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 2 then
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY - 2, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 2)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 3 then
                getBot():place(posX - 2, posY - 2, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 4 then
                getBot():place(posX-2,posY-3,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-2,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-1,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY,seedid-1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-3)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 5 then
                getBot():place(posX-2,posY-3,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-2,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-1,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY+1,seedid-1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-3)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY+1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY+1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY+1)
                    sleep(delaypunch)
                end
            end
        end
    end
end

function pnbrotasi()
    if not UseGen and BreakInOtherWorld then
        if MaxBotPerWorld ~= 0 and not RandomWorldBreak then
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld ~= 0 and RandomWorldBreak then
            IndexBreak = IndexBreak + 1
            if IndexBreak > #WorldBreak then
                IndexBreak = 1 
            end
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld == 0 then
            WorldBreakReal = getRandom(WorldBreak)
        else
            WorldBreakReal = ""
        end
    elseif UseGen and BreakInOtherWorld then
        WorldBreakReal = WorldGen
        if AutoChangeWorldBreak then
            if CekMenit() then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)            
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbrotasi()
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbrotasi()
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbrotasi()
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbrotasi()
                    end
                end
                changeworld()
                ganti = true
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                generateWorld()
                ganti = false
                if done then
                    done = false
                    return pnbrotasi()
                end
            end
        end
    end
    if WorldBreakReal == nil and BreakInOtherWorld then
        BreakInOtherWorld = false
    end
    while true do
        takepick()
        botngomong()
        cekbp()
        coptrashs()
        if AutoDetectTileDropPack then
            sampahkedua()
        else
            sampah()
        end
        if foregraund(seedid) == 0 and getBot():getWorld().name:upper() == rumah:upper() then
            break
        end
        if getBot().level >= PnbUntilLevel then
            break
        end
        rotisan()
        botRest(math.floor(getBot().x), math.floor(getBot().y))
        harvestpnb()
        getBot().ignore_gems = false
        if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
            warptutor(WorldTutor,"")
            if nukedtutor then
                TagBan("**World Tutor Has Been Nuked**")
                return pnbrotasi()
            end        
        else
            if BreakInOtherWorld then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)                
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbrotasi()
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbrotasi()
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return pnbrotasi()
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return pnbrotasi()
                    end
                end
            else
                if AutoCreateWorldBreak then
                    generateWorld()
                    if done then
                        done = false
                        return pnbrotasi()
                    end
                end
                TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                removeBot(getBot().name)
            end
        end        
        getBot().collect_range = 3
        getBot().auto_collect = true
        getBot().ignore_gems = false
        if BreakInWorldTutor and not nukedtutor then
            if AutoBan then
                autoban()
            end
            if AutoLeave then
                autoleave()
            end
        elseif BreakInOtherWorld and not UseGen then
            if AutoLeave then
                autoleave()
            end        
        elseif BreakInOtherWorld and UseGen then
            if AutoBan then
                autoban()
            end
            if AutoLeave then
                autoleave()
            end
        end
        baris()
        posX = math.floor(getBot().x + 1)
        posY = math.floor(getBot().y + 1)
        while getBot():getInventory():getItemCount(seedid-1) > 0 and getBot():getInventory():getItemCount(seedid) ~= 200 and getBot().level < PnbUntilLevel do
            reconnectbreak2(PosXBreak,PosYBreak)
            if BreakTiles == 1 then
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 2 then
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY - 2, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 2)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 3 then
                getBot():place(posX - 2, posY - 2, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 4 then
                getBot():place(posX-2,posY-3,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-2,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-1,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY,seedid-1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-3)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 5 then
                getBot():place(posX-2,posY-3,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-2,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-1,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY+1,seedid-1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-3)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY+1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY+1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY+1)
                    sleep(delaypunch)
                end
            end
        end
        warp(rumah,widreal)
        plantpnb()
    end
end

pnbrotasimode = true

function cekpnbmode()
    while true do
        if getBot().level >= PnbUntilLevel then
            break
        end
    for _, world in pairs(WorldTake) do
    rumah = world
    warppnb(world)
    if not nuked then
        if scanFire() then
            bakar = true
        end
    end
    if not nuked and not stuck and not bakar then
    cektutor()
    trashsampah()
    trashclothes()
    rmetot1()
    seedid = detect()
    cekseed()
    cekseed2()
    cekseed3()
    cekseed4()
    if seedid == 0 then
        pnbrotasimode = false
        float1()
        float2()
        seedid  = detectfloat() 
        cekfloat()
        seedid = seedid + 1
    end
    if pnbrotasimode then
        while foregraund(seedid) > 0 do
            pnbrotasi()
    if getBot().level >= PnbUntilLevel then
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end
        seedid = seedid - 1
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end
        break
    end   
    float1()
    float2()
    seedid = detectfloat() 
    cekfloat()
    seedid = seedid + 1
    if seedid ~= 1 then
        pnbrotasimode = false
        luput = true
    end
    end
    elseif not pnbrotasimode then
        while totalfloat(seedid-1) > 0 do
            pnbblock()
    if getBot().level >= PnbUntilLevel then
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end        
        seedid = seedid - 1
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end        
        break
    end  
        end
    end
    if getBot().level >= PnbUntilLevel then
        return
    end
    pnbrotasimode = true
    elseif nuked then
    botshow("World Take Block Is Nuked, Going To Next World..")
    TagBan("**"..world:upper().." [ World Take Block ] WAS NUKED** ")
    nuked = false
    sleep(5000)
    elseif stuck then
    botshow("Cant Join Id Door, Going To Next World Take..")
    TagBan("**"..world:upper().." [ World Take Block ] WAS INVALID DOOR ID** ")
    stuck = false
    sleep(5000)
    elseif bakar then
    botshow("The World Take Block Has Fire, Going To Next World..")
    TagBan("**"..world:upper().." [ World Take Block ] HAS FIRE** ")
    bakar = false
    sleep(5000)
    end
end
        if getBot().level >= PnbUntilLevel then
            break
        end
end
luput = false
end


function harvest2()
    while true do
        if getBot().level >= HarvestUntilLevel then
            break
        end
        for _, worldawal in pairs(worlds) do
            if getBot().level >= HarvestUntilLevel then
                return
            end
            if string.find(worldawal, ":") then
                world,doorid = string.match(worldawal, "([^|]+):([^|]+)")
            else
                world = worldawal
                doorid = ""
            end
            rumah = world
            warpfarm(world,doorid)        
            if not nuked then
                if scanFire() then
                    bakar = true
                end
            end
            if not nuked and not stuck and not bakar then
                cektutor()
                trashsampah()
                trashclothes()
                seedid = detect()
                cekseed()
                cekseed2()
                cekseed3()
                cekseed4()
                if SoilFarmMode then
                    if IgnoreGems then
                        getBot().ignore_gems = true
                    end
                    getBot().collect_range = 4
                    getBot().auto_collect = true
                    kirana = false
                    for y = 0, 53 do  
                        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                            if kirana then
                                kirana = false
                            elseif not kirana then
                                kirana = true
                            end
                        end
                        if not kirana then
                            for x = 0, 99 do
                                tile = getBot():getWorld():getTile(x,y)
                                if tile.fg == seedid and tile:canHarvest() and getBot().level < HarvestUntilLevel then
                                    if getBot().level >= HarvestUntilLevel then
                                        break
                                    end
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                        while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                            reconnect(x,y)
                                            getBot():hit(x,y+1)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                        end
                                    end
                                end       
                            end
                        else
                            for x = 99, 0, -1 do
                                tile = getBot():getWorld():getTile(x,y)
                                if tile.fg == seedid and tile:canHarvest() and getBot().level < HarvestUntilLevel then
                                    if getBot().level >= HarvestUntilLevel then
                                        break
                                    end
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                        while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                            reconnect(x,y)
                                            getBot():hit(x,y+1)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                        end
                                    end
                                end         
                            end
                        end
                    end
                else
                    getBot().collect_range = 4
                    getBot().auto_collect = true
                    kirana = false
                    for y = 0, 53 do  
                        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                            if kirana then
                                kirana = false
                            elseif not kirana then
                                kirana = true
                            end
                        end
                        if not kirana then
                            for x = 0, 99 do
                                tile = getBot():getWorld():getTile(x,y)
                                if tile.fg == seedid and tile:canHarvest() and getBot().level < HarvestUntilLevel then
                                    if getBot().level >= HarvestUntilLevel then
                                        break
                                    end
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                    end
                                end        
                            end
                        else
                            for x = 99, 0, -1 do
                                tile = getBot():getWorld():getTile(x,y)
                                if tile.fg == seedid and tile:canHarvest() and getBot().level < HarvestUntilLevel then
                                    if getBot().level >= HarvestUntilLevel then
                                        break
                                    end
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                    end
                                end        
                            end
                        end
                    end
                end
                if AutoFill then
                    tambal()
                end
            elseif nuked then
                Time[world] = "NUKED"
                botshow("World Is Nuked, Going To Next World..")
                TagBan("**"..world:upper().." [ Farm World ] WAS NUKED** ")
                WriteNuked(world:upper())
                table.remove(worlds, getIndex(worlds, world))
                nuked = false
                sleep(5000)
            elseif stuck then
                Time[world] = "INVALID IDDOOR"
                botshow("Cant Join Id Door, Going To Next World..")
                TagBan("**"..world:upper().." [ Farm World ] WAS INVALID DOOR ID** ")
                WriteStuck(world:upper())
                table.remove(worlds, getIndex(worlds, world))
                stuck = false
                sleep(5000)
            elseif bakar then
                Time[world] = "FIRE"
                botshow("The World Has Fire, Going To Next World..")
                TagBan("**"..world:upper().." [ Farm World ] HAS FIRE** ")
                WriteFire(world:upper())
                table.remove(worlds, getIndex(worlds, world))
                bakar = false
                sleep(5000)
            end
        end
        if getBot().level >= HarvestUntilLevel then
            break
        end
    end
end

function harvestall()
    while true do
        for _, worldawal in pairs(worlds) do
            if string.find(worldawal, ":") then
                world,doorid = string.match(worldawal, "([^|]+):([^|]+)")
            else
                world = worldawal
                doorid = ""
            end
            rumah = world
            warpfarm(world,doorid)        
            if not nuked then
                if scanFire() then
                    bakar = true
                end
            end
            if not nuked and not stuck and not bakar then
                cektutor()
                trashsampah()
                trashclothes()
                seedid = detect()
                cekseed()
                cekseed2()
                cekseed3()
                cekseed4()
                if seedid == 0 then
                    modefloat = true
                    float1()
                    float2()
                    seedidfloat = detectfloat()
                    seedid  = detectfloat() 
                    cekfloat()
                    seedidfloat = seedidfloat 
                    seedid = seedidfloat
                end
                if UseGrinder then
                    cekitemgrinder()
                end
                if modefloat then
                    while true do
                        collectfloat()
                        Grinder()
                        rotisan()
                        warp(world,doorid)
                        if cekterbang(seedidfloat) == 0 then
                            break
                        end
                    end
                else
                    if SoilFarmMode then
                        if IgnoreGems then
                            getBot().ignore_gems = true
                        end
                        getBot().collect_range = 4
                        getBot().auto_collect = true
                        kirana = false
                        for y = 0, 53 do  
                            if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                                if kirana then
                                    kirana = false
                                elseif not kirana then
                                    kirana = true
                                end
                            end
                            if not kirana then
                                for x = 0, 99 do
                                    tile = getBot():getWorld():getTile(x,y)
                                    if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                        Grinder()
                                        warp(world,doorid)
                                        getBot().collect_range = 4
                                        getBot().auto_collect = true
                                    end
                                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                        if getBot():getWorld():hasAccess(x,y) > 0 then
                                            rotisan()
                                            findPath(x,y)
                                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                                reconnect(x,y)
                                                checkstuck(x,y)
                                                getBot():hit(x,y)
                                                sleep(delayharvest)
                                                reconnect(x,y)
                                            end
                                            while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                                reconnect(x,y)
                                                getBot():hit(x,y+1)
                                                sleep(delayharvest)
                                                reconnect(x,y)
                                                checkstuck(x,y)
                                            end
                                        end
                                    end       
                                end
                            else
                                for x = 99, 0, -1 do
                                    tile = getBot():getWorld():getTile(x,y)
                                    if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                        Grinder()
                                        warp(world,doorid)
                                        getBot().collect_range = 4
                                        getBot().auto_collect = true
                                    end
                                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                        if getBot():getWorld():hasAccess(x,y) > 0 then
                                            rotisan()
                                            findPath(x,y)
                                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                                reconnect(x,y)
                                                checkstuck(x,y)
                                                getBot():hit(x,y)
                                                sleep(delayharvest)
                                                reconnect(x,y)
                                            end
                                            while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                                reconnect(x,y)
                                                getBot():hit(x,y+1)
                                                sleep(delayharvest)
                                                reconnect(x,y)
                                                checkstuck(x,y)
                                            end
                                        end
                                    end         
                                end
                            end
                        end
                    else
                        getBot().collect_range = 4
                        getBot().auto_collect = true
                        kirana = false
                        for y = 0, 53 do  
                            if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                                if kirana then
                                    kirana = false
                                elseif not kirana then
                                    kirana = true
                                end
                            end
                            if not kirana then
                                for x = 0, 99 do
                                    tile = getBot():getWorld():getTile(x,y)
                                    if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                        Grinder()
                                        warp(world,doorid)
                                        getBot().collect_range = 4
                                        getBot().auto_collect = true
                                    end
                                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                        if getBot():getWorld():hasAccess(x,y) > 0 then
                                            rotisan()
                                            findPath(x,y)
                                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                                reconnect(x,y)
                                                checkstuck(x,y)
                                                getBot():hit(x,y)
                                                sleep(delayharvest)
                                                reconnect(x,y)
                                            end
                                        end
                                    end        
                                end
                            else
                                for x = 99, 0, -1 do
                                    tile = getBot():getWorld():getTile(x,y)
                                    if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                        Grinder()
                                        warp(world,doorid)
                                        getBot().collect_range = 4
                                        getBot().auto_collect = true
                                    end
                                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                        if getBot():getWorld():hasAccess(x,y) > 0 then
                                            rotisan()
                                            findPath(x,y)
                                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                                reconnect(x,y)
                                                checkstuck(x,y)
                                                getBot():hit(x,y)
                                                sleep(delayharvest)
                                                reconnect(x,y)
                                            end
                                        end
                                    end        
                                end
                            end
                        end
                    end
                end
                if AutoFill then
                    tambal()
                end
                modefloat = false
                cleargrinderitem()
            elseif nuked then
                Time[world] = "NUKED"
                botshow("World Is Nuked, Going To Next World..")
                TagBan("**"..world:upper().." [ Farm World ] WAS NUKED** ")
                WriteNuked(world:upper())
                table.remove(worlds, getIndex(worlds, world))
                nuked = false
                sleep(5000)
            elseif stuck then
                Time[world] = "INVALID IDDOOR"
                botshow("Cant Join Id Door, Going To Next World..")
                TagBan("**"..world:upper().." [ Farm World ] WAS INVALID DOOR ID** ")
                WriteStuck(world:upper())
                table.remove(worlds, getIndex(worlds, world))
                stuck = false
                sleep(5000)
            elseif bakar then
                Time[world] = "FIRE"
                botshow("The World Has Fire, Going To Next World..")
                TagBan("**"..world:upper().." [ Farm World ] HAS FIRE** ")
                WriteFire(world:upper())
                table.remove(worlds, getIndex(worlds, world))
                bakar = false
                sleep(5000)
            end
        end
    end
end

function harvestall2()
    while true do
        updateWorldList(FarmList)
        if string.find(WorldData, ":") then
            world,doorid = string.match(WorldData, "([^|]+):([^|]+)")
        else
            world = WorldData
            doorid = ""
        end
        rumah = world
        warpfarm(world,doorid)        
        if not nuked then
            if scanFire() then
                bakar = true
            end
        end
        if not nuked and not stuck and not bakar then
            cektutor()
            trashsampah()
            trashclothes()
            seedid = detect()
            cekseed()
            cekseed2()
            cekseed3()
            cekseed4()
            if seedid == 0 then
                modefloat = true
                float1()
                float2()
                seedidfloat = detectfloat()
                seedid  = detectfloat() 
                cekfloat()
                seedidfloat = seedidfloat 
                seedid = seedidfloat
            end
            if UseGrinder then
                cekitemgrinder()
            end
            if modefloat then
                while true do
                    collectfloat()
                    Grinder()
                    rotisan()
                    warp(world,doorid)
                    if cekterbang(seedidfloat) == 0 then
                        break
                    end
                end
            else
                if SoilFarmMode then
                    if IgnoreGems then
                        getBot().ignore_gems = true
                    end
                    getBot().collect_range = 4
                    getBot().auto_collect = true
                    kirana = false
                    for y = 0, 53 do  
                        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                            if kirana then
                                kirana = false
                            elseif not kirana then
                                kirana = true
                            end
                        end
                        if not kirana then
                            for x = 0, 99 do
                                tile = getBot():getWorld():getTile(x,y)
                                if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                    Grinder()
                                    warp(world,doorid)
                                    getBot().collect_range = 4
                                    getBot().auto_collect = true
                                end
                                if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                        while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                            reconnect(x,y)
                                            getBot():hit(x,y+1)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                        end
                                    end
                                end       
                            end
                        else
                            for x = 99, 0, -1 do
                                tile = getBot():getWorld():getTile(x,y)
                                if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                    Grinder()
                                    warp(world,doorid)
                                    getBot().collect_range = 4
                                    getBot().auto_collect = true
                                end
                                if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                        while getBot():getWorld():getTile(x,y+1).fg == (seedid + 3) and getBot():getWorld():getTile(x,y+1).flags ~= 0 do
                                            reconnect(x,y)
                                            getBot():hit(x,y+1)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                        end
                                    end
                                end         
                            end
                        end
                    end
                else
                    getBot().collect_range = 4
                    getBot().auto_collect = true
                    kirana = false
                    for y = 0, 53 do  
                        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                            if kirana then
                                kirana = false
                            elseif not kirana then
                                kirana = true
                            end
                        end
                        if not kirana then
                            for x = 0, 99 do
                                tile = getBot():getWorld():getTile(x,y)
                                if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                    Grinder()
                                    warp(world,doorid)
                                    getBot().collect_range = 4
                                    getBot().auto_collect = true
                                end
                                if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                    end
                                end        
                            end
                        else
                            for x = 99, 0, -1 do
                                tile = getBot():getWorld():getTile(x,y)
                                if getBot():getInventory():getItemCount(seedid-1) >= MaxBlockToGrind then
                                    Grinder()
                                    warp(world,doorid)
                                    getBot().collect_range = 4
                                    getBot().auto_collect = true
                                end
                                if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < MaxBlockToGrind then
                                    if getBot():getWorld():hasAccess(x,y) > 0 then
                                        rotisan()
                                        findPath(x,y)
                                        while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                            reconnect(x,y)
                                            checkstuck(x,y)
                                            getBot():hit(x,y)
                                            sleep(delayharvest)
                                            reconnect(x,y)
                                        end
                                    end
                                end        
                            end
                        end
                    end
                end
            end
            if AutoFill then
                tambal()
            end
            modefloat = false
            cleargrinderitem()
        elseif nuked then
            Time[world] = "NUKED"
            botshow("World Is Nuked, Going To Next World..")
            TagBan("**"..world:upper().." [ Farm World ] WAS NUKED** ")
            WriteNuked(world:upper())
            table.remove(worlds, getIndex(worlds, world))
            nuked = false
            sleep(5000)
        elseif stuck then
            Time[world] = "INVALID IDDOOR"
            botshow("Cant Join Id Door, Going To Next World..")
            TagBan("**"..world:upper().." [ Farm World ] WAS INVALID DOOR ID** ")
            WriteStuck(world:upper())
            table.remove(worlds, getIndex(worlds, world))
            stuck = false
            sleep(5000)
        elseif bakar then
            Time[world] = "FIRE"
            botshow("The World Has Fire, Going To Next World..")
            TagBan("**"..world:upper().." [ Farm World ] HAS FIRE** ")
            WriteFire(world:upper())
            table.remove(worlds, getIndex(worlds, world))
            bakar = false
            sleep(5000)
        end
    end
end

function dropgrinder()
    getBot().auto_collect = false
    Kizuma = getRandom(WorldDropItemGrinder)
    warpdropgrinder(Kizuma)
    if nukeddropgrinder then
        TagBan("**"..Kizuma:upper().." [ World Drop Grinder ] Was NUKED, Going To Join Other World Drop Grinder..** ")
        nukeddropgrinder = false
        table.remove(WorldDropItemGrinder, getIndex(WorldDropItemGrinder, Kizuma))
        if #WorldDropItemGrinder == 0 then
            TagBan("**No More World Drop Grinder Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return dropgrinder()
    elseif stuckdropgrinder then
        TagBan("**"..Kizuma:upper().." [ World Drop Grinder ] Was INVALID DOOR ID, Going To Join Other World Drop Grinder..** ")
        stuckdropgrinder = false
        table.remove(WorldDropItemGrinder, getIndex(WorldDropItemGrinder, Kizuma))
        if #WorldDropItemGrinder == 0 then
            TagBan("**No More World Drop Grinder Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return dropgrinder()
    end
    if AutoDetectTileDropItemGrinder then
        savegrinderkedua()
    else
        savegrinder()
    end
    cleargrinderitem()
end


GrinderItem = {}
TotalDibagi = 0

function cleargrinderitem()
    for i=#GrinderItem, 1, -1 do
        table.remove(GrinderItem, i)
    end
end

function cekitemgrinder()
    if seedid-1 == 326 then
        TotalDibagi = 30
        table.insert(GrinderItem, 4586)
    elseif seedid-1 == 4422 or seedid-1 == 2564 or seedid-1 == 2566 or seedid-1 == 5372 then
        TotalDibagi = 20
        table.insert(GrinderItem, 4610)
    elseif seedid-1 == 6956 then
        TotalDibagi = 1
        table.insert(GrinderItem, 6958)
    elseif seedid-1 == 6972 then
        TotalDibagi = 5
        table.insert(GrinderItem, 6974) 
    elseif seedid-1 == 7002 then
        TotalDibagi = 12
        table.insert(GrinderItem, 7004)
    elseif seedid-1 == 7050 then
        TotalDibagi = 20
        table.insert(GrinderItem, 7054)
    elseif seedid-1 == 4668 then
        TotalDibagi = 50
        table.insert(GrinderItem, 4670)
    elseif seedid-1 == 7012 then
        TotalDibagi = 1 
        table.insert(GrinderItem, 7014)
    elseif seedid-1 == 440 then
        TotalDibagi = 100
        table.insert(GrinderItem, 6314)
        table.insert(GrinderItem, 12520)
    elseif seedid-1 == 880 then
        TotalDibagi = 50
        table.insert(GrinderItem, 4562)
    elseif seedid-1 == 5348 or seedid-1 == 5354 or seedid-1 == 5352 or seedid-1 == 5350 then
        TotalDibagi = 100
        table.insert(GrinderItem, 5416)
    elseif seedid-1 == 4578 then
        TotalDibagi = 1
        table.insert(GrinderItem, 4580)
    elseif seedid-1 == 7460 then
        TotalDibagi = 25
        table.insert(GrinderItem, 7462)
    elseif seedid-1 == 192 or seedid-1 == 1004 then
        TotalDibagi = 50
        table.insert(GrinderItem, 4564)
    elseif seedid-1 == 4982 then
        TotalDibagi = 100
        table.insert(GrinderItem, 4984)
    elseif seedid-1 == 4584 then
        TotalDibagi = 100
        table.insert(GrinderItem, 4570)
    elseif seedid-1 == 712 then
        TotalDibagi = 1
        table.insert(GrinderItem, 4570)
    elseif seedid-1 == 960 then
        TotalDibagi = 1
        table.insert(GrinderItem, 4570)
    elseif seedid-1 == 2734 then
        TotalDibagi = 50
        table.insert(GrinderItem, 4764)
    elseif seedid-1 == 6988 then
        TotalDibagi = 10
        table.insert(GrinderItem, 6990)
    elseif seedid-1 == 4566 then
        TotalDibagi = 100
        table.insert(GrinderItem, 4568)
    elseif seedid-1 == 6998 then
        TotalDibagi = 2
        table.insert(GrinderItem, 7000)
    elseif seedid-1 == 3404 then
        TotalDibagi = 20
        table.insert(GrinderItem, 4572)
    elseif seedid-1 == 3406 then
        TotalDibagi = 10
        table.insert(GrinderItem, 4572)
    elseif seedid-1 == 3836 then
        TotalDibagi = 20
        table.insert(GrinderItem, 4572)
    elseif seedid-1 == 954 then
        TotalDibagi = 100
        table.insert(GrinderItem, 4572)
    elseif seedid-1 == 10268 then
        TotalDibagi = 3
        table.insert(GrinderItem, 10272) 
    else
        TagBan("**"..getInfo(seedid-1).name.." Cannot Be Grindered, Removing Bot..**")
        removeBot(getBot().name)
    end
end



function Grinder()
    if math.floor(getBot():getInventory():getItemCount(seedid-1)/TotalDibagi) > 0 then
        Kizuma = getRandom(WorldGrinder)
        warpgrinder(Kizuma)
        if nukedgrinder then
            TagBan("**"..Kizuma:upper().." [ World Grinder ] Was NUKED, Going To Join Other World Grinder..** ")
            nukedgrinder = false
            table.remove(WorldGrinder, getIndex(WorldGrinder, Kizuma))
            if #WorldGrinder == 0 then
                TagBan("**No More World Grinder Can Be Joined, Removing Bot... ** ")
                removeBot(getBot().name)
            end
            return Grinder()
        elseif stuckgrinder then
            TagBan("**"..Kizuma:upper().." [ World Grinder ] Was INVALID DOOR ID, Going To Join Other World Grinder..** ")
            stuckgrinder = false
            table.remove(WorldGrinder, getIndex(WorldGrinder, Kizuma))
            if #WorldGrinder == 0 then
                TagBan("**No More World Grinder Can Be Joined, Removing Bot... ** ")
                removeBot(getBot().name)
            end
            return Grinder()
        end
        cekitemgrinder()
        for _, tile in pairs(getTiles()) do
            if tile.fg == 4582 then
                if getBot():findPath(tile.x,tile.y-1) then
                    sleep(500)
                elseif getBot():findPath(tile.x,tile.y-2) then
                    sleep(500)
                elseif getBot():findPath(tile.x,tile.y+1) then
                    sleep(500)
                elseif getBot():findPath(tile.x,tile.y+2) then
                    sleep(500)
                end
                TotalGrinder = TotalGrinder + math.floor(getBot():getInventory():getItemCount(seedid-1)/TotalDibagi)
                count = math.floor(getBot():getInventory():getItemCount(seedid-1)/TotalDibagi)
                while getBot():getInventory():getItemCount(seedid-1) >= TotalDibagi do
                    getBot():place(tile.x,tile.y,seedid-1)
                    getBot():sendPacket(2,"action|dialog_return\ndialog_name|grinder\ntilex|".. tile.x .."|\ntiley|".. tile.y .."|\ncount|" .. count .. "\nitemID|" .. seedid-1 .."|")
                    sleep(1000) 
                end
                break
            end
        end
        if TotalGrinder >= HowManyGrindBeforeDrop then
            dropgrinder()
            TotalGrinder = 0
        end
    end
end



function harvestcount(total)
    antiToxic()
    coptrashs()
    if SoilFarmMode then
        if IgnoreGems then
            getBot().auto_collect = true
            getBot().collect_range = 4
            getBot().ignore_gems = true
        else
            getBot().auto_collect = true
            getBot().collect_range = 4
            getBot().ignore_gems = false
        end
    else
        if UseMethod then
            getBot().auto_collect = true
            getBot().collect_range = 4
            getBot().ignore_gems = true
        else
            getBot().auto_collect = true
            getBot().collect_range = 4
            getBot().ignore_gems = false
        end
    end
    count = 0
    for _, tile in pairs(getTiles()) do
        if tile.fg == seedid and tile:canHarvest() and count < total then
            if getBot():getWorld():hasAccess(tile.x,tile.y) > 0 then
                findPath(tile.x,tile.y)
                count = count + 1
                while getBot():getWorld():getTile(tile.x,tile.y).fg == seedid and tile:canHarvest() do
                    reconnect(tile.x,tile.y)
                    checkstuck(tile.x,tile.y)
                    getBot():hit(tile.x,tile.y)
                    sleep(delayharvest)
                    reconnect(tile.x,tile.y)
                end
            end
        end
    end
end

function harvest()
    if TotalAkhir > 0 and UseGrinder and ModeGrinder == "FARMING" then
        harvestcount(TotalAkhir)
        plant()
        seedidsave = seedid
        seedid = seedid - 1
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end
        seedid = seedidsave
        TotalAkhir = 0
    end
    antiToxic()
    coptrashs()
    if AutoDetectTileDropPack then
        sampahkedua()
    else
        sampah()
    end
    if SoilFarmMode and not modefloat then
        return soilmode()
    end
    if modefloat then
        return collectfloat()
    end
    if not SeparatePlant and not DontPlant then
        getBot().auto_collect = true
        getBot().collect_range = 4
        if UseMethod and not DontPlant then
            getBot().ignore_gems = true
        else
            getBot().ignore_gems = false
        end
        kirana = false
        for y = 0, 53 do  
            if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                if kirana then
                    kirana = false
                elseif not kirana then
                    kirana = true
                end
            end
            if not kirana then
                for x = 0, 99 do
                    tile = getBot():getWorld():getTile(x,y)
                    if isPlantable(x,y) and tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 150 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if getBot():getInventory():getItemCount(seedid) == 0 then
                                takenyaseed()
                                if SeparatePlant then
                                    return harvest()
                                end
                            end
                            if UseGrinder and ModeGrinder == "FARMING" then
                                SeedAwal = SeedAwal + 1
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                            while getBot():getWorld():getTile(x,y).fg == 0 and getBot():getWorld():getTile(x,y).flags ~= 0 and isPlantable(x,y) do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():place(x,y,seedid)
                                sleep(delayplant)
                                reconnect(x,y)
                            end
                        end
                    end            
                end
            else
                for x = 99, 0, -1 do
                    tile = getBot():getWorld():getTile(x,y)
                    if isPlantable(x,y) and tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 150 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if getBot():getInventory():getItemCount(seedid) == 0 then
                                takenyaseed()
                                if SeparatePlant then
                                    return harvest()
                                end
                            end
                            if UseGrinder and ModeGrinder == "FARMING" then
                                SeedAwal = SeedAwal + 1
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                            while getBot():getWorld():getTile(x,y).fg == 0 and getBot():getWorld():getTile(x,y).flags ~= 0 and isPlantable(x,y) do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():place(x,y,seedid)
                                sleep(delayplant)
                                reconnect(x,y)
                            end
                        end
                    end              
                end
            end
        end
    else
        if UseMethod and not DontPlant then
            getBot().ignore_gems = true
        else
            getBot().ignore_gems = false
        end
        getBot().collect_range = 4
        getBot().auto_collect = true
        kirana = false
        for y = 0, 53 do  
            if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
                if kirana then
                    kirana = false
                elseif not kirana then
                    kirana = true
                end
            end
            if not kirana then
                for x = 0, 99 do
                    tile = getBot():getWorld():getTile(x,y)
                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 150 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if UseGrinder and ModeGrinder == "FARMING" then
                                SeedAwal = SeedAwal + 1
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                        end
                    end                
                end
            else
                for x = 99, 0, -1 do
                    tile = getBot():getWorld():getTile(x,y)
                    if tile.fg == seedid and tile:canHarvest() and getBot():getInventory():getItemCount(seedid-1) < 150 then
                        if getBot():getWorld():hasAccess(x,y) > 0 then
                            findPath(x,y)
                            if UseGrinder and ModeGrinder == "FARMING" then
                                SeedAwal = SeedAwal + 1
                            end
                            while getBot():getWorld():getTile(x,y).fg == seedid and tile:canHarvest() do
                                reconnect(x,y)
                                checkstuck(x,y)
                                getBot():hit(x,y)
                                sleep(delayharvest)
                                reconnect(x,y)
                            end
                        end
                    end                  
                end
            end
        end
    end
end



function plant()
    if not SeparatePlant then
        return
    end
    if DontPlant then
        return
    end
    coptrashs()
    if AutoDetectTileDropPack then
        sampahkedua()
    else
        sampah()
    end
    if IgnoreGems then
        getBot().ignore_gems = true
    else
        getBot().ignore_gems = false
    end
    if not IgnoreGems and UseMethod then
        getBot().ignore_gems = false
        getBot().collect_range = 7
    end
    kirana = false
    for y = 0, 53 do  
        if getBot():getWorld():getTile(50,y).fg == 0 or getBot():getWorld():getTile(50,y).fg == seedid then
            if kirana then
                kirana = false
            elseif not kirana then
                kirana = true
            end
        end
        if not kirana then
            for x = 0, 99 do
                if getBot():getWorld().name:upper() ~= rumah:upper() then
                    warp(rumah,widreal)
                end
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end        
            end
        else
            for x = 99, 0, -1 do
                if getBot():getWorld().name:upper() ~= rumah:upper() then
                    warp(rumah,widreal)
                end
                if isPlantable(x,y) and 0 == getBot():getWorld():getTile(x,y).fg and 0 ~= getBot():getWorld():getTile(x,y + 1).fg and getBot():getWorld():getTile(x,y + 1).fg ~= seedid and getBot():getInventory():getItemCount(seedid) > 0 then
                    if getBot():getWorld():hasAccess(x,y) > 0 then
                        findPath(x,y)
                        if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                        if getBot():getWorld():getTile(math.floor(getBot().x - 1), math.floor(getBot().y)).fg == 0 then
                            reconnect(x,y)
                            checkstuck(x,y)
                            getBot():place(x,y,seedid)
                            sleep(20)
                            sleep(delayplant)
                            reconnect(x,y)
                        end
                    end
                end             
            end
        end
    end
end


local bibirindah = checknya
local acakIndex = math.random(1, #ChatList)
local totalsay = ChatList[acakIndex]

nukedgen = false
nuked = false
stuck = false
nukedjammer = false
stuckjammer = false
nukedwl = false
stuckwl = false
nukeddropgrinder = false
stuckdropgrinder = false
nukedgrinder = false
stuckgrinder = false
nukedpack = false
stuckpack = false
nukedseed = false
stuckseed = false
nukedtutor = false
nukedotherworld = false
stuckotherworld = false
warptry = 0


function warpwl(kota)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nukedwl then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nukedwl do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpwl(kota)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            warptry = 0
            nukedwl = true
            return
        end
    end
end
    
warptry = 0
 while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedwl then
       while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedwl do
          for i = 1,#WorldTakeLockID do
          sleep(1000) 
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..WorldTakeLockID[i].."\ninvitedWorld|0")
          sleep(8000)
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
          end
       end
 if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
 warptry = warptry + 1
 end
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
   warptry = 0
   stuckwl = true
    return
 end
    end
 end
 

 end
 
 if RandomChat and not nukedwl then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end

function warpjammer(kota)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nukedjammer then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nukedjammer do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpjammer(kota)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            warptry = 0
            nukedjammer = true
            return
        end
    end
end
warptry = 0
    
 while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedjammer then
       while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedjammer do
          for i = 1,#WorldTakeJammerID do
          sleep(1000) 
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..WorldTakeJammerID[i].."\ninvitedWorld|0")
          sleep(8000)
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
          end
       end
 if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
 warptry = warptry + 1
 end
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
   warptry = 0
   stuckjammer = true
    return
 end
    end
 end
 

 end
 
 if RandomChat and not nukedjammer then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end

function warpdoang(worldra)
    coynuked = 0
    while getBot():getWorld().name:upper() ~= worldra:upper() do
        getBot():sendPacket(3,"action|join_request\nname|"..worldra:upper().."\ninvitedWorld|0")
        sleep(DelayWarp * 1000)
        if getBot().status ~= 1 then
            getBot().auto_reconnect = true
            while true do
                sleep(8000)
                if getBot().status == 3 then
                    banned()
                end
                if getBot().status == 1 then
                    break
                end
            end
        end
        coynuked = coynuked + 1
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpdoang(worldra)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            coynuked = 0
            warptry = 0
            return warpdoang(worldra)
        end
    end
    warptry = 0
end

function warpgen(worldra)
    sleep(2000)
    coynuked = 0
    while getBot():getWorld().name:upper() ~= worldra:upper() do
        getBot():sendPacket(3,"action|join_request\nname|"..worldra:upper().."\ninvitedWorld|0")
        sleep(DelayWarp * 1000)
        if getBot().status ~= 1 then
            getBot().auto_reconnect = true
            while true do
                sleep(8000)
                if getBot().status == 3 then
                    banned()
                end
                if getBot().status == 1 then
                    break
                end
            end
        end
        coynuked = coynuked + 1
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpgen(worldra)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            coynuked = 0
            warptry = 0
            nukedgen = true
            return 
        end
    end
    warptry = 0
end

function warp(worldca,id)
    sleep(2000)
    coynuked = 0
while getBot():getWorld().name:upper() ~= worldca:upper() and not nuked do
    if getBot().status ~= 1 then
        getBot().auto_reconnect = true
        while true do
            sleep(8000)
            if getBot().status == 3 then
                banned()
            end
            if getBot().status == 1 then
                break
            end
        end
    end
        coynuked = coynuked + 1
        getBot():sendPacket(3,"action|join_request\nname|"..worldca:upper().."\ninvitedWorld|0")
        sleep(DelayWarp * 1000)
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warp(worldca,id)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            coynuked = 0
            warptry = 0
            return warp(worldca,id)
        end
    end
    warptry = 0
    if id == "" then
        return
    end
    if id ~= "" and not nuked then
        while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked do
        while getBot().status ~= 1 do
            getBot().auto_reconnect = true
            sleep(8000)
            if getBot().status == 3 then
                banned()
            end
        end
            getBot():sendPacket(3,"action|join_request\nname|"..worldca:upper().."|"..id:upper().."\ninvitedWorld|0")
            sleep(8000)
        end
    else
        while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked do
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                while true do
                    sleep(8000)
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
   getBot():sendPacket(3,"action|join_request\nname|"..worldca:upper().."|"..id:upper().."\ninvitedWorld|0")
            sleep(5000)
    end
end
if RandomChat and not nuked then
getBot():say(totalsay)
sleep(1000)
end
warptry = 0
end

function warpdropgrinder(kota)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nukeddropgrinder then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nukeddropgrinder do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpdropgrinder(kota,id)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            warptry = 0
            nukeddropgrinder = true
            return
        end
    end
end
warptry = 0

while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukeddropgrinder then
       while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukeddropgrinder do
          for i = 1,#WorldDropItemGrinderID do
          sleep(1000) 
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..WorldDropItemGrinderID[i].."\ninvitedWorld|0")
          sleep(8000)
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
          end
       end
 if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
 warptry = warptry + 1
 end
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
   warptry = 0
   stuckdropgrinder = true
    return
 end
    end
 end
 

 end


 if RandomChat and not nukeddropgrinder then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end

function warpgrinder(kota)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nukedgrinder then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nukedgrinder do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpgrinder(kota,id)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            warptry = 0
            nukedgrinder = true
            return
        end
    end
end
warptry = 0

while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedgrinder then
       while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedgrinder do
          for i = 1,#WorldGrinderID do
          sleep(1000) 
          widgrinder = WorldGrinderID[i]
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..WorldGrinderID[i].."\ninvitedWorld|0")
          sleep(8000)
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
          end
       end
 if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
 warptry = warptry + 1
 end
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
   warptry = 0
   stuckgrinder = true
    return
 end
    end
 end
 

 end


 if RandomChat and not nukedgrinder then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end


function warpotherworld(kota,id)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nukedotherworld then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nukedotherworld do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpotherworld(kota,id)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            warptry = 0
            nukedotherworld = true
            return
        end
    end
end
warptry = 0

if iddoor_valuesbreak and iddoor_valuesbreak ~= "" then
elseif id ~= "" then
else
    return
end

if detectcuy then
    return
end
if UseGen then
    return
end

while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
        break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedotherworld then
        while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedotherworld do
            if id == "" then
                for value in string.gmatch(iddoor_valuesbreak, '([^,%s]+)') do
                    sleep(1000) 
                    getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..value.."\ninvitedWorld|0")
                    sleep(8000)

                    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
                        break
                    end 
                    if getBot().status ~= 1 then
                        getBot().auto_reconnect = true
                        while true do
                            sleep(8000)
                            if getBot().status == 3 then
                                banned()
                            end
                            if getBot().status == 1 then
                                break
                            end
                        end
                    end
                end
            else
                sleep(1000) 
                getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..id.."\ninvitedWorld|0")
                sleep(8000)

                if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
                    break
                end 
                if getBot().status ~= 1 then
                    getBot().auto_reconnect = true
                    while true do
                        sleep(8000)
                        if getBot().status == 3 then
                            banned()
                        end
                        if getBot().status == 1 then
                            break
                        end
                    end
                end
            end
            if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
                warptry = warptry + 1
            end

            if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
                warptry = 0
                stuckotherworld = true
                return
            end
        end
    end
end


 if RandomChat and not nukedotherworld then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end


function warptutor(worldca,id)
    sleep(2000)
    coynuked = 0
while getBot():getWorld().name:upper() ~= worldca:upper() and not nukedtutor do
    if getBot().status ~= 1 then
        getBot().auto_reconnect = true
        while true do
            sleep(8000)
            if getBot().status == 3 then
                banned()
            end
            if getBot().status == 1 then
                break
            end
        end
    end
        coynuked = coynuked + 1
        getBot():sendPacket(3,"action|join_request\nname|"..worldca:upper().."\ninvitedWorld|0")
        sleep(DelayWarp * 1000)
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warptutor(worldca,id)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            coynuked = 0
            warptry = 0
            nukedtutor = true
            return
        end
    end
    warptry = 0
    if id == "" then
        return
    end
    if id ~= "" and not nukedtutor then
        while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedtutor do
        while getBot().status ~= 1 do
            getBot().auto_reconnect = true
            sleep(8000)
            if getBot().status == 3 then
                banned()
            end
        end
            getBot():sendPacket(3,"action|join_request\nname|"..worldca:upper().."|"..id:upper().."\ninvitedWorld|0")
            sleep(5000)
        end
    else
        while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedtutor do
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                while true do
                    sleep(8000)
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
   getBot():sendPacket(3,"action|join_request\nname|"..worldca:upper().."|"..id:upper().."\ninvitedWorld|0")
            sleep(5000)
    end
end
if RandomChat and not nukedtutor then
getBot():say(totalsay)
sleep(1000)
end
warptry = 0
end



function warppack(kota)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nukedpack then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nukedpack do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warppack(kota)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            coynuked = 0
            warptry = 0
            nukedpack = true
            return
        end
    end
end
warptry = 0
    
 while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedpack then
       while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedpack do
          for i = 1,#WorldSavePackID do
          sleep(1000) 
          widpack = WorldSavePackID[i]
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..WorldSavePackID[i].."\ninvitedWorld|0")
          sleep(8000)
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
          end
       end
 if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
 warptry = warptry + 1
 end
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
   warptry = 0
   stuckpack = true
    return
 end
    end
 end
 

 end
 
 if RandomChat and not nukedpack then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end

function warpseed(kota)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nukedseed then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nukedseed do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                if getBot().status == 3 then
                    banned()
                end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warpseed(kota)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            coynuked = 0
            warptry = 0
            nukedseed = true
            return
        end
    end
end
warptry = 0
    
 while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedseed then
       while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nukedseed do
          for i = 1,#WorldSaveSeedID do
          sleep(1000) 
          widseed = WorldSaveSeedID[i]
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..WorldSaveSeedID[i].."\ninvitedWorld|0")
          sleep(8000)
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
          end
       end
 if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
 warptry = warptry + 1
 end
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
   warptry = 0
   stuckseed = true
    return
 end
    end
 end
 end
 
 if RandomChat and not nukedseed then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end

 function warpplant(kota,id)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nuked then
        coynuked = 0
        while getBot():getWorld().name:upper() ~= kota:upper() and not nuked do
            getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
            sleep(DelayWarp * 1000)
            coynuked = coynuked + 1
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                while true do
                    sleep(8000)
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
            if coynuked == AttemptWarp and warptry < 1 then
                coynuked = 0
                warptry = warptry + 1
                return warpplant(kota,id)
            end
            if coynuked == AttemptWarp and warptry == 1 then
                warptry = 0
                nuked = true
                return
            end
        end
    end
    warptry = 0
    
    while true do
        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
            break
        end 
        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked then
            while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked do
                if id == "" then
                    for value in string.gmatch(iddoor_valuesplant, '([^,%s]+)') do
                        sleep(1000)
                        getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..value.."\ninvitedWorld|0")
                        sleep(8000)

                        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
                            widreal = value
                            break
                        end 
                        if getBot().status ~= 1 then
                            getBot().auto_reconnect = true
                            while true do
                                sleep(8000)
                                if getBot().status == 3 then
                                    banned()
                                end
                                if getBot().status == 1 then
                                    break
                                end
                            end
                        end
                    end
                else
                    sleep(1000) 
                    widreal = id
                    getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..id.."\ninvitedWorld|0")
                    sleep(8000)

                    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
                        break
                    end 
                    if getBot().status ~= 1 then
                        getBot().auto_reconnect = true
                        while true do
                            sleep(8000)
                            if getBot().status == 3 then
                                banned()
                            end
                            if getBot().status == 1 then
                                break
                            end
                        end
                    end
                end
                if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
                    warptry = warptry + 1
                end

                if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
                    warptry = 0
                    stuck = true
                    return
                end
            end
        end
    end


    if RandomChat and not nuked then
        getBot():say(totalsay)
        sleep(1000)
    end
    warptry = 0
end

function warpfarm(kota,id)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nuked then
        coynuked = 0
        while getBot():getWorld().name:upper() ~= kota:upper() and not nuked do
            getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
            sleep(DelayWarp * 1000)
            coynuked = coynuked + 1
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                while true do
                    sleep(8000)
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
            if coynuked == AttemptWarp and warptry < 1 then
                coynuked = 0
                warptry = warptry + 1
                return warpfarm(kota,id)
            end
            if coynuked == AttemptWarp and warptry == 1 then
                warptry = 0
                nuked = true
                return
            end
        end
    end
    warptry = 0
    
    while true do
        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
            break
        end 
        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked then
            while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked do
                if id == "" then
                    for value in string.gmatch(iddoor_values, '([^,%s]+)') do
                        sleep(1000)
                        getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..value.."\ninvitedWorld|0")
                        sleep(8000)

                        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
                            widreal = value
                            break
                        end 
                        if getBot().status ~= 1 then
                            getBot().auto_reconnect = true
                            while true do
                                sleep(8000)
                                if getBot().status == 3 then
                                    banned()
                                end
                                if getBot().status == 1 then
                                    break
                                end
                            end
                        end
                    end
                else
                    sleep(1000) 
                    widreal = id
                    getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..id.."\ninvitedWorld|0")
                    sleep(8000)

                    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
                        break
                    end 
                    if getBot().status ~= 1 then
                        getBot().auto_reconnect = true
                        while true do
                            sleep(8000)
                            if getBot().status == 3 then
                                banned()
                            end
                            if getBot().status == 1 then
                                break
                            end
                        end
                    end
                end
                if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
                    warptry = warptry + 1
                end

                if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
                    warptry = 0
                    stuck = true
                    return
                end
            end
        end
    end


    if RandomChat and not nuked then
        getBot():say(totalsay)
        sleep(1000)
    end
    warptry = 0
end


function warppnb(kota)
    sleep(2000)
    if getBot():getWorld().name:upper() ~= kota:upper() and not nuked then
       coynuked = 0
       while getBot():getWorld().name:upper() ~= kota:upper() and not nuked do
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."\ninvitedWorld|0")
          sleep(DelayWarp * 1000)
          coynuked = coynuked + 1
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                   break
                end
             end
        end
        if coynuked == AttemptWarp and warptry < 1 then
            coynuked = 0
            warptry = warptry + 1
            return warppnb(kota)
        end
        if coynuked == AttemptWarp and warptry == 1 then
            warptry = 0
            nuked = true
            return
        end
    end
end
warptry = 0
    
 while true do
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked then
       while getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and not nuked do
          for i = 1,#WorldTakeBlockID do
          sleep(1000) 
          widreal = WorldTakeBlockID[i]
          getBot():sendPacket(3,"action|join_request\nname|"..kota:upper().."|"..WorldTakeBlockID[i].."\ninvitedWorld|0")
          sleep(8000)
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6 then
          break
    end 
          if getBot().status ~= 1 then
             getBot().auto_reconnect = true
             while true do
                sleep(8000)
                 if getBot().status == 3 then
                 banned()
                 end
                if getBot().status == 1 then
                    break
                end
             end
          end
       end
 if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry < AttemptWarp then
 warptry = warptry + 1
 end
 
    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 and warptry == AttemptWarp then
   warptry = 0
   stuck = true
    return
 end
    end
 end
 

 end
 
 if RandomChat and not nuked then
 getBot():say(totalsay)
 sleep(1000)
 end
 warptry = 0
 end

function restoretime()
    for i = 1,#TimeRest do
        table.insert(Time, #TimeRest)
    end
end

function takelock(id)
    if getBot():getInventory():getItemCount(id) == 0 and TakeLock then
        botshow("Bot Taking World Lock")
        warpwl(WorldTakeLock[IndexLock])
        if nukedwl then
            nukedwl = false
            TagBan("**World Take WL "..WorldTakeLock[IndexLock].." Was NUKED, Bot Cant Make Break World, Removing Bot...**")
            removeBot(getBot().name)
        elseif stuckwl then
            stuckwl = false
            TagBan("**World Take WL "..WorldTakeLock[IndexLock].." Was INVALID DOOR ID, Bot Cant Make Break World, Removing Bot...**")
            removeBot(getBot().name)
        end
        sleep(100)
        while getBot():getInventory():getItemCount(id) == 0 do
            sleep(4000)
            for _,obj in pairs(getBot():getWorld():getObjects()) do
                if obj.id == id then
                    getBot():findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(1000)
                    getBot().auto_collect = true
                    sleep(5000)
                end
                if getBot():getInventory():getItemCount(id) > 0 then
                    getBot().auto_collect = false
                    break
                end
            end
        end
        takejammer()
        getBot().auto_collect = false
        getBot():moveLeft()
        sleep(2000)
        faceSide()
        sleep(3000)
        while getBot():getInventory():getItemCount(id) > 1 do
        count = getBot():getInventory():getItemCount(id)
        getBot():sendPacket(2,"action|drop\n|itemID|"..id)
        sleep(1000)
        getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..id.."|\ncount|"..(count - 1))
        sleep(1250)        
        end
        while getBot():getInventory():getItemCount(226) > 1 do
        count = getBot():getInventory():getItemCount(226)
        getBot():sendPacket(2,"action|drop\n|itemID|226")
        sleep(1000)
        getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|226|\ncount|"..(count - 1))
        sleep(1250)
        end
        sleep(500)
    end
end

function takejammer()
    if getBot():getInventory():getItemCount(226) == 0 and TakeJammer then
        botshow("Bot Taking Jammer")
        warpjammer(WorldTakeJammer[IndexJammer])
        if nukedjammer then
            nukedjammer = false
            TagBan("**World Take Jammer "..WorldTakeJammer[IndexJammer].." Was NUKED, Bot Cant Make World Break, Removing Bot...**")
            removeBot(getBot().name)
        elseif stuckjammer then
            stuckjammer = false
            TagBan("**World Take Jammer "..WorldTakeJammer[IndexJammer].." Was INVALID DOOR ID, Bot Cant Make World Break, Removing Bot...**")
            removeBot(getBot().name)
        end
        sleep(100)
        while getBot():getInventory():getItemCount(226) == 0 do
            sleep(4000)
            for _,obj in pairs(getBot():getWorld():getObjects()) do
                if obj.id == 226 then
                    getBot():findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(1000)
                    getBot().auto_collect = true
                    sleep(5000)
                end
                if getBot():getInventory():getItemCount(226) > 0 then
                    getBot().auto_collect = false
                    break
                end
            end
        end
    end
end

function checkjammeron(x,y)
    if getTile(math.floor(getBot().x) + x,math.floor(getBot().y) + y).fg == 226 then
        while getTile(math.floor(getBot().x) + x,math.floor(getBot().y) + y).flags == 2 do
            punch(x,y)
            sleep(2000)
        end
    end
end

function wl124()
    getBot():sendPacket(2,"action|dialog_return\ndialog_name|lock_edit\ntilex|" ..(math.floor(getBot().x)) .."|\ntiley|" ..(math.floor(getBot().y) - 1) .."|\ncheckbox_public|0\ncheckbox_disable_music|0\ntempo|100\ncheckbox_disable_music_render|0\ncheckbox_set_as_home_world|0\nminimum_entry_level|124")
    sleep(3000)
end

function IgnoreEmpty(x,y)
    getBot():sendPacket(2,"action|dialog_return\ndialog_name|lock_edit\ntilex|"..(math.floor(getBot().x)+x).."|\ntiley|"..(math.floor(getBot().y)+y).."|\nbuttonClicked|recalcLock\n\ncheckbox_public|0\ncheckbox_ignore|1")
    sleep(500)
end

function createworld()
    if Lock == "WL" then
        while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y -1)).fg ~= 242 do
            place(242,0,-1)
            sleep(300)
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                TagBan("**Bot Is "..status().." Reconnecting..")
                while true do
                    sleep(8000) 
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
        end
        wrench(0,-1)
        sleep(3000)
        wl124()
        while getTile(math.floor(getBot().x+1), math.floor(getBot().y - 1)).fg ~= 226 and UseJammer and getBot():getInventory():getItemCount(226) > 0 do
            place(226,1,-1)
            sleep(300)
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                TagBan("**Bot Is "..status().." Reconnecting..")
                while true do
                    sleep(8000) 
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
        end
        checkjammeron(1,-1)
    elseif Lock == "SL" then
        while getBot():getWorld():getTile(math.floor(getBot().x+1), math.floor(getBot().y -1)).fg ~= 226 and UseJammer and getBot():getInventory():getItemCount(226) > 0 do
            place(226,1,-1)
            sleep(300)
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                TagBan("**Bot Is "..status().." Reconnecting..")
                while true do
                    sleep(8000) 
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
        end
        checkjammeron(1,-1)
        while getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y -1)).fg ~= 202 do
            place(202,0,-1)
            sleep(300)
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                TagBan("**Bot Is "..status().." Reconnecting..")
                while true do
                    sleep(8000) 
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
        end
        while getBot():getWorld():getTile(math.floor(getBot().x -1), math.floor(getBot().y -2)).fg ~= seedid-1 and not saveegg do
            place(seedid-1,-1,-2)
            sleep(300)
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                TagBan("**Bot Is "..status().." Reconnecting..")
                while true do
                    sleep(8000) 
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
        end
        while getBot():getWorld():getTile(math.floor(getBot().x -1), math.floor(getBot().y -1)).fg ~= seedid-1 and not saveegg do
            place(seedid-1,-1,-1)
            sleep(300)
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                TagBan("**Bot Is "..status().." Reconnecting..")
                while true do
                    sleep(8000) 
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
        end
        while getBot():getWorld():getTile(math.floor(getBot().x -1), math.floor(getBot().y)).fg ~= seedid-1 and not saveegg do
            place(seedid-1,-1,0)
            sleep(300)
            if getBot().status ~= 1 then
                getBot().auto_reconnect = true
                TagBan("**Bot Is "..status().." Reconnecting..")
                while true do
                    sleep(8000) 
                    if getBot().status == 3 then
                        banned()
                    end
                    if getBot().status == 1 then
                        break
                    end
                end
            end
        end
        wrench(1,-1)
        sleep(3000)
        IgnoreEmpty(1,-1)
        sleep(2000)
    end
end

function changeworld()
    if Lock == "SL" then
        for _, tile in pairs(getTiles()) do
            if tile.fg == 202 then
                getBot():findPath(tile.x,tile.y-1)
                sleep(200)
                while getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg == 202 do
                    punch(0,1)
                    sleep(180)
                    if getBot().status ~= 1 then
                        getBot().auto_reconnect = true
                        TagBan("**Bot Is "..status().." Reconnecting..")
                        while true do
                            sleep(8000) 
                            if getBot().status == 3 then
                                banned()
                            end
                            if getBot().status == 1 then 
                                getBot():findPath(tile.x,tile.y-1)
                                sleep(200)
                                break
                            end
                        end
                    end
                end
            end
        end
        for _, tile in pairs(getTiles()) do
            if tile.fg == 226 then
                getBot():findPath(tile.x,tile.y-1)
                sleep(200)
                while getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg == 226 do
                    punch(0,1)
                    sleep(180)
                    if getBot().status ~= 1 then
                        getBot().auto_reconnect = true
                        TagBan("**Bot Is "..status().." Reconnecting..")
                        while true do
                            sleep(8000) 
                            if getBot().status == 3 then
                                banned()
                            end
                            if getBot().status == 1 then 
                                getBot():findPath(tile.x,tile.y-1)
                                sleep(200)
                                break
                            end
                        end
                    end
                end
            end
        end
    elseif Lock == "WL" then
        for _, tile in pairs(getTiles()) do
            if tile.fg == 242 then
                getBot():findPath(tile.x,tile.y-1)
                sleep(200)
                while getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg == 242 do
                    punch(0,1)
                    sleep(180)
                    if getBot().status ~= 1 then
                        getBot().auto_reconnect = true
                        TagBan("**Bot Is "..status().." Reconnecting..")
                        while true do
                            sleep(8000) 
                            if getBot().status == 3 then
                                banned()
                            end
                            if getBot().status == 1 then 
                                getBot():findPath(tile.x,tile.y-1)
                                sleep(200)
                                break
                            end
                        end
                    end
                end
            end
        end
        for _, tile in pairs(getTiles()) do
            if tile.fg == 226 then
                getBot():findPath(tile.x,tile.y-1)
                sleep(200)
                while getTile(math.floor(getBot().x), math.floor(getBot().y + 1)).fg == 226 do
                    punch(0,1)
                    sleep(180)
                    if getBot().status ~= 1 then
                        getBot().auto_reconnect = true
                        TagBan("**Bot Is "..status().." Reconnecting..")
                        while true do
                            sleep(8000) 
                            if getBot().status == 3 then
                                banned()
                            end
                            if getBot().status == 1 then 
                                getBot():findPath(tile.x,tile.y-1)
                                sleep(200)
                                break
                            end
                        end
                    end
                end
            end
        end
    end
end




function generateHuruf(length, includeNumber)
    local text = ""
    local letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local remainingLength = length
    local botIndex = getBot().index 

    for i = 1, length do
        local charType = includeNumber and math.random(1, 2) or 1
        
        if remainingLength > 0 then
            if charType ~= 1 and i % 2 == 0 then
                local randomNumber = math.random(0, 9)
                text = text .. tostring(randomNumber)
                remainingLength = remainingLength - 1
            else
                local randomValue = math.random()
                local randomIndex = math.floor(randomValue * #letters) + 1
                local adjustedIndex = (randomIndex + botIndex - 1) % #letters + 1
                local randomChar = letters:sub(adjustedIndex, adjustedIndex)
                text = text .. randomChar
                remainingLength = remainingLength - 1
            end
        else
            break
        end
    end

    
    return text
end

lastSavedMinute = 0

ganti = false
done = false
UseGen = false
function generateWorld()
    UseGen = true
    math.randomseed(os.time()) 
    local length = math.random(7,14)
    local includeNumber = math.random(1, 2) == 1 
    local generatedTexts = generateHuruf(length, includeNumber)
    if not ganti then
        if Lock == "WL" and AutoBuyLockFromStore then
            warp(rumah,"")
            if getBot().gem_count >= 2000 then
                while getBot():getInventory():getItemCount(242) == 0 do
                    getBot():sendPacket(2,"action|buy\nitem|world_lock")
                    sleep(4000)
                end
            else
                TagBan("**Gems Didnt Enought For Buy WL To Make World Break**")
            end
            if UseJammer and AutoBuyJammerFromStore then
                warp(rumah,"")
                if getBot().gem_count >= 2000 then
                    while getBot():getInventory():getItemCount(226) == 0 do
                        getBot():sendPacket(2,"action|buy\nitem|signal_jammer")
                        sleep(4000)
                    end
                else
                    TagBan("**Gems Didnt Enought For Buy Jammer To Make World Break**")
                end
            end
        end
        if Lock == "SL" and AutoBuyLockFromStore then
            warp(rumah,"")
            if getBot().gem_count >= 2000 then
                while getBot():getInventory():getItemCount(202) == 0 do
                    getBot():sendPacket(2,"action|buy\nitem|small_lock")
                    sleep(4000)
                end
            else
                TagBan("**Gems Didnt Enought For Buy SL To Make World Break**")
            end
            if UseJammer and AutoBuyJammerFromStore then
                warp(rumah,"")
                if getBot().gem_count >= 2000 then
                    while getBot():getInventory():getItemCount(226) == 0 do
                        getBot():sendPacket(2,"action|buy\nitem|signal_jammer")
                        sleep(4000)
                    end
                else
                    TagBan("**Gems Didnt Enought For Buy Jammer To Make World Break**")
                end
            end
        end
        if Lock == "WL" and TakeLock then
            takelock(242)
        elseif Lock == "SL" and TakeLock then
            takelock(202)
        end
        if getBot():getInventory():getItemCount(202) == 0 and getBot():getInventory():getItemCount(242) == 0 then
            TagBan("**Bot Didnt Have Any Lock To Make World Break, Removing Bot...**")
            removeBot(getBot().name)
        end
        if getBot():getInventory():getItemCount(226) == 0 and Lock == "SL" then
            TagBan("**Bot Didnt Have Jammer To Make World Break With SL, Removing Bot...**")
            removeBot(getBot().name)
        end
    end
    while true do
        warpgen(generatedTexts)
        if nukedgen then
            nukedgen = false
        else
            shouldBreakWorld = true
            for _, t in ipairs(getBot():getWorld():getTiles()) do
                if t.fg == 242 or t.fg == 9640 or t.fg == 202 or t.fg == 204 or t.fg == 206 or t.fg == 1796 or t.fg == 4994 or t.fg == 7188 or t.fg == 2408 or t.fg == 2950 or t.fg == 4428 or t.fg == 4802 or t.fg == 5814 or t.fg == 5260 or t.fg == 5980 or t.fg == 8470 or t.fg == 10410 or t.fg == 11550 or t.fg == 11586 then
                    shouldBreakWorld = false
                end
            end
            if shouldBreakWorld then
                if not ganti then
                    TagBan("**World Break Was Found "..generatedTexts:upper().." Bot Will Break On This World**")
                else
                    TagBan("**World Break Was Changed To "..generatedTexts:upper().." Bot Will Break On This World**")
                end
                createworld()
                done = true
                WorldGen = generatedTexts
                currentMinute = math.floor(os.time() / 60)
                lastSavedMinute = currentMinute
                BreakInOtherWorld = true
                if fileExists(WorldBreakList) then
                    content = read(WorldBreakList)
                    newText = content .. "\n"..generatedTexts.." [ " .. getBot().name:upper() .. " ]\n"
                    write(WorldBreakList,newText)
                end
                break
            end
        end
    end
end

function takehose()
    if CounterFire then
    if getBot():getInventory():getItemCount(3066) == 0 then
    botshow("Bot Taking Fire Hose")
        warp(WorldTakeHose,WorldTakeHoseID)
        sleep(100)
        while getBot():getInventory():getItemCount(3066) == 0 do
            sleep(4000)
            for _,obj in pairs(getBot():getWorld():getObjects()) do
                if obj.id == 3066 then
                    getBot():findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                    sleep(1000)
                   getBot().auto_collect = true
                   sleep(5000)
                end
                if getBot():getInventory():getItemCount(3066) > 0 then
                  getBot().auto_collect = false
                    break
                end
            end
        end
        getBot().auto_collect = false
        getBot():moveLeft()
        sleep(800)
        faceSide()
        sleep(500)
        while getBot():getInventory():getItemCount(3066) > 1 do
        count = getBot():getInventory():getItemCount(3066)
        getBot():sendPacket(2,"action|drop\n|itemID|3066")
        sleep(1000)
        getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|3066|\ncount|"..(count - 1))
        sleep(1250) 
        end
        getBot():wear(3066)
        sleep(500)
        warp(rumah,widreal)
    end
end
end

function cekfire()
    count = 0
    for i, tile in pairs(getTiles()) do
        if tile:hasFlag(4096) then
            count = count + 1
        end
    end
    return count
end

function clearfire()
    botshow("Clearing Fire..")
    TagBan("Fire Was Found On "..rumah.." Bot Is Clearing The Fire..")
    if getBot():getInventory():getItemCount(3066) == 0 then
        takehose()
    end
    while true do
        for i, tile in pairs(getTiles()) do
            if tile:hasFlag(4096) then
                if getBot():findPath(tile.x -1,tile.y) then
                    getBot():hit(math.floor(getBot().x +1),math.floor(getBot().y))
                    sleep(160)
                    reconnect(tile.x -1, tile.y)
                elseif getBot():findPath(tile.x + 1,tile.y) then
                    getBot():hit(math.floor(getBot().x -1),math.floor(getBot().y))
                    sleep(160)
                    reconnect(tile.x + 1, tile.y)
                elseif getBot():findPath(tile.x,tile.y + 1) then
                    getBot():hit(math.floor(getBot().x ),math.floor(getBot().y - 1))
                    sleep(160)
                    reconnect(tile.x, tile.y + 1)
                elseif getBot():findPath(tile.x,tile.y - 1) then
                    getBot():hit(math.floor(getBot().x ),math.floor(getBot().y + 1))
                    sleep(160)
                    reconnect(tile.x, tile.y - 1)
                end
            end
        end
        if cekfire() == 0 then
            TagBan("Fire Was Gone, Bot Will Dropping FireHose To Storage..")
            warp(WorldTakeHose,WorldTakeHoseID)
            getBot():sendPacket(2,"action|drop\n|itemID|3066")
            sleep(1000)
            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|3066|\ncount|"..getBot():getInventory():getItemCount(3066))
            sleep(1250) 
            warp(rumah,widreal)
            break
        end
    end
end



function takepick()
if TakePick then
if getBot():getInventory():getItemCount(98) == 0 then

botshow("Bot Taking Pick")
    warp(WorldTakePick,WorldTakePickID)
    sleep(100)
    while getBot():getInventory():getItemCount(98) == 0 do
        sleep(4000)
        for _,obj in pairs(getBot():getWorld():getObjects()) do
            if obj.id == 98 then
                getBot():findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(1000)
               getBot().auto_collect = true
               sleep(5000)
            end
            if getBot():getInventory():getItemCount(98) > 0 then
              getBot().auto_collect = false
                break
            end
        end
    end
    getBot().auto_collect = false
    getBot():moveLeft()
    sleep(2000)
    faceSide()
    sleep(3000)
    while getBot():getInventory():getItemCount(98) > 1 do
    count = getBot():getInventory():getItemCount(98)
    getBot():sendPacket(2,"action|drop\n|itemID|98")
    sleep(1000)
    getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|98|\ncount|"..(count - 1))
    sleep(1250) 
    end
    getBot():wear(98)
    sleep(1000)
    warp(rumah,widreal)
end
end
end


function joinworld()
    botshow("World Finish, Joining Random World...")
    for _, bimba in pairs(ListWorldForJoin) do
        warpdoang(bimba)
        sleep(15000)
    end
end

function cekallbot(name)
    for i, bot in pairs(getBots()) do
        if bot.name:upper() == name:upper() then
            return true
        end
    end
    return false
end

function autoban()
    for _, peler in pairs(getBot():getWorld():getPlayers()) do
        for _, own in pairs(WhiteListBan) do
            if peler.name:upper() ~= own:upper() and peler.name:upper() ~= getBot().name:upper() then
                if string.find(peler.name, "_") then
                    posisiUnderscore = string.find(peler.name, "_")
                    if string.sub(peler.name, 1, posisiUnderscore - 1):upper() ~= own:upper() and string.sub(peler.name, 1, posisiUnderscore - 1):upper() ~= getBot().name:upper() then
                        getBot():say("/ban "..peler.name)
                        sleep(7000) 
                    end
                else
                    getBot():say("/ban "..peler.name)
                    sleep(7000) 
                end
            end
        end
    end
end


function autoleave()
    if AutoLeave then
        local player = 0
        for _, peler in pairs(getBot():getWorld():getPlayers()) do
            for _, own in pairs(WhiteListLeave) do
                if not cekallbot(peler.name) and peler.name:upper() ~= own:upper() and peler.name:upper() ~= getBot().name:upper() then
                    if string.find(peler.name, "_") then
                        posisiUnderscore = string.find(peler.name, "_")
                        if string.sub(peler.name, 1, posisiUnderscore - 1):upper() ~= own:upper() and string.sub(peler.name, 1, posisiUnderscore - 1):upper() ~= getBot().name:upper() and not cekallbot(string.sub(peler.name, 1, posisiUnderscore - 1)) then
                            player = player + 1
                        end
                    else
                        player = player + 1
                    end
                end
            end
        end
        if player > MaxPeople then
            TagBan("**"..player.." Players Are In The "..getBot():getWorld().name:upper().." Worlds, Bot Leave For "..DelayLeave.." Minutes**")
            getBot():warp("EXIT")
            sleep(DelayLeave * 1000 * 60)
            warp(rumah,widreal)
            return
        end
    end
end


function scanFire()
    local world = getBot():getWorld().name
    local growscan = getBot():getWorld().growscan

    for id, _ in pairs(growscan:getTiles()) do
        local plantInfo = getInfo(id)
        if plantInfo.name == "Fire" then
            return true
        end
    end
    return false
end


IndexSays = 0

function botngomong()
local tablesay = {
"/wave",
"/kiss",
"/love",
"/furiouse",
"/no",
"/yes",
"/cheer",
"/sassy"
}
IndexSays = IndexSays + 1
if IndexSays > #tablesay then
IndexSays = 1
end
getBot():say(tablesay[IndexSays])
sleep(3000)
end

IndexPos = 0 
PosXBreak = 0
PosYBreak = 0

cimiw = false
function cekpos()
    if BreakInWorldTutor and not CustomPos then
        PosXBreak = 1
        PosYBreak = 2
        while getBot():getWorld():getTile(PosXBreak,PosYBreak-1).fg ~= 0 and getBot():getWorld():getTile(PosXBreak,PosYBreak-1).fg ~= seedid-1 do
            PosXBreak = PosXBreak + 1
        end
        while getBot():getWorld():getTile(PosXBreak,PosYBreak-1).bg ~= 0 and getBot():getWorld():getTile(PosXBreak,PosYBreak-1).bg ~= seedid-1 do
            PosXBreak = PosXBreak + 1
        end
        while PosXBreak >= 99 do
            PosXBreak = PosXBreak - 99
            PosYBreak = PosYBreak + 4
        end
        return
    elseif BreakInWorldTutor and CustomPos then
        while getBot():getWorld():getTile(PosX,PosY-1).fg ~= 0 and getBot():getWorld():getTile(PosX,PosY-1).fg ~= seedid-1 do
            PosX = PosX + 1
        end
        while getBot():getWorld():getTile(PosX,PosY-1).bg ~= 0 and getBot():getWorld():getTile(PosX,PosY-1).bg ~= seedid-1 do
            PosX = PosX + 1
        end
        while PosX >= 99 do
            PosX = PosX - 99
            PosY = PosY + 4
        end
        PosXBreak = PosX
        PosYBreak = PosY
        return
    end
    if not CustomPos then
cacing = 0
if MaxBotPerWorld == 1 then
lalat = 1
else
lalat = getBot().index
end
for _, tile in pairs(getBot():getWorld():getTiles()) do
    if tile.fg == 0 and tile.bg == 0 then
        cacing = cacing + 1
        if cacing == lalat then
            PosisiX = tile.x * 4
            PosXBreak = PosisiX
            if tile.y == 0 then
                PosYBreak = tile.y + 2
            else
                PosYBreak = tile.y + 4
            end
            break
        end
    end
end
elseif CustomPos and BreakInOtherWorld then
    if rulah == 1 then
        while getBot():getWorld():getTile(PosX,PosY-1).fg ~= 0 and getBot():getWorld():getTile(PosX,PosY-1).fg ~= seedid-1 do
            PosX = PosX + 1
        end
        while getBot():getWorld():getTile(PosX,PosY-1).bg ~= 0 and getBot():getWorld():getTile(PosX,PosY-1).bg ~= seedid-1 do
            PosX = PosX + 1
        end
        while PosX >= 99 do
            PosX = PosX - 99
            PosY = PosY + 4
        end
        PosXBreak = PosX 
        PosYBreak = PosY
        return
    end
    IndexPos = 0 
    PosXBreak = 0
    PosYBreak = 0
    if MaxBotPerWorld == 1 then
        IndexPos = 0
    elseif MaxBotPerWorld > 1  then
        dataawal = getBot().index 
        for i, rumahbreak in pairs(WorldBreak) do
            if rumahbreak:upper() == getBot():getWorld().name:upper() then
                dataawal = getBot().index 
                checkurutan = i - 1
                if checkurutan > 0 then
                    datamenghapus = checkurutan * MaxBotPerWorld 
                    datawal = dataawal - datamenghapus
                end
            end
        end
       IndexPos = dataawal * 4
    elseif MaxBotPerWorld == 0 then
        IndexPos = getBot().index * 4
    end
    while IndexPos >= 99 do
        IndexPos = IndexPos - 99
        PosY = PosY + 4
    end
    while getBot():getWorld():getTile(PosX+IndexPos,PosY-1).fg ~= 0 and getBot():getWorld():getTile(PosX+IndexPos,PosY-1).fg ~= seedid-1 do
        IndexPos = IndexPos + 1
    end
    while getBot():getWorld():getTile(PosX+IndexPos,PosY-1).bg ~= 0 and getBot():getWorld():getTile(PosX+IndexPos,PosY-1).bg ~= seedid-1 do
        IndexPos = IndexPos + 1
    end
    while IndexPos >= 99 do
        IndexPos = IndexPos - 99
        PosY = PosY + 4
    end
    PosXBreak = PosX+IndexPos
    PosYBreak = PosY
end
if PosXBreak == 0 then
    PosXBreak = 1 
end
end

XWDoor = 0
YWDoor = 0
function baris()
    if not UseGen and BreakInOtherWorld then
        if MaxBotPerWorld ~= 0 then
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld == 0 then
            WorldBreakReal = getRandom(WorldBreak)
        else
            WorldBreakReal = ""
        end
    elseif UseGen and BreakInOtherWorld then
        WorldBreakReal = WorldGen
        if AutoChangeWorldBreak then
            if CekMenit() then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)            
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return breaks2()
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return breaks2()
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return breaks2()
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return breaks2()
                    end
                end
                changeworld()
                ganti = true
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                generateWorld()
                ganti = false
                if done then
                    done = false
                    return breaks2()
                end
            end
        end
    end
    if WorldBreakReal == nil and BreakInOtherWorld then
        BreakInOtherWorld = false
    end
if not cimiw then
    cekpos()
    cimiw = true
end
if UseGen and Lock == "WL" then
    PosXBreak = 1
    PosYBreak = 2
elseif UseGen and Lock == "SL" then
    if XWDoor == 0 and YWDoor == 0 then
        for _, tile in pairs(getTiles()) do
            if tile.fg == 6 then
                XWDoor = tile.x
                YWDoor = tile.y
            end
        end
    end
    PosXBreak = XWDoor
    PosYBreak = YWDoor
end
if detectcuy then
    PosXBreak = 1
    PosYBreak = 2
end
while math.floor(getBot().x) ~= PosXBreak or math.floor(getBot().y) ~= PosYBreak do
getBot():findPath(PosXBreak,PosYBreak)
sleep(200)
if getTile(math.floor(getBot().x), math.floor(getBot().y)).fg == 6 then
    if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
        warptutor(WorldTutor,"")
        if nukedtutor then
            TagBan("**World Tutor Has Been Nuked** ")
            return breaks2()
        end
    else
        if BreakInOtherWorld then
            if string.find(WorldBreakReal, ":") then
                worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
            else
                worldb = WorldBreakReal
                dooridb = ""
            end
            warpotherworld(worldb,dooridb)            
            if nukedotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                nukedotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return breaks2()
                        end
                    end
                    BreakInOtherWorld = false
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return breaks2()
                end
            elseif stuckotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                stuckotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return breaks2()
                        end
                    end
                    BreakInOtherWorld = false                        
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return breaks2()
                end
            end
        else
            if AutoCreateWorldBreak then
                generateWorld()
                if done then
                    done = false
                    return breaks2()
                end
            end
            TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
            removeBot(getBot().name)
        end
    end
end
end
if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y-1)).fg ~= 0 and getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y-1)).fg ~= seedid-1 then
    cimiw = false
    return baris()
end
if getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y-1)).bg ~= 0 and getBot():getWorld():getTile(math.floor(getBot().x), math.floor(getBot().y-1)).bg ~= seedid-1 then
    cimiw = false
    return baris()
end
end

function CheckIsOwner()
    for i, tile in pairs(getBot():getWorld():getTiles()) do
        if tile.fg == 242 or tile.fg == 9640 then
            if getBot():getWorld():hasAccess(tile.x,tile.y) > 0 then
                return true
            end
        end
    end
    return false
end

function CekMenit()
    currentMinute = math.floor(os.time() / 60)
    if lastSavedMinute == 0 then
        lastSavedMinute = currentMinute
        return false
    end
    if currentMinute - lastSavedMinute >= AutoChangeEvery then
        lastSavedMinute = currentMinute
        return true
    else
        return false
    end
end

function breaks2()
    if not UseGen and BreakInOtherWorld then
        if MaxBotPerWorld ~= 0 and not RandomWorldBreak then
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld ~= 0 and RandomWorldBreak then
            IndexBreak = IndexBreak + 1
            if IndexBreak > #WorldBreak then
                IndexBreak = 1 
            end
            WorldBreakReal = WorldBreak[IndexBreak]
        elseif MaxBotPerWorld == 0 then
            WorldBreakReal = getRandom(WorldBreak)
        else
            WorldBreakReal = ""
        end
    elseif UseGen and BreakInOtherWorld then
        WorldBreakReal = WorldGen
        if AutoChangeWorldBreak then
            if CekMenit() then
                if string.find(WorldBreakReal, ":") then
                    worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
                else
                    worldb = WorldBreakReal
                    dooridb = ""
                end
                warpotherworld(worldb,dooridb)            
                if nukedotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    nukedotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return breaks2()
                            end
                        end
                        BreakInOtherWorld = false
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return breaks2()
                    end
                elseif stuckotherworld then
                    TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                    removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                    stuckotherworld = false
                    table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                    if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                        if AutoCreateWorldBreak then
                            generateWorld()
                            if done then
                                done = false
                                return breaks2()
                            end
                        end
                        BreakInOtherWorld = false                        
                        TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                        removeBot(getBot().name)
                    else
                        return breaks2()
                    end
                end
                changeworld()
                ganti = true
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                generateWorld()
                ganti = false
                if done then
                    done = false
                    return breaks2()
                end
            end
        end
    end
    if WorldBreakReal == nil and BreakInOtherWorld then
        BreakInOtherWorld = false
    end
    takepick()
    botngomong()
    cekbp()
    rmetot1()
    coptrashs()
    if AutoDetectTileDropPack then
        sampahkedua()
    else
        sampah()
    end
    if getBot():getInventory():getItemCount(98) > 0 and not getBot():getInventory():getItem(98).isActive then
        getBot():wear(98)
    end
    if HarvestTreeUntilReachLevel and getBot().level < HarvestUntilLevel then
        harvest2()
    end
    if PnbBlockUntilReachLevel and getBot().level < PnbUntilLevel then
        cekpnbmode()
    end
    if not nukedtutor and WorldTutor ~= nil and WorldTutor ~= "" then
        warptutor(WorldTutor,"")
        if nukedtutor then
            TagBan("**World Tutor Has Been Nuked** ")
            return breaks2()
        end
    else
        if BreakInOtherWorld then
            if string.find(WorldBreakReal, ":") then
                worldb,dooridb = string.match(WorldBreakReal, "([^|]+):([^|]+)")
            else
                worldb = WorldBreakReal
                dooridb = ""
            end
            warpotherworld(worldb,dooridb)            
            if nukedotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been NUKED** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                nukedotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return breaks2()
                        end
                    end
                    BreakInOtherWorld = false
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return breaks2()
                end
            elseif stuckotherworld then
                TagBan("**World Break "..WorldBreakReal.." Has Been INVALID DOOR ID** ")
                removeTextWorldBreak(WorldBreakList, WorldBreakReal)
                stuckotherworld = false
                table.remove(WorldBreak, getIndex(WorldBreak, WorldBreakReal))
                if #WorldBreak == 0 or MaxBotPerWorld ~= 0 then
                    if AutoCreateWorldBreak then
                        generateWorld()
                        if done then
                            done = false
                            return breaks2()
                        end
                    end
                    BreakInOtherWorld = false                        
                    TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
                    removeBot(getBot().name)
                else
                    return breaks2()
                end
            end
        else
            if AutoCreateWorldBreak then
                generateWorld()
                if done then
                    done = false
                    return breaks2()
                end
            end
            TagBan("**Bot Has No One World Can Be Joined For Breaking Block, Removing Bot...**")
            removeBot(getBot().name)
        end
    end
        if BreakInWorldTutor and not nukedtutor then
            if AutoBan then
                autoban()
            end
            if AutoLeave then
                autoleave()
            end
        elseif BreakInOtherWorld and not UseGen then
            if AutoLeave then
                autoleave()
            end        
        elseif BreakInOtherWorld and UseGen then
            if AutoBan then
                autoban()
            end
            if AutoLeave then
                autoleave()
            end
        end
        if saveegg and not CheckIsOwner() then
            TagBan("**The Bot Is Not Owner Of The World Break, Bot Cant Break Easter Crate, Bot Will Start Rotation Again**")
            return
        end
        baris()
        getBot().ignore_gems = false
        getBot().collect_range = 3
        getBot().auto_collect = true
        posX = math.floor(getBot().x + 1)
        posY = math.floor(getBot().y + 1)
        while getBot():getInventory():getItemCount(seedid - 1) > 0 and getBot():getInventory():getItemCount(seedid) ~= 200 and getBot().gem_count < MinimumGems do
            reconnectbreak2(PosXBreak,PosYBreak)
            if BreakTiles == 1 then
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 2 then
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY - 2, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 2)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 3 then
                getBot():place(posX - 2, posY - 2, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY - 1, seedid - 1)
                sleep(delayplace)
                getBot():place(posX - 2, posY, seedid - 1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY - 1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX - 2, posY).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX - 2, posY)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 4 then
                getBot():place(posX-2,posY-3,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-2,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-1,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY,seedid-1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-3)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY)
                    sleep(delaypunch)
                end
            end
            if BreakTiles == 5 then
                getBot():place(posX-2,posY-3,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-2,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY-1,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY,seedid-1)
                sleep(delayplace)
                getBot():place(posX-2,posY+1,seedid-1)
                sleep(delayplace)
                while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-3)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-2)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY-1)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY)
                    sleep(delaypunch)
                end
                while getBot():getWorld():getTile(posX-2,posY+1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY+1).bg ~= 0 do
                    reconnectbreak2(posX - 1, posY - 1)
                    getBot():hit(posX-2,posY+1)
                    sleep(delaypunch)
                end
            end
        end
        if UseGrinder and ModeGrinder == "FARMING" then
            SeedAkhir = getBot():getInventory():getItemCount(seedid)
            TotalAkhir = SeedAkhir - SeedAwal
            SeedAkhir = 0
            SeedAwal = 0
        end
        if IgnoreGems then
            getBot().ignore_gems = true
        end
        if not saveegg then
            warp(rumah,widreal)
        end
    end



function breaks()
if BreakInWorldTutor or BreakInOtherWorld or AutoCreateWorldBreak then
    return breaks2()
end
if HarvestTreeUntilReachLevel and getBot().level < HarvestUntilLevel then
    harvest2()
    warp(rumah,widreal)
end
if PnbBlockUntilReachLevel and getBot().level < PnbUntilLevel then
    cekpnbmode()
    warp(rumah,widreal)
end
xbot = math.floor(getBot().x)
ybot = math.floor(getBot().y)
takepick()
botngomong()
cekbp()
rmetot1()
coptrashs()
if getBot():getInventory():getItemCount(98) > 0 and not getBot():getInventory():getItem(98).isActive then
getBot():wear(98)
end
if not IgnoreGems then
getBot().ignore_gems = false
end
if saveegg and not CheckIsOwner() then
    TagBan("**The Bot Is Not Owner Of The World Break, Bot Cant Break Easter Crate, Bot Will Start Rotation Again**")
    return
end
getBot().collect_range = 2
getBot().auto_collect = true
pathFound = false
if getBot():getWorld():getTile(1,ybot).fg == 0 and getBot():getWorld():getTile(0,ybot).fg == 0 and not pathFound then
    posX = 2
    posY = ybot + 1
    findPath(1,ybot)
    pathFound = true
    end
    if getBot():getWorld():getTile(48,0).fg == 0 or getBot():getWorld():getTile(47,0).fg == 0 and not pathFound then
    posX = 49
    posY = 1
    findPath(48,0)
    pathFound = true
    end
    if getBot():getWorld():getTile(1,0).fg == 0 or getBot():getWorld():getTile(0,0).fg == 0 and not pathFound then
    posX = 2
    posY = 1
    findPath(1,0)
    pathFound = true
    end
    if getBot():getWorld():getTile(xbot+1,ybot).fg == 0 and not pathFound then
    posX = xbot + 2
    posY = ybot + 1
    pathFound = true
    end
    if getBot():getWorld():getTile(xbot-1,ybot).fg == 0 and not pathFound then
    posX = xbot 
    posY = ybot + 1
    pathFound = true
    end
    while getBot():getInventory():getItemCount(seedid - 1) > 0 and getBot():getInventory():getItemCount(seedid) ~= 200 and getBot().gem_count < MinimumGems do
        reconnectbreak2(posX - 1, posY - 1)
        if BreakTiles == "1" then
            getBot():place(posX - 2, posY - 1, seedid - 1)
            sleep(delayplace)
            while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                reconnect(posX - 1, posY - 1)
                getBot():hit(posX - 2, posY - 1)
                sleep(delaypunch)
            end
        end
        if BreakTiles == "2" then
            getBot():place(posX - 2, posY - 1, seedid - 1)
            sleep(delayplace)
            getBot():place(posX - 2, posY - 2, seedid - 1)
            sleep(delayplace)
            while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                reconnect(posX - 1, posY - 1)
                getBot():hit(posX - 2, posY - 1)
                sleep(delaypunch)
            end
            while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                reconnect(posX - 1, posY - 1)
                getBot():hit(posX - 2, posY - 2)
                sleep(delaypunch)
            end
        end
        if BreakTiles == "3" then
            getBot():place(posX - 2, posY - 2, seedid - 1)
            sleep(delayplace)
            getBot():place(posX - 2, posY - 1, seedid - 1)
            sleep(delayplace)
            getBot():place(posX - 2, posY, seedid - 1)
            sleep(delayplace)
            while getBot():getWorld():getTile(posX - 2, posY - 2).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 2).bg ~= 0 do
                reconnect(posX - 1, posY - 1)
                getBot():hit(posX - 2, posY - 2)
                sleep(delaypunch)
            end
            while getBot():getWorld():getTile(posX - 2, posY - 1).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY - 1).bg ~= 0 do
                reconnect(posX - 1, posY - 1)
                getBot():hit(posX - 2, posY - 1)
                sleep(delaypunch)
            end
            while getBot():getWorld():getTile(posX - 2, posY).fg ~= 0 or getBot():getWorld():getTile(posX - 2, posY).bg ~= 0 do
                reconnect(posX - 1, posY - 1)
                getBot():hit(posX - 2, posY)
                sleep(delaypunch)
            end
        end
if BreakTiles == "4" then
getBot():place(posX-2,posY-3,seedid-1)
sleep(delayplace)
getBot():place(posX-2,posY-2,seedid-1)
sleep(delayplace)
getBot():place(posX-2,posY-1,seedid-1)
sleep(delayplace)
getBot():place(posX-2,posY,seedid-1)
sleep(delayplace)
while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY-3)
sleep(delaypunch)
end
while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY-2)
sleep(delaypunch)
end
while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY-1)
sleep(delaypunch)
end
while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY)
sleep(delaypunch)
end
end
if BreakTiles == "5" then
getBot():place(posX-2,posY-3,seedid-1)
sleep(delayplace)
getBot():place(posX-2,posY-2,seedid-1)
sleep(delayplace)
getBot():place(posX-2,posY-1,seedid-1)
sleep(delayplace)
getBot():place(posX-2,posY,seedid-1)
sleep(delayplace)
getBot():place(posX-2,posY+1,seedid-1)
sleep(delayplace)
while getBot():getWorld():getTile(posX-2,posY-3).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-3).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY-3)
sleep(delaypunch)
end
while getBot():getWorld():getTile(posX-2,posY-2).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-2).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY-2)
sleep(delaypunch)
end
while getBot():getWorld():getTile(posX-2,posY-1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY-1).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY-1)
sleep(delaypunch)
end
while getBot():getWorld():getTile(posX-2,posY).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY)
sleep(delaypunch)
end
while getBot():getWorld():getTile(posX-2,posY+1).fg ~= 0 or getBot():getWorld():getTile(posX-2,posY+1).bg ~= 0 do
reconnect(posX - 1, posY - 1)
getBot():hit(posX-2,posY+1)
sleep(delaypunch)
end
end
end
end

function foregraund3()
    local count = 0
    for _, tile in pairs(getBot():getWorld():getTiles()) do
        if tile.fg == seedid and tile:canHarvest() and getBot():getWorld():getTile(tile.x,tile.y+1).fg ~= (seedid + 3) then
            if getBot():getWorld():hasAccess(tile.x,tile.y) > 0 then
                count = count + 1
            end
        end
    end
    return count
end

function foregraund2()
local count = 0
for _, obj in pairs(getBot():getWorld():getObjects()) do
if obj.id == seedidfloat then
count = count + obj.count
end
end
return count
end

function foregraund(itemid)
if modefloat then
return foregraund2()
end
if SkipRootLevelMax then
    return foregraund3()
end
      local count = 0
      for _, tile in ipairs(getBot():getWorld():getTiles()) do
        if tile.fg == itemid and tile:canHarvest() then
      if getBot():getWorld():hasAccess(tile.x,tile.y) > 0 then
          count = count + 1
      end
   end
end
      return count
    end

function backpospack(worldnya,x,y)
sleep(7000)
werkd = worldnya
        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
            repeat
            getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. widpack.."\ninvitedWorld|0")
            sleep(DelayWarp * 1000)
            if getBot().status ~= 1 then
                return reconnectpack(worldnya,x,y)
            end
            until getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6
        end
            if math.floor(getBot().x) ~= x or math.floor(getBot().y) ~= y and getBot().status == 1 and getInfo(getTile(x,y).fg).collison_type == 0 then
                repeat
                    if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
                        repeat
                        getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. widpack.."\ninvitedWorld|0")
                        sleep(DelayWarp * 1000)
                        if getBot().status ~= 1 then
                            return reconnectpack(worldnya,x,y)
                        end
                        until getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6
                    end
                    if getBot():findPath(x,y) then
                        sleep(500)
                    else
                        return
                    end
                    if getBot().status ~= 1 then
                        return reconnectpack(worldnya,x,y)
                    end
                until math.floor(getBot().x) == x or math.floor(getBot().y) == y
            end
            if getBot().status == 1 and getBot():getWorld().name:upper() == werkd:upper() then
                    return
                end
            end

function backposseed(worldnya,x,y)
werkd = worldnya
if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
    repeat
    getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. widseed.."\ninvitedWorld|0")
    sleep(DelayWarp * 1000)
    if getBot().status ~= 1 then
        return reconnectseed(worldnya,x,y)
    end
    until getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6
end
if math.floor(getBot().x) ~= x or math.floor(getBot().y) ~= y and getBot().status == 1 and getInfo(getTile(x,y).fg).collison_type == 0 then
    repeat
        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
            repeat
            getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. widseed.."\ninvitedWorld|0")
            sleep(DelayWarp * 1000)
            if getBot().status ~= 1 then
                return reconnectseed(worldnya,x,y)
            end
            until getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6
        end
        if getBot():findPath(x,y) then
            sleep(500)
        else
            return
        end
        if getBot().status ~= 1 then
            return reconnectseed(worldnya,x,y)
        end
    until math.floor(getBot().x) == x or math.floor(getBot().y) == y
end
            if getBot().status == 1 and getBot():getWorld().name:upper() == werkd:upper() then
                return
                end
            end

function backposgrinder(worldnya,x,y)
werkd = worldnya
if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
    repeat
    getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. widgrinder.."\ninvitedWorld|0")
    sleep(DelayWarp * 1000)
    if getBot().status ~= 1 then
        return reconnectgrinder(worldnya,x,y)
    end
    until getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6
end
if math.floor(getBot().x) ~= x or math.floor(getBot().y) ~= y and getBot().status == 1 and getInfo(getTile(x,y).fg).collison_type == 0 then
    repeat
        if getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg == 6 then
            repeat
            getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. widgrinder.."\ninvitedWorld|0")
            sleep(DelayWarp * 1000)
            if getBot().status ~= 1 then
                return reconnectgrinder(worldnya,x,y)
            end
            until getBot():getWorld():getTile(math.floor(getBot().x),math.floor(getBot().y)).fg ~= 6
        end
        if getBot():findPath(x,y) then
            sleep(500)
        else
            return
        end
        if getBot().status ~= 1 then
            return reconnectgrinder(worldnya,x,y)
        end
    until math.floor(getBot().x) == x or math.floor(getBot().y) == y
end
            if getBot().status == 1 and getBot():getWorld().name:upper() == werkd:upper() then
                return
                end
            end

function reconnectgrinder(world,x,y)
if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
TagBan("**Bot In EXIT, Now Back Saving Item Grinder In "..world.."  **")
sleep(5000)
warpgrinder(world)
if nukedgrinder then
    TagBan("**"..world:upper().." [ World Grinder ] Was NUKED, Going To Join Other World Grinder..** ")
    nukedgrinder = false
    table.remove(WorldGrinder, getIndex(WorldGrinder, world))
    if #WorldGrinder == 0 then
        TagBan("**No More World Grinder Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return Grinder()
elseif stuckgrinder then
    TagBan("**"..world:upper().." [ World Grinder ] Was INVALID DOOR ID, Going To Join Other World Grinder..** ")
    stuckgrinder = false
    table.remove(WorldGrinder, getIndex(WorldGrinder, world))
    if #WorldGrinder == 0 then
        TagBan("**No More World Grinder Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return Grinder()
end 
backposgrinder(world,x,y)
end
if getBot().status ~= 1 then
TagBan("**Bot Was "..status().." Reconnecting...  **")
getBot().auto_reconnect = true
repeat
if getBot().status == 9 then
    getBot().reconnect_interval = 300
end
sleep(8000)
until getBot().status == 1 or getBot().status == 3
if getBot().status == 3 then 
banned()
end
if getBot().status == 1 then
TagBan("**Bot Was "..status().." Now Back To Saving Item Grinder In "..world.."  **")
sleep(5000)
getBot().reconnect_interval = DelayReconnect
raka = false
warpgrinder(world)
if nukedgrinder then
    TagBan("**"..world:upper().." [ World Grinder ] Was NUKED, Going To Join Other World Grinder..** ")
    nukedgrinder = false
    table.remove(WorldGrinder, getIndex(WorldGrinder, world))
    if #WorldGrinder == 0 then
        TagBan("**No More World Grinder Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return Grinder()
elseif stuckgrinder then
    TagBan("**"..world:upper().." [ World Grinder ] Was INVALID DOOR ID, Going To Join Other World Grinder..** ")
    stuckgrinder = false
    table.remove(WorldGrinder, getIndex(WorldGrinder, world))
    if #WorldGrinder == 0 then
        TagBan("**No More World Grinder Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return Grinder()
end  
backpospack(world,x,y)
end
end
end

function reconnectpack(world,x,y)
if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
TagBan("**Bot In EXIT, Now Back Saving "..pack.." In "..world.."  **")
sleep(5000)
warppack(world)
if nukedpack then
    TagBan("**"..world:upper().." [ World Save Pack ] Was NUKED, Going To Join Other World Save..** ")
    nukedpack = false
    table.remove(WorldSavePack, getIndex(WorldSavePack, world))
    if #WorldSavePack == 0 then
        TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return belicuy()
elseif stuckpack  then
    TagBan("**"..world:upper().." [ World Save Pack ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
    stuckpack = false
    table.remove(WorldSavePack, getIndex(WorldSavePack, world))
    if #WorldSavePack == 0 then
        TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return belicuy()
end    
backpospack(world,x,y)
end
if getBot().status ~= 1 then
TagBan("**Bot Was "..status().." Reconnecting...  **")
getBot().auto_reconnect = true
repeat
if getBot().status == 9 then
    getBot().reconnect_interval = 300
end
sleep(8000)
until getBot().status == 1 or getBot().status == 3
if getBot().status == 3 then 
banned()
end
if getBot().status == 1 then
TagBan("**Bot Was "..status().." Now Back To Saving "..pack.." In "..world.."  **")
sleep(5000)
getBot().reconnect_interval = DelayReconnect
raka = false
warppack(world)
if nukedpack then
    TagBan("**"..world:upper().." [ World Save Pack ] Was NUKED, Going To Join Other World Save..** ")
    nukedpack = false
    table.remove(WorldSavePack, getIndex(WorldSavePack, world))
    if #WorldSavePack == 0 then
        TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return belicuy()
elseif stuckpack  then
    TagBan("**"..world:upper().." [ World Save Pack ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
    stuckpack = false
    table.remove(WorldSavePack, getIndex(WorldSavePack, world))
    if #WorldSavePack == 0 then
        TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return belicuy()
end    
backpospack(world,x,y)
end
end
end

function reconnectseed(world,x,y)
if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
TagBan("**Bot In EXIT, Now Back Saving "..pack.." In "..world.."  **")
sleep(5000)
warpseed(world)
if nukedseed then
    TagBan("**"..world:upper().." [ World Save Seed ] Was NUKED, Going To Join Other World Save..** ")
    nukedseed = false
    table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, world))
    if #WorldSaveSeed == 0 then
        TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return saveseed()
elseif stuckseed  then
    TagBan("**"..world:upper().." [ World Save Seed ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
    stuckseed = false
    table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, world))
    if #WorldSaveSeed == 0 then
        TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return saveseed()
end
backposseed(world,x,y)
end
if getBot().status ~= 1 then
TagBan("**Bot Was "..status().." Reconnecting...  **")
getBot().auto_reconnect = true
repeat
if getBot().status == 9 then
    getBot().reconnect_interval = 300
end
sleep(8000)
until getBot().status == 1 or getBot().status == 3
if getBot().status == 3 then 
banned()
end
if getBot().status == 1 then
TagBan("**Bot Was "..status().." Now Back To Saving Seeds In "..world.."  **")
sleep(5000)
getBot().reconnect_interval = DelayReconnect
raka = false
warpseed(world)
if nukedseed then
    TagBan("**"..world:upper().." [ World Save Seed ] Was NUKED, Going To Join Other World Save..** ")
    nukedseed = false
    table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, world))
    if #WorldSaveSeed == 0 then
        TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return saveseed()
elseif stuckseed  then
    TagBan("**"..world:upper().." [ World Save Seed ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
    stuckseed = false
    table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, world))
    if #WorldSaveSeed == 0 then
        TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
        removeBot(getBot().name)
    end
    return saveseed()
end
backposseed(world,x,y)
end
end
end

function round(n)
    return n % 1 > 0.5 and math.ceil(n) or math.floor(n)
end


function CekTilePack(x,y,num)
    local count = 0
    local stack = 0
    for _,obj in pairs(getBot():getWorld():getObjects()) do
        if round(obj.x / 32) == x and math.floor(obj.y / 32) == y then
            count = count + obj.count
            stack = stack + 1
        end
    end
    if stack < 15 and count <= (4000 - num) then
        return true
    end
    return false
end

function CekTileSeeds(x,y,num)
    local count = 0
    local stack = 0
    for _,obj in pairs(getBot():getWorld():getObjects()) do
        if round(obj.x / 32) == x and math.floor(obj.y / 32) == y then
            count = count + obj.count
            stack = stack + 1
        end
    end
    if stack < 15 and count <= (4000 - num) then
        return true
    end
    return false
end


IdInventory = {}

function isIdInInventory(id)
    for _, existingId in ipairs(IdInventory) do
        if existingId == id then
            return true
        end
    end
    return false
end

function taroidinventory()
for _, inventory in pairs(getBot():getInventory():getItems()) do
    local id = inventory.id
        table.insert(IdInventory, id)
    end
end

function clearidinventory()
    for i=#IdInventory, 1, -1 do
        table.remove(IdInventory, i)
    end
end



function savecuygrowganoth()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    for _, item in pairs(getBot():getInventory():getItems()) do
        local pack = item.id
        if not isIdInInventory(pack) then
            for x = 0, 99 do
                for y = 53, 0, -1 do
                    if getBot():getWorld():getTile(x,y).fg == IDPatokanPack or getBot():getWorld():getTile(x,y).bg == IDPatokanPack then
                        if CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then
                            while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y do
                                getBot():findPath(x - 1,y)
                                sleep(2000)
                                faceSide()
                                sleep(500)
                                reconnectpack(atas, x - 1,y)
                            end
                            sleep(50)
                            if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) then
                                getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                                sleep(1000)
                                getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                                sleep(1250)
                                reconnectpack(atas, x - 1,y)
                            end
                        end
                    end
                    if getBot():getInventory():getItemCount(pack) == 0 then
                        break
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
        end
    end
end

function savecuygrowganothkedua()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    kirana = false
    xbot = math.floor(getBot().x)
    ybot = math.floor(getBot().y)
    if xbot > 91 then
        xbot = 91
    end
    for _, item in pairs(getBot():getInventory():getItems()) do
        local pack = item.id
        if not isIdInInventory(pack) then  
            for y = 53, 0, -1 do    
                for x = 0, 99 do
                    if x > 0 then
                        tile = getBot():getWorld():getTile(x,y)
                        collision = getInfo(tile.fg).collision_type                
                        if collision == 0 and getInfo(getBot():getWorld():getTile(x - 1,y + 1).fg).collision_type == 0 and x > xbot and y <= ybot and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then                    
                            while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y + 1 do
                                getBot():findPath(x - 1,y + 1)
                                sleep(2000)
                                faceSide()
                                sleep(500)
                                reconnectpack(atas, x - 1,y + 1)
                            end
                            sleep(50)
                            if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) then
                                getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                                sleep(1000)
                                getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                                sleep(1250)
                                reconnectpack(atas, x - 1,y + 1)
                            end
                        end
                    end
                    if getBot():getInventory():getItemCount(pack) == 0 then
                        break
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
        end
    end
end

alienlist = {11398,11446,11444,11424,11450,11420,11434,11418,11414,11416,11428,11430}

function savecuyalien()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    for _,pack in pairs(alienlist) do
        for x = 0, 99 do
            for y = 53, 0, -1 do
                if getBot():getWorld():getTile(x,y).fg == IDPatokanPack or getBot():getWorld():getTile(x,y).bg == IDPatokanPack then
                    if CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y do
                            getBot():findPath(x - 1,y)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectpack(atas, x - 1,y)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectpack(atas, x - 1,y)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end

function savecuyalienkedua()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    kirana = false
    xbot = math.floor(getBot().x)
    ybot = math.floor(getBot().y)
    if xbot > 91 then
        xbot = 91
    end
    for _, pack in pairs(alienlist) do
        for y = 53, 0, -1 do    
            for x = 0,99 do
                if x > 0 then
                    tile = getBot():getWorld():getTile(x,y)
                    collision = getInfo(tile.fg).collision_type
                    if collision == 0 and getInfo(getBot():getWorld():getTile(x - 1,y + 1).fg).collision_type == 0 and x > xbot and y <= ybot and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then      
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y + 1 do
                            getBot():findPath(x - 1,y + 1)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectpack(atas, x - 1,y + 1)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectpack(atas, x - 1,y + 1)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end

easterlist = {611,10766,2548,2550,2552,2546,9460,2554,2544,8064,8066,8068,9460,10760,10762}

function savecuyeaster()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    for _,pack in pairs(easterlist) do
        for x = 0, 99 do
            for y = 53, 0, -1 do
                if getBot():getWorld():getTile(x,y).fg == IDPatokanPack or getBot():getWorld():getTile(x,y).bg == IDPatokanPack then
                    if CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y do
                            getBot():findPath(x - 1,y)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectpack(atas, x - 1,y)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectpack(atas, x - 1,y)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end

function savecuyeasterkedua()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    kirana = false
    xbot = math.floor(getBot().x)
    ybot = math.floor(getBot().y)
    if xbot > 91 then
        xbot = 91
    end
    for _, pack in pairs(easterlist) do
        for y = 53, 0, -1 do    
            for x = 0,99 do
                if x > 0 then
                    tile = getBot():getWorld():getTile(x,y)
                    collision = getInfo(tile.fg).collision_type
                    if collision == 0 and getInfo(getBot():getWorld():getTile(x - 1,y + 1).fg).collision_type == 0 and x > xbot and y <= ybot and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then      
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y + 1 do
                            getBot():findPath(x - 1,y + 1)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectpack(atas, x - 1,y + 1)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectpack(atas, x - 1,y + 1)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end

function savecuy()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    for _,pack in pairs(packitemid) do
        for x = 0, 99 do
            for y = 53, 0, -1 do
                if getBot():getWorld():getTile(x,y).fg == IDPatokanPack or getBot():getWorld():getTile(x,y).bg == IDPatokanPack then
                    if CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y do
                            getBot():findPath(x - 1,y)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectpack(atas, x - 1,y)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectpack(atas, x - 1,y)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end

function savecuykedua()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    kirana = false
    xbot = math.floor(getBot().x)
    ybot = math.floor(getBot().y)
    if xbot > 91 then
        xbot = 91
    end
    for _, pack in pairs(packitemid) do
        for y = 53, 0, -1 do    
            for x = 0,99 do
                if x > 0 then
                    tile = getBot():getWorld():getTile(x,y)
                    collision = getInfo(tile.fg).collision_type
                    if collision == 0 and getInfo(getBot():getWorld():getTile(x - 1,y + 1).fg).collision_type == 0 and x > xbot and y <= ybot and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then      
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y + 1 do
                            getBot():findPath(x - 1,y + 1)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectpack(atas, x - 1,y + 1)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectpack(atas, x - 1,y + 1)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end


function sampah()
    if next(CustomItem) == nil then
        return
    end
    getBot().auto_collect = false
    Kizuma = getRandom(WorldSavePack)
    rawr = getBot():getWorld().name
    for a, item in pairs(CustomItem) do
        trash_count = getBot():getInventory():getItemCount(item)
        if getBot():getInventory():getItemCount(item) > 0 then
            warppack(Kizuma)
            if nukedpack then
                TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was NUKED, Going To Join Other World Save..** ")
                nukedpack = false
                table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
                if #WorldSavePack == 0 then
                    TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
                    removeBot(getBot().name)
                end
                return sampah()
            elseif stuckpack then
                TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
                stuckpack = false
                table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
                if #WorldSavePack == 0 then
                    TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
                    removeBot(getBot().name)
                end
                return sampah()
            end
            atas = getBot():getWorld().name
            for _,pack in pairs(CustomItem) do
                for x = 0, 99 do
                    for y = 53, 0, -1 do
                        if getBot():getWorld():getTile(x,y).fg == IDPatokanPack or getBot():getWorld():getTile(x,y).bg == IDPatokanPack then
                            if CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then
                                while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y do
                                    getBot():findPath(x - 1,y)
                                    sleep(2000)
                                    faceSide()
                                    sleep(500)
                                    reconnectpack(atas, x - 1,y)
                                end
                                sleep(50)
                                if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) then
                                    getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                                    sleep(1000)
                                    getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                                    sleep(1250)
                                    reconnectpack(atas, x - 1,y)
                                end
                            end
                        end
                        if getBot():getInventory():getItemCount(pack) == 0 then
                            break
                        end
                    end
                    if getBot():getInventory():getItemCount(pack) == 0 then
                        break
                    end
                end
            end
            warp(rawr,widreal)
            getBot().auto_collect = true
        end
    end
end


function sampahkedua()
    if next(CustomItem) == nil then
        return
    end
    atas = getBot():getWorld().name
    getBot().auto_collect = false
    Kizuma = getRandom(WorldSavePack)
    rawr = getBot():getWorld().name
    for a, item in pairs(CustomItem) do
        trash_count = getBot():getInventory():getItemCount(item)
        if getBot():getInventory():getItemCount(item) > 0 then
            warppack(Kizuma)
            if nukedpack then
                TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was NUKED, Going To Join Other World Save..** ")
                nukedpack = false
                table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
                if #WorldSavePack == 0 then
                    TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
                    removeBot(getBot().name)
                end
                return sampahkedua()
            elseif stuckpack then
                TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
                stuckpack = false
                table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
                if #WorldSavePack == 0 then
                    TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
                    removeBot(getBot().name)
                end
                return sampahkedua()
            end
            xbot = math.floor(getBot().x)
            ybot = math.floor(getBot().y)
            if xbot > 91 then
                xbot = 91
            end
            for _, pack in pairs(CustomItem) do
                for y = 53, 0, -1 do    
                    for x = 0, 99 do
                        if x > 0 then
                            tile = getBot():getWorld():getTile(x,y)
                            collision = getInfo(tile.fg).collision_type
                            if collision == 0 and getInfo(getBot():getWorld():getTile(x - 1,y + 1).fg).collision_type == 0 and x > xbot and y <= ybot and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then                    
                                while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y + 1 do
                                    getBot():findPath(x - 1,y + 1)
                                    sleep(2000)
                                    faceSide()
                                    sleep(500)
                                    reconnectpack(atas, x - 1,y + 1)
                                end
                                sleep(50)
                                if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) then
                                    getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                                    sleep(1000)
                                    getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                                    sleep(1250)
                                    reconnectpack(atas, x - 1,y + 1)
                                end
                            end
                        end
                        if getBot():getInventory():getItemCount(pack) == 0 then
                            break
                        end
                    end
                    if getBot():getInventory():getItemCount(pack) == 0 then
                        break
                    end
                end
            end
            warp(rawr,widreal)
            getBot().auto_collect = true
        end
    end
end


function SeedsScanner(ItemID)
local kiwar = 0
    for _, object in pairs(getBot():getWorld():getObjects()) do 
        if object.id == ItemID then
      kiwar = kiwar + object.count
        end
    end
return kiwar
end

function savegrinder()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    for _, pack in pairs(GrinderItem) do
        for x = 0, 99 do
            for y = 53, 0, -1 do
                if getBot():getWorld():getTile(x,y).fg == IDPatokanDropItemGrinder or getBot():getWorld():getTile(x,y).bg == IDPatokanDropItemGrinder then
                    if CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y do
                            getBot():findPath(x - 1,y)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectgrinder(atas, x - 1,y)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectgrinder(atas, x - 1,y)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end

function savegrinderkedua()
    getBot().auto_collect = false
    atas = getBot():getWorld().name
    kirana = false
    xbot = math.floor(getBot().x)
    ybot = math.floor(getBot().y)
    if xbot > 91 then
        xbot = 91
    end
    for _, pack in pairs(GrinderItem) do
        for y = 53, 0, -1 do    
            for x = 0, 99 do
                if x > 0 then
                    tile = getBot():getWorld():getTile(x,y)
                    collision = getInfo(tile.fg).collision_type                
                    if collision == 0 and getInfo(getBot():getWorld():getTile(x - 1,y + 1).fg).collision_type == 0 and x > xbot and y <= ybot and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) and getBot():getInventory():getItemCount(pack) > 0 then                    
                        while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y + 1 do
                            getBot():findPath(x - 1,y + 1)
                            sleep(2000)
                            faceSide()
                            sleep(500)
                            reconnectgrinder(atas, x - 1,y + 1)
                        end
                        sleep(50)
                        if getBot():getInventory():getItemCount(pack) > 0 and CekTilePack(x,y + 1,getBot():getInventory():getItemCount(pack)) then
                            getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                            sleep(1000)
                            getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..getBot():getInventory():getItemCount(pack))
                            sleep(1250)
                            reconnectgrinder(atas, x - 1,y + 1)
                        end
                    end
                end
                if getBot():getInventory():getItemCount(pack) == 0 then
                    break
                end
            end
            if getBot():getInventory():getItemCount(pack) == 0 then
                break
            end
        end
    end
end

seedasli = false

function saveseed()
Kizuma = getRandom(WorldSaveSeed)
getBot().auto_collect = false
botpack("Saving Seeds")
atas = getBot():getWorld().name
        warpseed(Kizuma)
        if nukedseed then
            TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was NUKED, Going To Join Other World Save..** ")
            nukedseed = false
            table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
            if #WorldSaveSeed == 0 then
                TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
                removeBot(getBot().name)
            end
            return saveseed()
        elseif stuckseed  then
            TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
            stuckseed = false
            table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
            if #WorldSaveSeed == 0 then
                TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
                removeBot(getBot().name)
            end
            return saveseed()
        end
rara = SeedsScanner(seedid)
for x = 0, 99 do
    for y = 53, 0, -1 do
        if getBot():getWorld():getTile(x,y).fg == IDPatokanSeed or getBot():getWorld():getTile(x,y).bg == IDPatokanSeed then
            if CekTileSeeds(x,y,getBot():getInventory():getItemCount(seedid)) and getBot():getInventory():getItemCount(seedid) > 0 then
                while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y do
                    getBot():findPath(x - 1,y)
                    sleep(2000)
                    faceSide()
                    sleep(500)
                    reconnectseed(atas, x - 1 ,y)
                end
                sleep(50)
                if getBot():getInventory():getItemCount(seedid) > 0 and CekTileSeeds(x,y,getBot():getInventory():getItemCount(seedid)) then
                    getBot():sendPacket(2,"action|drop\n|itemID|"..seedid)
                    sleep(1000)
                    getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..seedid.."|\ncount|"..getBot():getInventory():getItemCount(seedid))
                    sleep(1250)
                    reconnectseed(atas, x - 1,y)
                end
            end
        end
        if getBot():getInventory():getItemCount(seedid) == 0 then
            break
        end
    end
    if getBot():getInventory():getItemCount(seedid) == 0 then
        break
    end
end
    if UseGrinder and ModeGrinder == "FARMING" and SeedsScanner(seedid) >= MaxBlockToGrind then
        while true do
            warp(atas,widseed)
            if SeedsScanner(seedid) < MaxBlockToGrind then
                seedid = seedid + 1
                return saveseed()
            end
            getBot().auto_collect = true
            for _, obj in pairs(getObjects()) do
                if obj.id == seedid then
                    getBot():findPath(math.floor(obj.x/32),math.floor(obj.y/32))
                    sleep(1000)
                    if getBot():getInventory():getItemCount(seedid) >= MaxBlockToGrind then
                        break
                    end
                end
            end
            Grinder()
        end
    end
    seeddrop = SeedsScanner(seedid)
    hasilseed = math.abs(rara - seeddrop)
    if seedasli then
        botpack("Success Saving Seeds") 
    end
    hasilseed = 0
    if JoinOtherWorld then
        joinworld()
    end
    warp(rumah, widreal)
end

function saveseedkedua()
    Kizuma = getRandom(WorldSaveSeed)
    getBot().auto_collect = false
    botpack("Saving Seeds")
    atas = getBot():getWorld().name    
    warpseed(Kizuma)
    if nukedseed then
        TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was NUKED, Going To Join Other World Save..** ")
        nukedseed = false
        table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
        if #WorldSaveSeed == 0 then
            TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return saveseedkedua()
    elseif stuckseed  then
        TagBan("**"..Kizuma:upper().." [ World Save Seed ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
        stuckseed = false
        table.remove(WorldSaveSeed, getIndex(WorldSaveSeed, Kizuma))
        if #WorldSaveSeed == 0 then
            TagBan("**No More World Save Seed Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return saveseedkedua()
    end
    rara = SeedsScanner(seedid)
    xbot = math.floor(getBot().x)
    ybot = math.floor(getBot().y)
    if xbot > 91 then
        xbot = 91
    end
    for y = 53, 0, -1 do    
        for x = 0, 99 do
            if x > 0 then
                tile = getBot():getWorld():getTile(x,y)
                collision = getInfo(tile.fg).collision_type
                if collision == 0 and getInfo(getBot():getWorld():getTile(x - 1,y + 1).fg).collision_type == 0 and x > xbot and y <= ybot and CekTileSeeds(x,y + 1,getBot():getInventory():getItemCount(seedid)) and getBot():getInventory():getItemCount(seedid) > 0 then                    
                    while math.floor(getBot().x) ~= (x - 1) or math.floor(getBot().y) ~= y + 1 do
                        getBot():findPath(x - 1,y + 1)
                        sleep(2000)
                        faceSide()
                        sleep(500)
                        reconnectseed(atas, x - 1,y + 1)
                    end
                    sleep(50)
                    if getBot():getInventory():getItemCount(seedid) > 0 and CekTileSeeds(x,y + 1,getBot():getInventory():getItemCount(seedid)) then
                        getBot():sendPacket(2,"action|drop\n|itemID|"..seedid)
                        sleep(1000)
                        getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..seedid.."|\ncount|"..getBot():getInventory():getItemCount(seedid))
                        sleep(1250)
                        reconnectseed(atas, x - 1,y + 1)
                    end
                end
            end
            if getBot():getInventory():getItemCount(seedid) == 0 then
                break
            end
        end
        if getBot():getInventory():getItemCount(seedid) == 0 then
            break
        end
    end
    if UseGrinder and ModeGrinder == "FARMING" and SeedsScanner(seedid) >= MaxBlockToGrind then
        while true do
            warp(atas,widseed)
            if SeedsScanner(seedid) < MaxBlockToGrind then
                seedid = seedid + 1
                return saveseedkedua()
            end
            getBot().auto_collect = true
            for _, obj in pairs(getObjects()) do
                if obj.id == seedid then
                    getBot():findPath(math.floor(obj.x/32),math.floor(obj.y/32))
                    sleep(1000)
                    if getBot():getInventory():getItemCount(seedid) >= MaxBlockToGrind then
                        break
                    end
                end
            end
            Grinder()
        end
    end
    seeddrop = SeedsScanner(seedid)
    hasilseed = math.abs(rara - seeddrop)
    if seedasli then
        botpack("Success Saving Seeds") 
    end
    hasilseed = 0
    if JoinOtherWorld then
        joinworld()
    end
    warp(rumah, widreal)
end

saveegg = false

function belicuy()
Kizuma = getRandom(WorldSavePack)
    getBot().auto_collect = false
    botpack("Buying Pack..")
    warppack(Kizuma)
    if nukedpack then
        TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was NUKED, Going To Join Other World Save..** ")
        nukedpack = false
        table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
        if #WorldSavePack == 0 then
            TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return belicuy()
    elseif stuckpack  then
        TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
        stuckpack = false
        table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
        if #WorldSavePack == 0 then
            TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return belicuy()
    end
    rara = SeedsScanner(packitemid[1])
    while getBot().gem_count >= packgems do
        getBot():sendPacket(2,"action|buy\nitem|".. itemname)
        sleep(4000)
        gemssave = gemssave + packgems
        if itemname ~= "growganoth" and itemname ~= "easter_pack" and itemname ~= "alien_scanner" then
            if getBot():getInventory():getItemCount(packitemid[1]) < 1 then
                getBot():sendPacket(2,"action|buy\nitem|upgrade_backpack")
                sleep(5000)
            end
            if getBot():getInventory():getItemCount(packitemid[#packitemid]) == 200 then
                break
            end
        end
        if getBot().gem_count < packgems then
            break
        end
    end
if itemname == "growganoth"  then
taroidinventory()
while getBot():getInventory():getItemCount(10386) > 0 do
getBot():place(math.floor(getBot().x), math.floor(getBot().y), 10386)
sleep(1000)
end
if AutoDetectTileDropPack then
    savecuygrowganothkedua()
else
    savecuygrowganoth()
end
clearidinventory()
elseif itemname == "easter_pack" then
    saveseedid = seedid
    saveegg = true
    seedid = 8427
    if BreakInWorldTutor or BreakInOtherWorld or AutoCreateWorldBreak then
        breaks2()
    else
        breaks()
    end
    seedid = saveseedid
    if not CheckIsOwner() then
        saveegg = false
        return
    end
    getBot().auto_collect = false
    warppack(Kizuma)
    if nukedpack then
        TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was NUKED, Going To Join Other World Save..** ")
        nukedpack = false
        table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
        if #WorldSavePack == 0 then
            TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return belicuy()
    elseif stuckpack  then
        TagBan("**"..Kizuma:upper().." [ World Save Pack ] Was INVALID DOOR ID, Going To Join Other World Save..** ")
        stuckpack = false
        table.remove(WorldSavePack, getIndex(WorldSavePack, Kizuma))
        if #WorldSavePack == 0 then
            TagBan("**No More World Save Pack Can Be Joined, Removing Bot... ** ")
            removeBot(getBot().name)
        end
        return belicuy()
    end    
    if AutoDetectTileDropPack then
        savecuyeasterkedua()
    else
        savecuyeaster()
    end
    saveegg = false
elseif itemname == "alien_scanner" and CustomWearItem then
    return
elseif itemname == "alien_scanner" and not CustomWearItem then
    if AutoDetectTileDropPack then
        savecuyalienkedua()
    else
        savecuyalien()
    end
else
    if AutoDetectTileDropPack then
        savecuykedua()
    else
        savecuy()
    end
end
         totalpack = SeedsScanner(packitemid[1])
     hasilpack = math.abs(rara - totalpack)
        botpack("Done Droping Pack, Back To Farm...")
  hasilpack = 0
if JoinOtherWorld then
    joinworld()
end
    warp(rumah,widreal)
end

function anjay()
    if getBot().gem_count >= MinimumGems then 
        belicuy()
    end
end

function rotisan()
    if HarvestTreeUntilReachLevel and getBot().level < HarvestUntilLevel and getBot():getInventory():getItemCount(seedid) >= 75 then
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end
    elseif PnbBlockUntilReachLevel and getBot().level < PnbUntilLevel and getBot():getInventory():getItemCount(seedid) >= 75 then
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end
    end
    if getBot():getInventory():getItemCount(seedid) >= 75 and not PlantProfitSeed then
        seedasli = true
        if AutoDetectTileDropSeed then
            saveseedkedua()
        else
            saveseed()
        end
    end
    if HarvestTreeUntilReachLevel and getBot().level > HarvestUntilLevel then
        seedasli = true
        if PlantProfitSeed and getBot():getInventory():getItemCount(seedid) >= PlantAfterTotalSeed then
            rumahdata = rumah
            widrealdata = widreal
            LanjutPlant()
            rumah = rumahdata
            widreal = widrealdata
            warp(rumah, widreal)
        elseif PlantProfitSeed and getBot():getInventory():getItemCount(seedid) >= PlantAfterTotalSeed and udahplant then
            seedasli = true
            if AutoDetectTileDropSeed then
                saveseedkedua()
            else
                saveseed()
            end
        end
    elseif PnbBlockUntilReachLevel and getBot().level > PnbUntilLevel then
        seedasli = true
        if PlantProfitSeed and getBot():getInventory():getItemCount(seedid) >= PlantAfterTotalSeed then
            rumahdata = rumah
            widrealdata = widreal
            LanjutPlant()
            rumah = rumahdata
            widreal = widrealdata
            warp(rumah, widreal)
        elseif PlantProfitSeed and getBot():getInventory():getItemCount(seedid) >= PlantAfterTotalSeed and udahplant then
            seedasli = true
            if AutoDetectTileDropSeed then
                saveseedkedua()
            else
                saveseed()
            end
        end
    end
    seedasli = false
end


function cukcuk1(world)
if foregraund(seedid) == 0 then
gemsakhir = getBot().gem_count
gemssmua = gemsakhir + gemssave
local perbedaan = math.abs(gemsawal - gemssmua)
anjay()
pohon[world] = totaltree()
berlian[world] = perbedaan
totalgems = totalgems + perbedaan
botshow("World Finish")
gemssave = 0
end
end

function jalan()
letus = getBot():getWorld().name:upper()
if foregraund(seedid) == 0 then
cukcuk1(letus)
end
while foregraund(seedid) > 0 do
if CounterFire then
    if scanFire() then
        clearfire()
    end
end
if CustomWearItem and getBot():getInventory():getItemCount(ItemID) > 0 and not getBot():getInventory():getItem(ItemID).isActive then
    getBot():wear(ItemID)
    sleep(1000)
end
botRest(math.floor(getBot().x), math.floor(getBot().y))
harvest()
if AutoBan then
autoban()
end
if AutoLeave then
autoleave()
end
breaks()
anjay()
plant()
anjay()
rotisan()
cukcuk1(letus)
end
end

function clearTable(tbl)
    for k in pairs(tbl) do
        tbl[k] = nil
    end
end

function startwoi()
    if getBot().status == 3 then
        banned()
    end
    if getBot().status == 1 then
    while true do
    for i,worldawal in pairs(worlds) do
        if string.find(worldawal, ":") then
            worldnya,pintuid = string.match(worldawal, "([^|]+):([^|]+)")
        else
            worldnya = worldawal
            pintuid = ""
        end
        rumah = worldnya
        emoji = cekemoji()
        DataWorld()
    takepick()
    if IgnoreGems then
        getBot().ignore_gems = true
    end
    warpfarm(worldnya,pintuid)
    if not nuked then
        if scanFire() then
            if CounterFire then
                clearfire()
            else
                bakar = true
            end
        end
    end
    if not nuked and not stuck and not bakar then
    if UseMethod then
    getBot():sendPacket("action|setSkin\ncolor|3370516479",2)
    end
    cektutor()
    trashsampah()
    clearTable(processedTimes)
    seedid = detect()
    cekseed()
    cekseed2()
    cekseed3()
    cekseed4()
    if seedid == 0 then
    modefloat = true
    float1()
    float2()
    seedidfloat = detectfloat()
    seedid  = detectfloat() 
    cekfloat()
    seedidfloat = seedidfloat 
    seedid = seedid + 1
    end
    trashclothes()
    antiToxic()
    gemsawal = getBot().gem_count
    tt = os.time()
    if foregraund(seedid) > 0 then
    if UseGrinder then
        cekitemgrinder()
    end
    botshow("Bot Start")
    jalan()
    cleargrinderitem()
    end
    if not modefloat then
    modefloat = true
    float1()
    float2()
    seedidfloat = detectfloat()
    seedid  = detectfloat() 
    cekfloat()
    seedidfloat = seedidfloat 
    seedid = seedid + 1
    if seedid ~= 1 then
    if foregraund(seedid) > 0 then
        if UseGrinder then
            cekitemgrinder()
        end
        botshow("Bot Start")
        jalan()
        cleargrinderitem()
        end
    end
    end
    if AutoFill then
        tambal()
    end
    modefloat = false
          tt = os.time() - tt
          Time[worldnya] = math.floor(tt / 3600) .. " Hours " .. math.floor(tt % 3600 / 60) .. " Minutes"
          sleep(100)
          botshow("World Finish")
          if start < #worlds then
           start = start + 1
          else
        if loop then
          totalloop = totalloop + 1
         waktu = {}
         berlian = {}
         pohon = {}
          end
    end
          if JoinOtherWorld then
            joinworld()
          end
    elseif nuked then
    Time[worldnya] = "NUKED"
    botshow("World Is Nuked, Going To Next World..")
    TagBan("**"..worldnya:upper().." [ Farm World ] WAS NUKED** ")
    WriteNuked(worldnya:upper())
    table.remove(worlds, i)
    nuked = false
    sleep(5000)
    elseif stuck then
    Time[worldnya] = "INVALID IDDOOR"
    botshow("Cant Join Id Door, Going To Next World..")
    TagBan("**"..worldnya:upper().." [ Farm World ] WAS INVALID DOOR ID** ")
    WriteStuck(worldnya:upper())
    table.remove(worlds, i)
    stuck = false
    sleep(5000)
    elseif bakar then
    Time[worldnya] = "FIRE"
    botshow("The World Has Fire, Going To Next World..")
    TagBan("**"..worldnya:upper().." [ Farm World ] HAS FIRE** ")
    WriteFire(worldnya:upper())
    table.remove(worlds, i)
    bakar = false
    sleep(5000)
       end
    if not loop then
        DataWorld()
        sleep(50)
        botshow("All World Has Been Finish, Removing Bot..")
        TagBan("**All World Has Been Finish, Removing Bot..**")
        removeBot(getBot().name)
        break
      end
    end
    end
end
end

function startwoi2()
    if getBot().status == 3 then
        banned()
    end
    if getBot().status == 1 then
    while true do
        updateWorldList(FarmList)
        if string.find(WorldData, ":") then
            worldnya,pintuid = string.match(WorldData, "([^|]+):([^|]+)")
        else
            worldnya = WorldData
            pintuid = ""
        end
        rumah = worldnya
        emoji = cekemoji()
        DataWorld()
    takepick()
    if IgnoreGems then
        getBot().ignore_gems = true
    end
    warpfarm(worldnya,pintuid)
    if not nuked then
        if scanFire() then
            if CounterFire then
                clearfire()
            else
                bakar = true
            end
        end
    end
    if not nuked and not stuck and not bakar then
    if UseMethod then
    getBot():sendPacket("action|setSkin\ncolor|3370516479",2)
    end
    cektutor()
    trashsampah()
    clearTable(processedTimes)
    seedid = detect()
    cekseed()
    cekseed2()
    cekseed3()
    cekseed4()
    if seedid == 0 then
    modefloat = true
    float1()
    float2()
    seedidfloat = detectfloat()
    seedid  = detectfloat() 
    cekfloat()
    seedidfloat = seedidfloat 
    seedid = seedid + 1
    end
    trashclothes()
    antiToxic()
    gemsawal = getBot().gem_count
    tt = os.time()
    if foregraund(seedid) > 0 then
    if UseGrinder then
        cekitemgrinder()
    end
    botshow("Bot Start")
    jalan()
    cleargrinderitem()
    end
    if not modefloat then
    modefloat = true
    float1()
    float2()
    seedidfloat = detectfloat()
    seedid  = detectfloat() 
    cekfloat()
    seedidfloat = seedidfloat 
    seedid = seedid + 1
    if seedid ~= 1 then
    if foregraund(seedid) > 0 then
        if UseGrinder then
            cekitemgrinder()
        end
        botshow("Bot Start")
        jalan()
        cleargrinderitem()
        end
    end
    end
    if AutoFill then
        tambal()
    end
    modefloat = false
          tt = os.time() - tt
          Time[worldnya] = math.floor(tt / 3600) .. " Hours " .. math.floor(tt % 3600 / 60) .. " Minutes"
          sleep(100)
          botshow("World Finish")
          if start < #worlds then
           start = start + 1
          else
        if loop then
          totalloop = totalloop + 1
         waktu = {}
         berlian = {}
         pohon = {}
          end
    end
          if JoinOtherWorld then
            joinworld()
          end
    elseif nuked then
    Time[worldnya] = "NUKED"
    botshow("World Is Nuked, Going To Next World..")
    TagBan("**"..worldnya:upper().." [ Farm World ] WAS NUKED** ")
    WriteNuked(worldnya:upper())
    table.remove(worlds, i)
    nuked = false
    sleep(5000)
    elseif stuck then
    Time[worldnya] = "INVALID IDDOOR"
    botshow("Cant Join Id Door, Going To Next World..")
    TagBan("**"..worldnya:upper().." [ Farm World ] WAS INVALID DOOR ID** ")
    WriteStuck(worldnya:upper())
    table.remove(worlds, i)
    stuck = false
    sleep(5000)
    elseif bakar then
    Time[worldnya] = "FIRE"
    botshow("The World Has Fire, Going To Next World..")
    TagBan("**"..worldnya:upper().." [ Farm World ] HAS FIRE** ")
    WriteFire(worldnya:upper())
    table.remove(worlds, i)
    bakar = false
    sleep(5000)
       end
    if not loop then
        DataWorld()
        sleep(50)
        botshow("All World Has Been Finish, Removing Bot..")
        TagBan("**All World Has Been Finish, Removing Bot..**")
        removeBot(getBot().name)
        break
      end
    end
end
end


if getBot().status ~= 1 then
    sleep(100)
    getBot().auto_reconnect = true
    while true do
        if getBot().status == 3 then
            banned()
        end
	    sleep(8000)
        if getBot().status == 1 then
            break
        end
    end
end


getBot().auto_reconnect = true
getBot().reconnect_interval = DelayReconnect
getBot().move_interval = MoveInterval
getBot().collect_interval = 80
getBot():warp("EXIT")
sleep(9000)

roawr = bibirindah
if not roawr or roawr == nil then
    return
end

if HarvestTreeUntilReachLevel and getBot().level < HarvestUntilLevel then
    harvest2()
end

if PnbBlockUntilReachLevel and getBot().level < PnbUntilLevel then
    cekpnbmode()
end

if UseGrinder and ModeGrinder == "HARVESTALL" and not SmartSeparateWorld then
    harvestall()
elseif UseGrinder and ModeGrinder == "HARVESTALL" and SmartSeparateWorld then
    harvestall2()
elseif not SmartSeparateWorld then
    startwoi()
elseif SmartSeparateWorld then
    startwoi2()
end
