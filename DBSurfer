--===JOPY STORE===--



berlian = {}
pohon = {}
waktu = {}
worlds = {}
blist = {}
t = os.time()	
loop = 0
bw = 0
gemsawal = 0
gemssave = 0
gemsakhir = 0
strWaktu = ""
afgangila = "true"
skiptutorial = "false"
seeddata = ""
rumah = ""
totaldropnya = 0
bot = getBot()
world = bot:getWorld()
inventory = bot:getInventory()
proxyIndex = 1
BpCek = false
growidIndex = 1
emoji = ""
loopnya = 0
checknya = false

PassBotList = BotList[bot.name:upper()].PassBotList
BotListChange = BotList[bot.name:upper()].BotListChange
UseWebhook = BotList[bot.name:upper()].UseWebhook
WorldSavePackID = BotList[bot.name:upper()].WorldSavePackID
WorldSavePack = BotList[bot.name:upper()].WorldSavePack
seedid = BotList[bot.name:upper()].seedid
WorldSaveSeed = BotList[bot.name:upper()].WorldSaveSeed
WorldSaveSeedID = BotList[bot.name:upper()].WorldSaveSeedID
WorldList = BotList[bot.name:upper()].WorldList
slot = BotList[bot.name:upper()].slot
wid = BotList[bot.name:upper()].wid
loop = BotList[bot.name:upper()].loop
start = BotList[bot.name:upper()].startfrom
stop = #BotList[bot.name:upper()].WorldList
WhStatus = BotList[bot.name:upper()].WhStatus
MessageID = BotList[bot.name:upper()].MessageID
ChangeBotWhenMaxLevel = BotList[bot.name:upper()].ChangeBotWhenMaxLevel
maxlevel = BotList[bot.name:upper()].maxlevel
posX = BotList[bot.name:upper()].posX
posY = BotList[bot.name:upper()].posY
Guest = BotList[bot.name:upper()].Guest

blockid = seedid-1
posXBreak = posX-1
posYBreak = posY-1
stop = #WorldList


for i = start,#WorldList do
    table.insert(worlds,WorldList[i])
end

if loop then
    for i = 0,start - 1 do
        table.insert(worlds,WorldList[i])
    end
end

function waktuWorld()
    strWaktu = ""
        for _,world in pairs(WorldList) do
strWaktu = strWaktu .. "\n" .. world:upper() .. " ( " .. ("<:pro_timeout:1100160755287982150> : " .. (waktu[world] or "?")) .. " | " .. ":palm_tree: : " .. (pohon[world] or "0") .. " | " .. ":gem: : " .. (berlian[world] or "0") .. " )"
    end
   return strWaktu
end

   function Fossil()
   local fossil = 0
    for _,tile in pairs(world:getTiles()) do
        if tile.fg == 3918 then
            fossil = fossil + 1
        end
    end
    return fossil 
end

  function tre()
  local readytree = 0
      for i,til in pairs(world:getTiles()) do
          if til.fg == seedid and til:canHarvest() then
          readytree = readytree + 1
          end
      end
      return readytree
    end

function totaltree()
  local readytree = 0
      for _,til in pairs(world:getTiles()) do
          if til.fg == seedid then
          readytree = readytree + 1
          end
      end
      return readytree
    end


 function un()
 unreadytree = 0
for i, t in pairs(world:getTiles()) do
if t.fg == seedid and not t:canHarvest() then
unreadytree = unreadytree + 1
end
end
return unreadytree
end

function cekemoji()
if seedid == 4586 then
return "<:paperseedbs:1063061801601871932>"
elseif seedid == 5667 then
return "<:lgrid_seed:1091612884758437959>"
elseif seedid == 3005 then
return "<:fish_tank_seed:1012563310308233327>"
elseif seedid == 8641 then
return "<:Fence_seed:1121360619887661056>"
else
return  "<:paperseedbs:1063061801601871932>"
end
end

function status()
    if bot.status == BotStatus.online then
      return string.upper("Online")
    elseif bot.status == BotStatus.server_busy then
      return string.upper("Server Is Busy")
    elseif bot.status == BotStatus.offline then
      return string.upper("Offline")
    elseif bot.status == BotStatus.location_banned then
      return string.upper("Shadow Banned")  
    elseif bot.status == BotStatus.account_banned then
      return string.upper("Suspended / Banned")
    elseif bot.status == BotStatus.maintenance then
      return string.upper("Maintenance")
    elseif bot.status == BotStatus.error_connecting then
      return string.upper("Error Connecting")  
    else
      return string.upper("Unknown Status")        
    end
end


function TagBan(kata)
if not UseWebhookTagBan then
return
else
    local text = [[
        $webHookUrl = "]]..WhTagBan..[["
        $payload = @{
    content = "]]..kata..[["
        }
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType 'application/json'
    ]]
    local file = io.popen("powershell -command -", "w")
    file:write(text)
    file:close()
end
end

totalpack = 0
seeddrop = 0

function cekbuyer()
httpClient = HttpClient.new()
httpClient:setMethod(Method.get)
httpClient.url = "https://rentry.org/angkamahiya/raw"
httpClient.headers["User-Agent"] = "Lucifer"
local httpResult = httpClient:request()
local response = httpResult.body
return response
end

function cekbp()
if not BpCek then
if getBot():getInventory().slotcount < 36 then
if getBot().gem_count > 300 then
repeat
getBot():sendPacket(2,"action|buy\nitem|upgrade_backpack")
sleep(3000)
until getBot():getInventory().slotcount == 36 
BpCek = true
end
end
end
end

function botshow(Info)
if not UseWebhook then
return
else
te = os.time() - t
    local text = [[
        $webHookUrl = "]]..WhStatus..[[/messages/]]..MessageID..[["
        $CPU = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select -ExpandProperty Average
        $CompObject =  Get-WmiObject -Class WIN32_OperatingSystem
        $Memory = ((($CompObject.TotalVisibleMemorySize - $CompObject.FreePhysicalMemory)*100)/ $CompObject.TotalVisibleMemorySize)
        $RAM = [math]::Round($Memory, 0)
        $thumbnailObject = @{
            url = "https://share.creavite.co/9ugoY1REemeb0nVZ.gif"
        }
        $footerObject = @{
        text = "]]..(os.date("!%a %b %d, %Y | %I:%M %p", os.time() + 7 * 60 * 60))..[["
        }
        $fieldArray = @(
            @{
                name = "**<:mega:981220331572326471>  Bot Info** "
                value = "**]]..Info..[[**"
                inline = "false"
            }
            @{
                name = "**<:bot:1049606018008612874>  Bot Name** "
                value = "**]]..getBot().name:upper()..[[ ( ]]..getBot().level..[[ )**"
                inline = "true"
            }
            @{ 
                name = "**<a:online:1001674522321244270>  Bot Status **"
                value = "**]]..status()..[[**"
                inline = "true"
            }
            @{ 
                name = "**<:globez:1011929997679796254>  World** "
                value = "**||]]..getBot():getWorld().name:upper()..[[||**"
                inline = "true"
            }
            @{ 
                name = "**]]..emoji..[[  Ready Tree **"
                value = "**]]..tre()..[[**"
                inline = "true"
            }
            @{ 
                name = "**]]..emoji..[[  UnReady Tree **"
                value = "**]]..un()..[[**"
                inline = "true"
            } 
            @{ 
                name = "**<:gems:994218103032520724>  Bot Gems **"
                value = "**]]..getBot().gem_count..[[**"
                inline = "true"
            }
            @{ 
                name = "**<:fossilrock:1064165167992156240>  Fossil**"
                value = "**]]..Fossil()..[[**"
                inline = "true"
            }
            @{ 
                name = "**<:CPU:994981162588053565>  Cpu And Ram **"
                value = "**$CPU% | $RAM%**"
                inline = "true"
            } 
           @{
                name = "**<:discord_stage:1021386571909447680>  Ping** "
                value = "**]]..getBot():getPing()..[[ MS**"
                inline = "true"
            }
            @{
                name = "**<a:alert:1069590979029512192> Ban Wave**"
                value = "**]]..bw..[[**"
                inline = "true"
            }
            @{
                name = "**<a:rgbload:993270101262475304>  Progress World**"
                value = "**]]..start..[[ / ]]..stop..[[**"
                inline = "true"
            }
            @{
                name = "**<:loop:1086978455171772467> Loop**"
                value = "**]]..loopnya..[[**"
                inline = "true"
            }
            @{
                name = "**<:Scroll:1083965766187110460> World List**"
                value = "**]]..strWaktu..[[**"
                inline = "false"
            }
            @{
                name = "**<:growtopia_clock:1011929976628596746>  Bot Up Time**"
                value = "**]]..math.floor(te/86400)..[[ Days ]]..math.floor(te%86400/3600)..[[ Hours ]]..math.floor(te%86400%3600/60)..[[ Minutes**"
                inline = "false"
            }
        )
        $embedObject = @{
            title = "**<:HuTao_Yawn:825316612927127574> Jopy Rotation V1.0 ( Nuron ) <:HuTao_Yawn:825316612927127574> ( ]]..cekbuyer()..[[ Buyers )**"
            color = "]]..math.random(111111,999999)..[["
            thumbnail = $thumbnailObject
            footer = $footerObject
            fields = $fieldArray
        }
        $embedArray = @($embedObject)
        $payload = @{
            embeds = $embedArray
        }
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
    ]]
    local file = io.popen("powershell -command -", "w")
    file:write(text)
    file:close()
end
end

function botpack(Kata)
if not UseWebhookPackAndSeed then
return
else
            te = os.time() - t
    local text = [[
        $webHookUrl = "]]..WhPackAndSeed..[[/messages/]]..MessageIDPack..[["
        $CPU = Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select -ExpandProperty Average
        $RAM = [math]::Round($Memory, 0)
        $thumbnailObject = @{
            url = "https://share.creavite.co/9ugoY1REemeb0nVZ.gif"
        }
        $footerObject = @{
            text = "]]..(os.date("!%a %b %d, %Y | %I:%M %p", os.time() + 7 * 60 * 60))..[["
        }
        $fieldArray = @(
            @{
                name = "**<:mega:981220331572326471>  Bot Info**"
                value = "**]]..Kata..[[**"
                inline = "false"
            }
            @{
                name = "**<:bot:1049606018008612874>  Bot Name** "
                value = "**]]..getBot().name:upper()..[[ ( ]]..getBot().level..[[ )**"
                inline = "false"
            }
            @{ 
                name = "**<:globez:1011929997679796254>  World** "
                value = "**]]..getBot():getWorld().name:upper()..[[**"
                inline = "true"
            }
            @{
                name = "**<:shop_sign:1012590603172847648>  Pack Name**"
                value = "**]]..pack..[[**"
                inline = "true"
            }
            @{
                name = "**<:small_seed_pack:1098848345956560997>  Total Pack**"
                value = "**]]..totalpack..[[**"
                inline = "true"
            }
            @{
                name = "**]]..emoji..[[  Total Seed**"
                value = "**]]..seeddrop..[[**"
                inline = "true"
            }
        )
        $embedObject = @{
            title = "**Jopy Rotation V1.0 ( Nuron ) ( ]]..cekbuyer()..[[ Buyers )**"
            color = "]]..math.random(111111,999999)..[["
            thumbnail = $thumbnailObject
            footer = $footerObject
            fields = $fieldArray
        }
        $embedArray = @($embedObject)
        $payload = @{
            embeds = $embedArray
        }
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
    ]]
    local file = io.popen("powershell -command -", "w")
    file:write(text)
    file:close()
end
end

function soilmode()
y = 0
  if SoilFarmMode then
    if IgnoreGems then
      getBot().ignore_gems = true
      getBot().auto_collect = true
      for i, tile in pairs(world:getTiles()) do
        if tile.fg == seedid and tile:canHarvest() and inventory:getItemCount(seedid-1) < 150 then
            if not blacklistTiles or check(tile.x,tile.y) then
            getBot():findPath(tile.x, tile.y)
         while world:getTile(tile.x,tile.y).fg == seedid and tile:canHarvest() do
            sleep(20)
            getBot():hit(tile.x,tile.y)
            sleep(delayharvest)
          end
  while world:getTile(tile.x, tile.y+1).fg == (seedid + 3) and world:getTile(tile.x, tile.y+1).flags ~= 0 do
  getBot():hit(tile.x,tile.y+1)
  sleep(delayharvest)
  reconnect(posX-1,posY-1)
          end
        end
    end
end
    elseif not IgnoreGems then
      getBot().auto_collect = true
      for i, tile in pairs(world:getTiles()) do
        if tile.fg == seedid and tile:canHarvest() and inventory:getItemCount(seedid-1) < 150 then
            if not blacklistTiles or check(tile.x,tile.y) then
            getBot():findPath(tile.x, tile.y)
          while world:getTile(tile.x,tile.y).fg == seedid and tile:canHarvest() do
            sleep(20)
            getBot():hit(tile.x,tile.y)
            sleep(delayharvest)
          end
  while world:getTile(tile.x, tile.y+1).fg == (seedid + 3) and world:getTile(tile.x, tile.y+1).flags ~= 0 do
  getBot():hit(tile.x,tile.y+1)
  sleep(delayharvest)
  reconnect(posX-1,posY-1)
      end
end
 end
end
end
end
end

 function coptrashs()
        for a, trash in ipairs(trashList) do
            trash_count = inventory:getItemCount(trash)
            if inventory:getItemCount(trash) > MaxItemToTrash then
                getBot():sendPacket(2,"action|trash\n|itemID|"..trash) 
                sleep(1500)
                getBot():sendPacket(2,"action|dialog_return\ndialog_name|trash_item\nitemID|"..trash.."|\ncount|"..trash_count)
                sleep(4000)
            end
        end
    end

function changeBot()
if ChangeBotWhenMaxLevel then
        if getBot().level >= maxlevel then
            oldbotworld = getBot():getWorld().name
            sleep(50)
            oldbotname = getBot().name
            sleep(50)
            botshow("Bot Level : "..getBot().level.." Changing Bot...")
            sleep(100)
            warp(WorldSaveSeed,WorldSaveSeedID)
            for _, tile in pairs(world:getTiles()) do
            if tile.fg == IDPatokanSeed then
            getBot():findPath(tile.x+1,tile.y)
            sleep(500)
     end
  end
            seedid_count = inventory:getItemCount(seedid)
            blockid_count = inventory:getItemCount(blockid)
            getBot():drop(blockid,blockid_count)
            sleep(1000)
            getBot():moveRight()
            sleep(500)
            getBot():drop(seedid,seedid_count)
            sleep(1000)
            if getBot().gem_count >= packgems then
                belicuy()
            end
            sleep(5000)
                for _,botnama in pairs(BotListChange) do
                        if useproxy then
             local proxy = proxy[proxyIndex]
                            addBot(botnama, PassBotList, proxy)
                            sleep(3000)
                            if getBot().status ~= BotStatus.online then
                                repeat
                                    getBot():connect()
                                    sleep(8000)
                                until getBot().status == BotStatus.online or getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned
                            end
                        else
                            addBot(botnama, PassBotList)
                            sleep(3000)
                            if getBot().status ~= BotStatus.online then
                                repeat
                                   getBot():connect()
                                   sleep(8000)
                                until getBot().status == BotStatus.online or getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned
                            end
                        end
                    if getBot().level >= maxlevel or getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned then
                        if getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned then
                            botshow(getBot().name:upper().." = "..status())
                            sleep(100)
                            removeBot(getBot().name)
                        end
                    elseif getBot().level < maxlevel then
                        botshow("Success Changing Bot")
                        removeBot(oldbotname)
                        sleep(100)
                        warp(oldbotworld,wid:upper())
                        sleep(4000)
                        getBot().auto_collect = true
                        sleep(50)
                        jalan()
                        break
                    end
                end 
        end
    end
end

local processedTimes = {} -- Tabel untuk menyimpan waktu yang telah diproses

function botRest()
    local current_hour = tonumber(os.date("%H"))

    for i = #TimeRest, 1, -1 do
        local curah = TimeRest[i]
        if current_hour == curah and not isTimeProcessed(curah) then
            getBot():disconnect()
            botshow("Bot Rest.. For " .. SleepRest .. " Minutes")
            sleep(SleepRest * 60 * 1000)
            getBot():connect()
            botshow("Bot Done Rest, Starting Back...")
            if getBot().status ~= 1 then
                repeat
                    getBot():connect()
                    sleep(10000)
                until getBot().status == 1
            end
            if getBot().status == 1 then
                table.insert(processedTimes, curah) -- Menyimpan waktu yang telah diproses
                warp(rumah, wid:upper())
                jalan()
                break -- Keluar dari loop jika jam cocok
            end
        end
    end
end

function isTimeProcessed(time)
    for i = 1, #processedTimes do
        if processedTimes[i] == time then
            return true -- Mengembalikan true jika waktu sudah diproses sebelumnya
        end
    end
    return false -- Mengembalikan false jika waktu belum diproses sebelumnya
end



function cekbl(world)
    blist = {}
    for _,tile in pairs(getBot():getWorld():getTiles()) do
        if tile.fg == 6 then
            doorX = tile.x
            doorY = tile.y
        end
    end
    if blacklistTiles then
        for _,tile in pairs(blacklistlist) do
            table.insert(blist,{x = doorX + tile.x, y = doorY + tile.y})
        end
    end
end

function check(x,y)
    for _,tile in pairs(blist) do
        if x == tile.x and y == tile.y then
            return false
        end
    end
    return true
end


function offandon()
waras = bot:getWorld().name
httpClient = HttpClient.new()
httpClient:setMethod(Method.get)
httpClient.url = RentryLink
httpClient.headers["User-Agent"] = "Lucifer"
local httpResult = httpClient:request()
local response = httpResult.body
if response == "OFF" then
sleep(1000)
        bot:disconnect()
        botshow("Bot Off..")
        repeat
until response == "ON"
sleep(1000)
        botshow("Bot Back Online..")
        bot:connect()
        sleep(10000)
        warp(waras,wid:upper())
        jalan()
end
end


function addnyaproxy(rara)
while true do
if proxyIndex <= #proxy then
if growidIndex <= #BotGrowid then
local growidcuy = BotGrowid[growidIndex]
local proxycuy = proxy[proxyIndex]
addBot(growidcuy,PassBot,proxycuy)
sleep(10000)
if getBot().status ~= BotStatus.online then
getBot():connect()
sleep(8000)
end
if getBot().status == BotStatus.online then
warp(rumah,wid:upper())
removeBot(rara)
jalan()
break
end
if getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned then
botshow(""..getBot().name.." Is "..status().."")
removeBot(growidcuy)
growidIndex = growidIndex  + 1
end
end
end
end
end

function addnyabiasa(rara)
while true do
if growidIndex <= #BotGrowid then
local growidcuy = BotGrowid[growidIndex]
local proxycuy = proxy[proxyIndex]
addBot(growidcuy,PassBot)
sleep(10000)
if getBot().status ~= BotStatus.online then
getBot():connect()
sleep(8000)
end
if getBot().status == BotStatus.online then
warp(rumah,wid:upper())
removeBot(rara)
jalan()
break
end
if getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned then
botshow(""..getBot().name.." Is "..status().."")
removeBot(growidcuy)
growidIndex = growidIndex  + 1
end
end
end
end



function cekbroya()
if useproxy then
addnyaproxy(getBot().name)
else
addnyabiasa(getBot().name)
end
end

function banned()
  if BackUpBot then
  cekbroya()
  jalan()
  else
  botshow("Bot Got Ban, No BackUpBot :)")
  removeBot(getBot().name)
  end
end

function backpos(x,y)
werkd = rumah
    for _, tile in pairs(world:getTiles()) do
        if world:getTile(math.floor(world:getLocal().posx / 32),math.floor(world:getLocal().posy / 32)).fg == 6 then
            repeat
            getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. wid:upper().."\ninvitedWorld|0")
            sleep(4000)
            until world:getTile(math.floor(world:getLocal().posx / 32),math.floor(world:getLocal().posy / 32)).fg ~= 6
            if x and y and getBot().status == BotStatus.online and getBot():getWorld().name:upper() == werkd:upper() then
                repeat
                    getBot():findPath(x,y)
                    sleep(100)
                until math.floor(world:getLocal().posx / 32) == x or math.floor(world:getLocal().posy / 32) == y
            end
            if getBot().status == BotStatus.online and getBot():getWorld().name:upper() == werkd:upper() then
                if x and y then
                    if getBot().status == BotStatus.online and math.floor(world:getLocal().posx / 32) == x and math.floor(world:getLocal().posy / 32) == y then
                        break
                    end
                elseif getBot().status == BotStatus.online then
                    break
                end
            end
        end
    end
end

function reconnect(x,y)
atas = getBot():getWorld().name
if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
TagBan("**"..getBot().name:upper().." In EXIT, Now Back To Farm In "..rumah.." @everyone **")
sleep(5000)
warp(rumah,wid:upper())
backpos(x,y)
jalan()
end
if getBot().status ~= 1 then
TagBan("**"..getBot().name:upper().." Was "..status().." Reconnecting... @everyone **")
repeat
getBot():connect()
sleep(8000)
until getBot().status == 1 or getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned
if getBot().status == BotStatus.account_banned then 
TagBan("**"..getBot().name:upper().." Was "..status().." Removing Bot... @everyone**")
banned()
end
if getBot().status == BotStatus.location_banned then
TagBan("**"..getBot().name:upper().." Was "..status().." Removing Bot... @everyone**")
banned()
end
if getBot().status == 1 then
TagBan("**"..getBot().name:upper().." Was "..status().." Now Back To Farm.. @everyone **")
sleep(5000)
warp(rumah,wid:upper())
backpos(x,y)
jalan()
end
end
end

function banwave()
waras = getBot():getWorld().name
httpClient = HttpClient.new()
httpClient:setMethod(Method.get)
httpClient.url = "https://rentry.org/rihkumah/raw"
httpClient.headers["User-Agent"] = "Lucifer"
local httpResult = httpClient:request()
local playerData = httpResult.body
local playerNumber = tonumber(playerData:match("%d+"))
  if playerNumber and playerNumber > tonumber(CustomOffPlayer) then
  local startTime = os.time() -- Waktu mulai
    sleep(1000)
    getBot():disconnect()
    botshow("Bot Off, Ban Wave!, Rest For "..SleepBotOff.." Minutes")
    sleep(SleepBotOff * 60 * 1000)
    if getBot().status ~= 1 then
    while getBot().status ~= 1 do
    getBot():connect()
    sleep(7000)
    end
    end
    if getBot().status == 1 then
    warp(waras,wid:upper())
    jalan()
  end
end
end


function harvest()
atas = getBot():getWorld().name
soilmode()
coptrashs()
bot.auto_collect = true
for i, tile in ipairs(world:getTiles()) do
if tile.fg == seedid and tile:canHarvest() and inventory:getItemCount(seedid-1) < 150 then
if not blacklistTiles or check(tile.x,tile.y) then
bot:findPath(tile.x,tile.y)
while world:getTile(tile.x,tile.y).fg == seedid and tile:canHarvest() do
reconnect(tile.x,tile.y)
bot:hit(tile.x,tile.y)
sleep(delayharvest)
end
end
end
end
end

function takegems()
y = 0
if foregraund(seedid) == 0 then
if TakeGemsWithGrowid then
addBot(GrowidTakeGems,PasswordGrowid)
      sleep(10000)
warp(rumah,wid:upper())
      getBot().auto_collect = true
      getBot():findPath(0,y)
for _,rah in pairs(world:getObjects()) do
        if rah.id == 112 then
          while rah.count > 0 do
            for i =1,33 do
              getBot():moveRight()
              getBot():moveRight()
              getBot():moveRight()
            end
            y = y + 2
            getBot():findPath(0,y)
          end
          if rah.count == 0 then
            removeBot(GrowidTakeGems)
            sleep(10000)
            botshow("Done Taking Soil Gems")
                end
              end
            end
          end
        end
      end

function plant()
cekbp()
coptrashs()
for i, tile in ipairs(world:getTiles()) do
if 0 == world:getTile(tile.x, tile.y).fg and 0 ~= world:getTile(tile.x, tile.y + 1).fg and world:getTile(tile.x, tile.y + 1).fg ~= seedid and inventory:getItemCount(seedid) > 0 then
if not blacklistTiles or check(tile.x,tile.y) then
getBot():findPath(tile.x, tile.y)
sleep(20)
if world:getTile(math.floor(world:getLocal().posx / 32), math.floor(world:getLocal().posy / 32)).fg == 0 then
reconnect(tile.x,tile.y)
getBot():place(tile.x,tile.y,seedid)
sleep(20)
sleep(delayplant)
end
if world:getTile(math.floor(world:getLocal().posx / 32 - 1), math.floor(world:getLocal().posy / 32)).fg == 0 then
reconnect(tile.x,tile.y)
getBot():place(tile.x,tile.y,seedid)
sleep(20)
sleep(delayplant)
end
end
end
end
end

function warpdoang(world,id)
getBot():sendPacket(3,"action|join_request\nname|"..world:upper().."|"..id:upper().."\ninvitedWorld|0")
sleep(4000)
end

nuked = false 
function warp(worldra,id)
    cok = 0
    while getBot():getWorld().name:upper() ~= worldra:upper() and not nuked do
        while getBot().status ~= 1 do
            getBot():connect()
            sleep(5000)
        end
        getBot():sendPacket(3,"action|join_request\nname|"..worldra:upper().."\ninvitedWorld|0")
        sleep(5000)
        if cok == 10 then
            nuked = true
        else
            cok = cok + 1
        end
    end
    if id ~= "" and not nuked then
        while world:getTile(math.floor(world:getLocal().posx / 32), math.floor(world:getLocal().posy / 32)).fg == 6 and not nuked do
            while getBot().status ~= 1 do
                getBot():connect()
                sleep(5000)
            end
            getBot():sendPacket(3,"action|join_request\nname|"..worldra:upper().."|"..id:upper().."\ninvitedWorld|0")
            sleep(1000)
        end
    end
end


function dropItem(itemID, count)
if inventory:getItemCount(itemID) >= count then
getBot():sendPacket(2,"action|drop\nitemID|" .. itemID)
sleep(500)
getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|" .. itemID .. "|\ncount|" .. count)
sleep(1000)
end
end 

function kiricuy()
	packet = {}
	packet.type = 0
    packet.pos_x = world:getLocal().posx
	packet.pos_y = world:getLocal().posy
	packet.flags = 32
	getBot():sendRaw(packet)
end

function takepick()
if TakePick then
if inventory:getItemCount(98) == 0 then
getBot().auto_collect = false
botshow("Taking Pick")
    warp(WorldPick,WorldPickID)
    sleep(100)
    while inventory:getItemCount(98) == 0 do
        for _,obj in pairs(world:getObjects()) do
            if obj.id == 98 then
                getBot():findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(1000)
               getBot().auto_collect = true
               sleep(5000)
               getBot().auto_collect = false
            end
            if inventory:getItemCount(98) > 0 then
                break
            end
        end
    end
    getBot():moveLeft()
    sleep(100)
    while inventory:getItemCount(98) > 1 do
    getBot():sendPacket(2,"action|drop\n|itemID|98")
    sleep(1000)
    getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|98|\ncount|"..(inventory:getItemCount(98) - 1))
    sleep(1000)
    end
    getBot():wear(98)
    sleep(500)
end
end
end

function joinworld()
botshow("World Finish, Joining World...")
    sleep(100)
    for _,bimba in pairs(WorldForJoin) do
        warp(bimba,"")
        sleep(4000)
    end
end

function autoban()
 for _, peler in pairs(world:getPlayers()) do
        for _, own in pairs(WhiteList) do
            if peler.name:upper() == own:upper() and peler.name:upper() ~= getBot().name:upper() then
                getBot():say("/ban "..peler.name)
                sleep(3000) 
               end
            end
        end
    end

function autoleave()
if AutoLeave then
for _, peler in pairs(world:getPlayers()) do
for _, own in pairs(WhiteList) do
       if peler.name:upper() == own:upper() and peler.name:upper() ~= getBot().name:upper() then
if peler > MaxPeople then
getBot():sendPacket(3,"action|join_request\nname|" .. EXIT .. "\ninvitedWorld|0")
sleep(DelayLeave)
warp(rumah,wid)
jalan()
end
end
end
end
end
end

function breaks()
cekbp()
woras = bot:getWorld().name
coptrashs()
bot:findPath(posXBreak,posYBreak)
while inventory:getItemCount(seedid-1) > 0 do
reconnect(posX-1,posY-1)
if BreakTiles == "1" then
bot:place(posX-2,posY-1,seedid-1)
sleep(delayplace)
for i =1,hit do
bot:hit(posX-2,posY-1)
sleep(delaypunch)
end
end
if BreakTiles == "2" then
bot:place(posX-2,posY-1,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY-2,seedid-1)
sleep(delayplace)
for i =1,hit do
bot:hit(posX-2,posY-1)
sleep(delaypunch)
bot:hit(posX-2,posY-2)
sleep(delaypunch)
end
end
if BreakTiles == "3" then
bot:place(posX-2,posY-2,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY-1,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY,seedid-1)
sleep(delayplace)
for i =1,hit do
bot:hit(posX-2,posY-2)
sleep(delaypunch)
bot:hit(posX-2,posY-1)
sleep(delaypunch)
bot:hit(posX-2,posY)
sleep(delaypunch)
end
end
if BreakTiles == "4" then
bot:place(posX-2,posY-3,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY-2,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY-1,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY,seedid-1)
sleep(delayplace)
for i =1,hit do
bot:hit(posX-2,posY-3)
sleep(delaypunch)
bot:hit(posX-2,posY-2)
sleep(delaypunch)
bot:hit(posX-2,posY-1)
sleep(delaypunch)
bot:hit(posX-2,posY)
sleep(delaypunch)
end
end
if BreakTiles == "5" then
bot:place(posX-2,posY-3,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY-2,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY-1,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY,seedid-1)
sleep(delayplace)
bot:place(posX-2,posY+1,seedid-1)
sleep(delayplace)
for i =1,hit do
bot:hit(posX-2,posY-3)
sleep(delaypunch)
bot:hit(posX-2,posY-2)
sleep(delaypunch)
bot:hit(posX-2,posY-1)
sleep(delaypunch)
bot:hit(posX-2,posY)
sleep(delaypunch)
bot:hit(posX-2,posY+1)
sleep(delaypunch)
end
end
end
end

function foregraund(itemid)
      local count = 0
      for i, tile in pairs(world:getTiles()) do
        if tile.fg == itemid and tile:canHarvest() then
          count = count + 1
        end
      end
      return count
    end

function checkdata()
botshow("Waiting Owner...")
httpClient = HttpClient.new()
httpClient:setMethod(Method.get)
httpClient.url = "https://rentry.co/benerilang/raw"
httpClient.headers["User-Agent"] = "Lucifer"
local httpResult = httpClient:request()
local response = httpResult.body

  if not string.find(response, OwnerName) then
  repeat
  sleep(5000)
httpClient = HttpClient.new()
httpClient:setMethod(Method.get)
httpClient.url = "https://rentry.co/benerilang/raw"
httpClient.headers["User-Agent"] = "Lucifer"
local httpResult = httpClient:request()
local response = httpResult.body
  until string.find(response, OwnerName)
checknya = true
else
checknya = true
end
end

function backpospack(worldnya,x,y)
werkd = worldnya
    for _, tile in pairs(world:getTiles()) do
        if world:getTile(math.floor(world:getLocal().posx / 32),math.floor(world:getLocal().posy / 32)).fg == 6 then
            repeat
            getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. wid:upper().."\ninvitedWorld|0")
            sleep(4000)
            until world:getTile(math.floor(world:getLocal().posx / 32),math.floor(world:getLocal().posy / 32)).fg ~= 6
            if x and y and getBot().status == 1 and getBot():getWorld().name:upper() == werkd:upper() then
                repeat
                    getBot():findPath(x,y)
                    sleep(100)
                until math.floor(world:getLocal().posx / 32) == x or math.floor(world:getLocal().posy / 32) == y
            end
            if getBot().status == 1 and getBot():getWorld().name:upper() == werkd:upper() then
                if x and y then
                    if getBot().status == 1 and math.floor(world:getLocal().posx / 32) == x and math.floor(world:getLocal().posy / 32) == y then
                        break
                    end
                elseif getBot().status == 1 then
                    break
                end
            end
        end
    end
end

function backposseed(worldnya,x,y)
werkd = worldnya
    for _, tile in pairs(world:getTiles()) do
        if world:getTile(math.floor(world:getLocal().posx / 32),math.floor(world:getLocal().posy / 32)).fg == 6 then
            repeat
            getBot():sendPacket(3,"action|join_request\nname|".. werkd .. "|" .. wid:upper().."\ninvitedWorld|0")
            sleep(4000)
            until world:getTile(math.floor(world:getLocal().posx / 32),math.floor(world:getLocal().posy / 32)).fg ~= 6
            if x and y and getBot().status == 1 and getBot():getWorld().name:upper() == werkd:upper() then
                repeat
                    getBot():findPath(x,y)
                    sleep(100)
                until math.floor(world:getLocal().posx / 32) == x or math.floor(world:getLocal().posy / 32) == y
            end
            if getBot().status == 1 and getBot():getWorld().name:upper() == werkd:upper() then
                if x and y then
                    if getBot().status == 1 and math.floor(world:getLocal().posx / 32) == x and math.floor(world:getLocal().posy / 32) == y then
                        break
                    end
                elseif getBot().status == 1 then
                    break
                end
            end
        end
    end
end

function reconnectpack(world,x,y)
if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
TagBan("**"..getBot().name:upper().." In EXIT, Now Back Saving "..pack.." In "..world.." @everyone **")
sleep(5000)
warp(world,WorldSavePackID)
sleep(500)
backpospack(world,x,y)
end
if getBot().status ~= 1 then
TagBan("**"..getBot().name:upper().." Was "..status().." Reconnecting... @everyone **")
repeat
getBot():connect()
sleep(8000)
until getBot().status == 1 or getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned
if getBot().status == BotStatus.account_banned then 
TagBan("**"..getBot().name:upper().." Was "..status().." Removing Bot... @everyone**")
banned()
elseif getBot().status == BotStatus.location_banned then
TagBan("**"..getBot():getLocal().name:upper().." Was "..status().." Removing Bot... @everyone**")
banned()
elseif getBot().status == 1 then
TagBan("**"..getBot().name:upper().." Was "..status().." Now Back To Saving "..pack.." In "..world.." @everyone **")
sleep(5000)
warp(world,WorldSavePackID)
sleep(500)
backpospack(world,x,y)
end
end
end

function reconnectseed(world,x,y)
if getBot().status == 1 and getBot():getWorld().name:upper() == "EXIT" then
TagBan("**"..getBot().name:upper().." In EXIT, Now Back Saving "..pack.." In "..world.." @everyone **")
sleep(5000)
warp(world,WorldSaveSeedID)
sleep(500)
backposseed(world,x,y)
end
if getBot().status ~= 1 then
TagBan("**"..getBot().name:upper().." Was "..status().." Reconnecting... @everyone **")
repeat
getBot():connect()
sleep(8000)
until getBot().status == 1 or getBot().status == BotStatus.account_banned or getBot().status == BotStatus.location_banned
if getBot().status == BotStatus.account_banned then 
TagBan("**"..getBot().name:upper().." Was "..status().." Removing Bot... @everyone**")
banned()
elseif getBot().status == BotStatus.location_banned then
TagBan("**"..getBot():getLocal().name:upper().." Was "..status().." Removing Bot... @everyone**")
banned()
elseif getBot().status == 1 then
TagBan("**"..getBot().name:upper().." Was "..status().." Now Back To Saving Seeds In "..world.." @everyone **")
sleep(5000)
warp(world,WorldSaveSeedID)
sleep(500)
backposseed(world,x,y)
end
end
end

function round(n)
    return n % 1 > 0.5 and math.ceil(n) or math.floor(n)
end

function CekTilePack(x,y,num)
    local count = 0
    local stack = 0
    for _,obj in pairs(world:getObjects()) do
        if round(obj.x / 32) == x and math.floor(obj.y / 32) == y then
            count = count + obj.count
            stack = stack + 1
        end
    end
    if stack < 20 and count <= (4000 - num) then
        return true
    end
    return false
end

function savecuy()
atas = getBot():getWorld().name
    for _,pack in pairs(packitemid) do
        for _,tile in pairs(world:getTiles()) do
            if tile.fg == IDPatokanPack or tile.bg == IDPatokanPack then
                if CekTilePack(tile.x,tile.y,inventory:getItemCount(pack)) then
                    while math.floor(world:getLocal().posx / 32) ~= (tile.x - 1) or math.floor(world:getLocal().posy / 32) ~= tile.y do
                        getBot():findPath(tile.x - 1,tile.y)
                        sleep(1000)
                         reconnectpack(atas, tile.x, tile.y)
                    end
                    while inventory:getItemCount(pack) > 0 and CekTilePack(tile.x,tile.y,inventory:getItemCount(pack)) do
                        getBot():sendPacket(2,"action|drop\n|itemID|"..pack)
                        sleep(1000)
                        getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..pack.."|\ncount|"..inventory:getItemCount(pack))
                        sleep(1000)
                        reconnectpack(atas, tile.x, tile.y)
                    end
                end
            end
            if inventory:getItemCount(pack) == 0 then
                break
            end
        end
    end
end

function sampah()
if next(CustomItem) ~= nil then
getBot():moveUp()
for _, sampah in pairs(CustomItem) do
royal = inventory:getItemCount(sampah)
    while inventory:getItemCount(sampah) ~= 0 do
    getBot():sendPacket(2,"action|drop\nitemID|" .. sampah)
    getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|" .. seedid .. "|\ncount|" ..royal)
    sleep(500)
    getBot():moveRight()
    end
end
    else
    return
    end
end

function SeedsScanner(ItemID)
local kiwar = 0
    for _, object in pairs(world:getObjects()) do 
        if object.id == ItemID then
      kiwar = kiwar + object.count
        end
    end
return kiwar
end

function CekTileSeeds(x,y,num)
    local count = 0
    local stack = 0
    for _,obj in pairs(world:getObjects()) do
        if round(obj.x / 32) == x and math.floor(obj.y / 32) == y then
            count = count + obj.count
            stack = stack + 1
        end
    end
    if count <= (3800 - num) then
        return true
    end
    return false
end

function saveseed()
getBot().auto_collect = false
botpack("Saving Seeds")
atas = getBot():getWorld().name
        warp(WorldSaveSeed,WorldSaveSeedID)
    for _, tile in pairs(world:getTiles()) do
        if tile.fg == IDPatokanSeed or tile.bg == IDPatokanSeed then 
           if CekTileSeeds(tile.x,tile.y,100) then
                while math.floor(world:getLocal().posx / 32) ~= (tile.x - 1) or math.floor(world:getLocal().posy / 32) ~= tile.y do
                    getBot():findPath(tile.x - 1,tile.y)
                    sleep(100)
                    reconnectseed(atas, tile.x, tile.y)
                end
                while inventory:getItemCount(seedid) > 100 and CekTileSeeds(tile.x,tile.y,100) do
                    getBot():sendPacket(2,"action|drop\n|itemID|"..seedid)
                    sleep(1000)
                    getBot():sendPacket(2,"action|dialog_return\ndialog_name|drop_item\nitemID|"..seedid.."|\ncount|100")
                    sleep(1000)
                    reconnectseed(atas, tile.x, tile.y)
                end
            end
        if inventory:getItemCount(seedid) <= 100 then
                break
            end
        end
    end
    sampah()
    seeddrop = SeedsScanner(seedid)
    botpack("Success Saving Seeds")
    sleep(500)
    warp(rumah, wid:upper())
end



function belicuy()
  woloy = getBot():getWorld().name
    sleep(1800)
    getBot().auto_collect = false
    botpack("Buying Pack..")
    warp(WorldSavePack,WorldSavePackID)
    while getBot().gem_count > packgems do
            getBot():sendPacket(2,"action|buy\nitem|".. itemname)
            sleep(4000)
            gemssave = gemssave + packgems
        if inventory:getItemCount(packitemid[1]) < 1 then
                getBot():sendPacket(2,"action|buy\nitem|upgrade_backpack")
                sleep(5000)
        end
        if getBot().gem_count < packgems then
            break
      end
 end
        savecuy()
        totalpack = SeedsScanner(packitemid[1])
        botpack("Done Droping Pack, Back To Farm...")
    warp(woloy,wid:upper())
end

function anjay()
  if getBot().gem_count > MinimumGems then 
            belicuy()
end
end

function rotisan()
if inventory:getItemCount(seedid) > 130 then
saveseed()
end
end

function cukcuk1(world)
if foregraund(seedid) == 0 then
gemsakhir = getBot().gem_count
gemssmua = gemsakhir + gemssave
local perbedaan = math.abs(gemsawal - gemssmua)
anjay()
pohon[world] = totaltree()
berlian[world] = perbedaan
botshow("World Finish")
gemssave = 0
end
end

function jalan()
letus = getBot():getWorld().name:upper()
if foregraund(seedid) == 0 then
cukcuk1(letus)
end
while foregraund(seedid) > 0 do
if UsingCommand then
offandon()
end
harvest()
if AutoBan then
autoban()
end
if ChangeBotWhenMaxLevel then
changeBot()
end
if AutoLeave then
autoleave()
end
if RestBot then
botRest()
end
if AutoOffBot then
banwave()
end
if UsingCommand then
offandon()
end
breaks()
anjay()
if AutoOffBot then
banwave()
end
if UsingCommand then
offandon()
end
plant()
anjay()
if AutoOffBot then
banwave()
end
rotisan()
if ChangeBotWhenMaxLevel then
changeBot()
end
cukcuk1(letus)
end
end

function clearTable(tbl)
    for k in pairs(tbl) do
        tbl[k] = nil
    end
end

function startwoi()
while true do
if getBot().status == 1 then
for index,world in pairs(worlds) do
rumah = world
waktuWorld()
if Guest then
sleep(20000)
end
if not checknya then
checkdata()
end
if checknya then
takepick()
warp(world,wid)
if not nuked then
clearTable(processedTimes)
botshow("Bot Start")
botshow(getBot():getInventory().slotcount)
cekbl(world)
tt = os.time()
gemsawal = getBot().gem_count
jalan()
      takegems()
      tt = os.time() - tt
      waktu[world] = math.floor(tt / 3600) .. " Hours " .. math.floor(tt % 3600 / 60) .. " Minutes"
      sleep(100)
      if start < #WorldList then
      start = start + 1
      else
      loopnya = loopnya + 1
      end
      if JoinWorldAfterFinish then
        joinworld()
      end
else
waktu[world] = "NUKED"
botshow("World Nuked")
nuked = false
sleep(5000)
   end
end
end
if not loop then
    waktuWorld()
    sleep(100)
    botshow("All World Is Done Bot Is Removed")
    removeBot(getBot().name)
    break
  end
end
end
end

startwoi()
